// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_vector_format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_open_5fvector_5fformat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_open_5fvector_5fformat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_open_5fvector_5fformat_2eproto;
namespace open_vector_format {
class AxisAlignedBox2D;
struct AxisAlignedBox2DDefaultTypeInternal;
extern AxisAlignedBox2DDefaultTypeInternal _AxisAlignedBox2D_default_instance_;
class Job;
struct JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobParameters;
struct JobParametersDefaultTypeInternal;
extern JobParametersDefaultTypeInternal _JobParameters_default_instance_;
class Job_JobMetaData;
struct Job_JobMetaDataDefaultTypeInternal;
extern Job_JobMetaDataDefaultTypeInternal _Job_JobMetaData_default_instance_;
class Job_MarkingParamsMapEntry_DoNotUse;
struct Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal;
extern Job_MarkingParamsMapEntry_DoNotUseDefaultTypeInternal _Job_MarkingParamsMapEntry_DoNotUse_default_instance_;
class Job_PartsMapEntry_DoNotUse;
struct Job_PartsMapEntry_DoNotUseDefaultTypeInternal;
extern Job_PartsMapEntry_DoNotUseDefaultTypeInternal _Job_PartsMapEntry_DoNotUse_default_instance_;
class MarkingParams;
struct MarkingParamsDefaultTypeInternal;
extern MarkingParamsDefaultTypeInternal _MarkingParams_default_instance_;
class Part;
struct PartDefaultTypeInternal;
extern PartDefaultTypeInternal _Part_default_instance_;
class Part_GeometryInfo;
struct Part_GeometryInfoDefaultTypeInternal;
extern Part_GeometryInfoDefaultTypeInternal _Part_GeometryInfo_default_instance_;
class Part_Material;
struct Part_MaterialDefaultTypeInternal;
extern Part_MaterialDefaultTypeInternal _Part_Material_default_instance_;
class Part_ProcessStrategy;
struct Part_ProcessStrategyDefaultTypeInternal;
extern Part_ProcessStrategyDefaultTypeInternal _Part_ProcessStrategy_default_instance_;
class Part_ProcessStrategy_ProprietaryParam;
struct Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal;
extern Part_ProcessStrategy_ProprietaryParamDefaultTypeInternal _Part_ProcessStrategy_ProprietaryParam_default_instance_;
class PowerGradientParams;
struct PowerGradientParamsDefaultTypeInternal;
extern PowerGradientParamsDefaultTypeInternal _PowerGradientParams_default_instance_;
class VectorBlock;
struct VectorBlockDefaultTypeInternal;
extern VectorBlockDefaultTypeInternal _VectorBlock_default_instance_;
class VectorBlock_Arcs;
struct VectorBlock_ArcsDefaultTypeInternal;
extern VectorBlock_ArcsDefaultTypeInternal _VectorBlock_Arcs_default_instance_;
class VectorBlock_Arcs3D;
struct VectorBlock_Arcs3DDefaultTypeInternal;
extern VectorBlock_Arcs3DDefaultTypeInternal _VectorBlock_Arcs3D_default_instance_;
class VectorBlock_Ellipses;
struct VectorBlock_EllipsesDefaultTypeInternal;
extern VectorBlock_EllipsesDefaultTypeInternal _VectorBlock_Ellipses_default_instance_;
class VectorBlock_ExposurePause;
struct VectorBlock_ExposurePauseDefaultTypeInternal;
extern VectorBlock_ExposurePauseDefaultTypeInternal _VectorBlock_ExposurePause_default_instance_;
class VectorBlock_Hatches;
struct VectorBlock_HatchesDefaultTypeInternal;
extern VectorBlock_HatchesDefaultTypeInternal _VectorBlock_Hatches_default_instance_;
class VectorBlock_Hatches3D;
struct VectorBlock_Hatches3DDefaultTypeInternal;
extern VectorBlock_Hatches3DDefaultTypeInternal _VectorBlock_Hatches3D_default_instance_;
class VectorBlock_HatchesParaAdapt;
struct VectorBlock_HatchesParaAdaptDefaultTypeInternal;
extern VectorBlock_HatchesParaAdaptDefaultTypeInternal _VectorBlock_HatchesParaAdapt_default_instance_;
class VectorBlock_LPBFMetadata;
struct VectorBlock_LPBFMetadataDefaultTypeInternal;
extern VectorBlock_LPBFMetadataDefaultTypeInternal _VectorBlock_LPBFMetadata_default_instance_;
class VectorBlock_LineSequence;
struct VectorBlock_LineSequenceDefaultTypeInternal;
extern VectorBlock_LineSequenceDefaultTypeInternal _VectorBlock_LineSequence_default_instance_;
class VectorBlock_LineSequence3D;
struct VectorBlock_LineSequence3DDefaultTypeInternal;
extern VectorBlock_LineSequence3DDefaultTypeInternal _VectorBlock_LineSequence3D_default_instance_;
class VectorBlock_LineSequenceParaAdapt;
struct VectorBlock_LineSequenceParaAdaptDefaultTypeInternal;
extern VectorBlock_LineSequenceParaAdaptDefaultTypeInternal _VectorBlock_LineSequenceParaAdapt_default_instance_;
class VectorBlock_MicroStructuringMetadata;
struct VectorBlock_MicroStructuringMetadataDefaultTypeInternal;
extern VectorBlock_MicroStructuringMetadataDefaultTypeInternal _VectorBlock_MicroStructuringMetadata_default_instance_;
class VectorBlock_PointSequence;
struct VectorBlock_PointSequenceDefaultTypeInternal;
extern VectorBlock_PointSequenceDefaultTypeInternal _VectorBlock_PointSequence_default_instance_;
class VectorBlock_PointSequence3D;
struct VectorBlock_PointSequence3DDefaultTypeInternal;
extern VectorBlock_PointSequence3DDefaultTypeInternal _VectorBlock_PointSequence3D_default_instance_;
class VectorBlock_PolishingMetadata;
struct VectorBlock_PolishingMetadataDefaultTypeInternal;
extern VectorBlock_PolishingMetadataDefaultTypeInternal _VectorBlock_PolishingMetadata_default_instance_;
class VectorBlock_VectorBlockMetaData;
struct VectorBlock_VectorBlockMetaDataDefaultTypeInternal;
extern VectorBlock_VectorBlockMetaDataDefaultTypeInternal _VectorBlock_VectorBlockMetaData_default_instance_;
class WorkPlane;
struct WorkPlaneDefaultTypeInternal;
extern WorkPlaneDefaultTypeInternal _WorkPlane_default_instance_;
class WorkPlane_Patch;
struct WorkPlane_PatchDefaultTypeInternal;
extern WorkPlane_PatchDefaultTypeInternal _WorkPlane_Patch_default_instance_;
class WorkPlane_WorkPlaneMetaData;
struct WorkPlane_WorkPlaneMetaDataDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaDataDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_default_instance_;
class WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse;
struct WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUseDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_;
class WorkPlane_WorkPlaneMetaData_closedContour;
struct WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal;
extern WorkPlane_WorkPlaneMetaData_closedContourDefaultTypeInternal _WorkPlane_WorkPlaneMetaData_closedContour_default_instance_;
}  // namespace open_vector_format
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace open_vector_format {
enum MarkingParams_MarkingMode : int {
  MarkingParams_MarkingMode_NO_SKY = 0,
  MarkingParams_MarkingMode_SKY_1 = 1,
  MarkingParams_MarkingMode_SKY_2 = 2,
  MarkingParams_MarkingMode_SKY_3 = 3,
  MarkingParams_MarkingMode_MarkingParams_MarkingMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarkingParams_MarkingMode_MarkingParams_MarkingMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarkingParams_MarkingMode_IsValid(int value);
constexpr MarkingParams_MarkingMode MarkingParams_MarkingMode_MarkingMode_MIN = static_cast<MarkingParams_MarkingMode>(0);
constexpr MarkingParams_MarkingMode MarkingParams_MarkingMode_MarkingMode_MAX = static_cast<MarkingParams_MarkingMode>(3);
constexpr int MarkingParams_MarkingMode_MarkingMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MarkingParams_MarkingMode_descriptor();
template <typename T>
const std::string& MarkingParams_MarkingMode_Name(T value) {
  static_assert(std::is_same<T, MarkingParams_MarkingMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MarkingMode_Name().");
  return MarkingParams_MarkingMode_Name(static_cast<MarkingParams_MarkingMode>(value));
}
template <>
inline const std::string& MarkingParams_MarkingMode_Name(MarkingParams_MarkingMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MarkingParams_MarkingMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MarkingParams_MarkingMode_Parse(absl::string_view name, MarkingParams_MarkingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarkingParams_MarkingMode>(
      MarkingParams_MarkingMode_descriptor(), name, value);
}
enum MarkingParams_WobbleMode : int {
  MarkingParams_WobbleMode_NO_WOBBLE = 0,
  MarkingParams_WobbleMode_ELLIPSE_WOBBLE = 1,
  MarkingParams_WobbleMode_STANDING_EIGHT_WOBBLE = 2,
  MarkingParams_WobbleMode_LYING_EIGHT_WOBBLE = 3,
  MarkingParams_WobbleMode_MarkingParams_WobbleMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarkingParams_WobbleMode_MarkingParams_WobbleMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarkingParams_WobbleMode_IsValid(int value);
constexpr MarkingParams_WobbleMode MarkingParams_WobbleMode_WobbleMode_MIN = static_cast<MarkingParams_WobbleMode>(0);
constexpr MarkingParams_WobbleMode MarkingParams_WobbleMode_WobbleMode_MAX = static_cast<MarkingParams_WobbleMode>(3);
constexpr int MarkingParams_WobbleMode_WobbleMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MarkingParams_WobbleMode_descriptor();
template <typename T>
const std::string& MarkingParams_WobbleMode_Name(T value) {
  static_assert(std::is_same<T, MarkingParams_WobbleMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WobbleMode_Name().");
  return MarkingParams_WobbleMode_Name(static_cast<MarkingParams_WobbleMode>(value));
}
template <>
inline const std::string& MarkingParams_WobbleMode_Name(MarkingParams_WobbleMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MarkingParams_WobbleMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MarkingParams_WobbleMode_Parse(absl::string_view name, MarkingParams_WobbleMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarkingParams_WobbleMode>(
      MarkingParams_WobbleMode_descriptor(), name, value);
}
enum Part_ProcessStrategy_HatchingPattern : int {
  Part_ProcessStrategy_HatchingPattern_UNIDIRECTIONAL = 0,
  Part_ProcessStrategy_HatchingPattern_BIDIRECTIONAL = 1,
  Part_ProcessStrategy_HatchingPattern_CHECKERBOARD = 2,
  Part_ProcessStrategy_HatchingPattern_STRIPES = 3,
  Part_ProcessStrategy_HatchingPattern_HEXAGON = 4,
  Part_ProcessStrategy_HatchingPattern_Part_ProcessStrategy_HatchingPattern_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Part_ProcessStrategy_HatchingPattern_Part_ProcessStrategy_HatchingPattern_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Part_ProcessStrategy_HatchingPattern_IsValid(int value);
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy_HatchingPattern_HatchingPattern_MIN = static_cast<Part_ProcessStrategy_HatchingPattern>(0);
constexpr Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy_HatchingPattern_HatchingPattern_MAX = static_cast<Part_ProcessStrategy_HatchingPattern>(4);
constexpr int Part_ProcessStrategy_HatchingPattern_HatchingPattern_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
Part_ProcessStrategy_HatchingPattern_descriptor();
template <typename T>
const std::string& Part_ProcessStrategy_HatchingPattern_Name(T value) {
  static_assert(std::is_same<T, Part_ProcessStrategy_HatchingPattern>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to HatchingPattern_Name().");
  return Part_ProcessStrategy_HatchingPattern_Name(static_cast<Part_ProcessStrategy_HatchingPattern>(value));
}
template <>
inline const std::string& Part_ProcessStrategy_HatchingPattern_Name(Part_ProcessStrategy_HatchingPattern value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Part_ProcessStrategy_HatchingPattern_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Part_ProcessStrategy_HatchingPattern_Parse(absl::string_view name, Part_ProcessStrategy_HatchingPattern* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Part_ProcessStrategy_HatchingPattern>(
      Part_ProcessStrategy_HatchingPattern_descriptor(), name, value);
}
enum WorkPlane_WorkPlaneMetaData_closedContour_ContourType : int {
  WorkPlane_WorkPlaneMetaData_closedContour_ContourType_PART_OUTER_CONTOUR = 0,
  WorkPlane_WorkPlaneMetaData_closedContour_ContourType_PART_INNER_CONTOUR = 1,
  WorkPlane_WorkPlaneMetaData_closedContour_ContourType_OFFSET_CONTOUR = 2,
  WorkPlane_WorkPlaneMetaData_closedContour_ContourType_WorkPlane_WorkPlaneMetaData_closedContour_ContourType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WorkPlane_WorkPlaneMetaData_closedContour_ContourType_WorkPlane_WorkPlaneMetaData_closedContour_ContourType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WorkPlane_WorkPlaneMetaData_closedContour_ContourType_IsValid(int value);
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_MIN = static_cast<WorkPlane_WorkPlaneMetaData_closedContour_ContourType>(0);
constexpr WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_MAX = static_cast<WorkPlane_WorkPlaneMetaData_closedContour_ContourType>(2);
constexpr int WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor();
template <typename T>
const std::string& WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Name(T value) {
  static_assert(std::is_same<T, WorkPlane_WorkPlaneMetaData_closedContour_ContourType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ContourType_Name().");
  return WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Name(static_cast<WorkPlane_WorkPlaneMetaData_closedContour_ContourType>(value));
}
template <>
inline const std::string& WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Name(WorkPlane_WorkPlaneMetaData_closedContour_ContourType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Parse(absl::string_view name, WorkPlane_WorkPlaneMetaData_closedContour_ContourType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkPlane_WorkPlaneMetaData_closedContour_ContourType>(
      WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor(), name, value);
}
enum VectorBlock_LPBFMetadata_SkinType : int {
  VectorBlock_LPBFMetadata_SkinType_IN_SKIN = 0,
  VectorBlock_LPBFMetadata_SkinType_DOWN_SKIN = 1,
  VectorBlock_LPBFMetadata_SkinType_UP_SKIN = 2,
  VectorBlock_LPBFMetadata_SkinType_VectorBlock_LPBFMetadata_SkinType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBlock_LPBFMetadata_SkinType_VectorBlock_LPBFMetadata_SkinType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBlock_LPBFMetadata_SkinType_IsValid(int value);
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata_SkinType_SkinType_MIN = static_cast<VectorBlock_LPBFMetadata_SkinType>(0);
constexpr VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata_SkinType_SkinType_MAX = static_cast<VectorBlock_LPBFMetadata_SkinType>(2);
constexpr int VectorBlock_LPBFMetadata_SkinType_SkinType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBlock_LPBFMetadata_SkinType_descriptor();
template <typename T>
const std::string& VectorBlock_LPBFMetadata_SkinType_Name(T value) {
  static_assert(std::is_same<T, VectorBlock_LPBFMetadata_SkinType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SkinType_Name().");
  return VectorBlock_LPBFMetadata_SkinType_Name(static_cast<VectorBlock_LPBFMetadata_SkinType>(value));
}
template <>
inline const std::string& VectorBlock_LPBFMetadata_SkinType_Name(VectorBlock_LPBFMetadata_SkinType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBlock_LPBFMetadata_SkinType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VectorBlock_LPBFMetadata_SkinType_Parse(absl::string_view name, VectorBlock_LPBFMetadata_SkinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBlock_LPBFMetadata_SkinType>(
      VectorBlock_LPBFMetadata_SkinType_descriptor(), name, value);
}
enum VectorBlock_LPBFMetadata_SkinCoreStrategyArea : int {
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_OUTER_HULL = 0,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_CORE = 1,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INBETWEEN_HULL = 2,
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBlock_LPBFMetadata_SkinCoreStrategyArea_VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(int value);
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MIN = static_cast<VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(0);
constexpr VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MAX = static_cast<VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(2);
constexpr int VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
template <typename T>
const std::string& VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(T value) {
  static_assert(std::is_same<T, VectorBlock_LPBFMetadata_SkinCoreStrategyArea>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SkinCoreStrategyArea_Name().");
  return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(static_cast<VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(value));
}
template <>
inline const std::string& VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(VectorBlock_LPBFMetadata_SkinCoreStrategyArea value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Parse(absl::string_view name, VectorBlock_LPBFMetadata_SkinCoreStrategyArea* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(
      VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor(), name, value);
}
enum VectorBlock_LineSequenceParaAdapt_AdaptedParameter : int {
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_POWER_IN_W = 0,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_FOCUS_SHIFT_IN_MM = 1,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_LENGTH_IN_US = 2,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_REPITION_RATE_IN_HZ = 3,
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_VectorBlock_LineSequenceParaAdapt_AdaptedParameter_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBlock_LineSequenceParaAdapt_AdaptedParameter_VectorBlock_LineSequenceParaAdapt_AdaptedParameter_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(int value);
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MIN = static_cast<VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(0);
constexpr VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MAX = static_cast<VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(3);
constexpr int VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
template <typename T>
const std::string& VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(T value) {
  static_assert(std::is_same<T, VectorBlock_LineSequenceParaAdapt_AdaptedParameter>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AdaptedParameter_Name().");
  return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(static_cast<VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(value));
}
template <>
inline const std::string& VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(VectorBlock_LineSequenceParaAdapt_AdaptedParameter value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Parse(absl::string_view name, VectorBlock_LineSequenceParaAdapt_AdaptedParameter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(
      VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor(), name, value);
}
enum VectorBlock_PartArea : int {
  VectorBlock_PartArea_VOLUME = 0,
  VectorBlock_PartArea_CONTOUR = 1,
  VectorBlock_PartArea_TRANSITION_CONTOUR = 2,
  VectorBlock_PartArea_VectorBlock_PartArea_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBlock_PartArea_VectorBlock_PartArea_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBlock_PartArea_IsValid(int value);
constexpr VectorBlock_PartArea VectorBlock_PartArea_PartArea_MIN = static_cast<VectorBlock_PartArea>(0);
constexpr VectorBlock_PartArea VectorBlock_PartArea_PartArea_MAX = static_cast<VectorBlock_PartArea>(2);
constexpr int VectorBlock_PartArea_PartArea_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBlock_PartArea_descriptor();
template <typename T>
const std::string& VectorBlock_PartArea_Name(T value) {
  static_assert(std::is_same<T, VectorBlock_PartArea>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PartArea_Name().");
  return VectorBlock_PartArea_Name(static_cast<VectorBlock_PartArea>(value));
}
template <>
inline const std::string& VectorBlock_PartArea_Name(VectorBlock_PartArea value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBlock_PartArea_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VectorBlock_PartArea_Parse(absl::string_view name, VectorBlock_PartArea* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBlock_PartArea>(
      VectorBlock_PartArea_descriptor(), name, value);
}
enum VectorBlock_StructureType : int {
  VectorBlock_StructureType_PART = 0,
  VectorBlock_StructureType_SUPPORT = 1,
  VectorBlock_StructureType_WIRESTRUCTURE = 2,
  VectorBlock_StructureType_POINTS = 3,
  VectorBlock_StructureType_VectorBlock_StructureType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBlock_StructureType_VectorBlock_StructureType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBlock_StructureType_IsValid(int value);
constexpr VectorBlock_StructureType VectorBlock_StructureType_StructureType_MIN = static_cast<VectorBlock_StructureType>(0);
constexpr VectorBlock_StructureType VectorBlock_StructureType_StructureType_MAX = static_cast<VectorBlock_StructureType>(3);
constexpr int VectorBlock_StructureType_StructureType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBlock_StructureType_descriptor();
template <typename T>
const std::string& VectorBlock_StructureType_Name(T value) {
  static_assert(std::is_same<T, VectorBlock_StructureType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StructureType_Name().");
  return VectorBlock_StructureType_Name(static_cast<VectorBlock_StructureType>(value));
}
template <>
inline const std::string& VectorBlock_StructureType_Name(VectorBlock_StructureType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBlock_StructureType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool VectorBlock_StructureType_Parse(absl::string_view name, VectorBlock_StructureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBlock_StructureType>(
      VectorBlock_StructureType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Job_MarkingParamsMapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<Job_MarkingParamsMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::MarkingParams,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<Job_MarkingParamsMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::MarkingParams,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Job_MarkingParamsMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Job_MarkingParamsMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Job_MarkingParamsMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Job_MarkingParamsMapEntry_DoNotUse& other);
  static const Job_MarkingParamsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Job_MarkingParamsMapEntry_DoNotUse*>(&_Job_MarkingParamsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Job_PartsMapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<Job_PartsMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::Part,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<Job_PartsMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::Part,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Job_PartsMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Job_PartsMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Job_PartsMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Job_PartsMapEntry_DoNotUse& other);
  static const Job_PartsMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Job_PartsMapEntry_DoNotUse*>(&_Job_PartsMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Job_JobMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Job.JobMetaData) */ {
 public:
  inline Job_JobMetaData() : Job_JobMetaData(nullptr) {}
  ~Job_JobMetaData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Job_JobMetaData(::google::protobuf::internal::ConstantInitialized);

  Job_JobMetaData(const Job_JobMetaData& from);
  Job_JobMetaData(Job_JobMetaData&& from) noexcept
    : Job_JobMetaData() {
    *this = ::std::move(from);
  }

  inline Job_JobMetaData& operator=(const Job_JobMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job_JobMetaData& operator=(Job_JobMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Job_JobMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job_JobMetaData* internal_default_instance() {
    return reinterpret_cast<const Job_JobMetaData*>(
               &_Job_JobMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Job_JobMetaData& a, Job_JobMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(Job_JobMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job_JobMetaData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Job_JobMetaData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Job_JobMetaData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Job_JobMetaData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Job_JobMetaData& from) {
    Job_JobMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job_JobMetaData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Job.JobMetaData";
  }
  protected:
  explicit Job_JobMetaData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobNameFieldNumber = 3,
    kAuthorFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kBoundsFieldNumber = 6,
    kJobCreationTimeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string job_name = 3;
  void clear_job_name() ;
  const std::string& job_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_job_name(Arg_&& arg, Args_... args);
  std::string* mutable_job_name();
  PROTOBUF_NODISCARD std::string* release_job_name();
  void set_allocated_job_name(std::string* ptr);

  private:
  const std::string& _internal_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_job_name(
      const std::string& value);
  std::string* _internal_mutable_job_name();

  public:
  // string author = 4;
  void clear_author() ;
  const std::string& author() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_author(Arg_&& arg, Args_... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* ptr);

  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(
      const std::string& value);
  std::string* _internal_mutable_author();

  public:
  // string description = 5;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .open_vector_format.AxisAlignedBox2D bounds = 6;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::open_vector_format::AxisAlignedBox2D& bounds() const;
  PROTOBUF_NODISCARD ::open_vector_format::AxisAlignedBox2D* release_bounds();
  ::open_vector_format::AxisAlignedBox2D* mutable_bounds();
  void set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  void unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  ::open_vector_format::AxisAlignedBox2D* unsafe_arena_release_bounds();

  private:
  const ::open_vector_format::AxisAlignedBox2D& _internal_bounds() const;
  ::open_vector_format::AxisAlignedBox2D* _internal_mutable_bounds();

  public:
  // int64 job_creation_time = 1;
  void clear_job_creation_time() ;
  ::int64_t job_creation_time() const;
  void set_job_creation_time(::int64_t value);

  private:
  ::int64_t _internal_job_creation_time() const;
  void _internal_set_job_creation_time(::int64_t value);

  public:
  // uint64 version = 2;
  void clear_version() ;
  ::uint64_t version() const;
  void set_version(::uint64_t value);

  private:
  ::uint64_t _internal_version() const;
  void _internal_set_version(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Job.JobMetaData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 68, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr job_name_;
    ::google::protobuf::internal::ArenaStringPtr author_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::open_vector_format::AxisAlignedBox2D* bounds_;
    ::int64_t job_creation_time_;
    ::uint64_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Job final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Job) */ {
 public:
  inline Job() : Job(nullptr) {}
  ~Job() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Job(::google::protobuf::internal::ConstantInitialized);

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Job& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Job* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Job& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Job& from) {
    Job::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Job";
  }
  protected:
  explicit Job(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Job_JobMetaData JobMetaData;

  // accessors -------------------------------------------------------

  enum : int {
    kWorkPlanesFieldNumber = 1,
    kMarkingParamsMapFieldNumber = 3,
    kPartsMapFieldNumber = 4,
    kJobMetaDataFieldNumber = 2,
    kJobParametersFieldNumber = 5,
    kNumWorkPlanesFieldNumber = 6,
  };
  // repeated .open_vector_format.WorkPlane work_planes = 1;
  int work_planes_size() const;
  private:
  int _internal_work_planes_size() const;

  public:
  void clear_work_planes() ;
  ::open_vector_format::WorkPlane* mutable_work_planes(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane >*
      mutable_work_planes();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane>& _internal_work_planes() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane>* _internal_mutable_work_planes();
  public:
  const ::open_vector_format::WorkPlane& work_planes(int index) const;
  ::open_vector_format::WorkPlane* add_work_planes();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane >&
      work_planes() const;
  // map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
  int marking_params_map_size() const;
  private:
  int _internal_marking_params_map_size() const;

  public:
  void clear_marking_params_map() ;
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>& marking_params_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>* mutable_marking_params_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>& _internal_marking_params_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>* _internal_mutable_marking_params_map();

  public:
  // map<int32, .open_vector_format.Part> parts_map = 4;
  int parts_map_size() const;
  private:
  int _internal_parts_map_size() const;

  public:
  void clear_parts_map() ;
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>& parts_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>* mutable_parts_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>& _internal_parts_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>* _internal_mutable_parts_map();

  public:
  // .open_vector_format.Job.JobMetaData job_meta_data = 2;
  bool has_job_meta_data() const;
  void clear_job_meta_data() ;
  const ::open_vector_format::Job_JobMetaData& job_meta_data() const;
  PROTOBUF_NODISCARD ::open_vector_format::Job_JobMetaData* release_job_meta_data();
  ::open_vector_format::Job_JobMetaData* mutable_job_meta_data();
  void set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* value);
  void unsafe_arena_set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* value);
  ::open_vector_format::Job_JobMetaData* unsafe_arena_release_job_meta_data();

  private:
  const ::open_vector_format::Job_JobMetaData& _internal_job_meta_data() const;
  ::open_vector_format::Job_JobMetaData* _internal_mutable_job_meta_data();

  public:
  // .open_vector_format.JobParameters job_parameters = 5;
  bool has_job_parameters() const;
  void clear_job_parameters() ;
  const ::open_vector_format::JobParameters& job_parameters() const;
  PROTOBUF_NODISCARD ::open_vector_format::JobParameters* release_job_parameters();
  ::open_vector_format::JobParameters* mutable_job_parameters();
  void set_allocated_job_parameters(::open_vector_format::JobParameters* value);
  void unsafe_arena_set_allocated_job_parameters(::open_vector_format::JobParameters* value);
  ::open_vector_format::JobParameters* unsafe_arena_release_job_parameters();

  private:
  const ::open_vector_format::JobParameters& _internal_job_parameters() const;
  ::open_vector_format::JobParameters* _internal_mutable_job_parameters();

  public:
  // int32 num_work_planes = 6;
  void clear_num_work_planes() ;
  ::int32_t num_work_planes() const;
  void set_num_work_planes(::int32_t value);

  private:
  ::int32_t _internal_num_work_planes() const;
  void _internal_set_num_work_planes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Job)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 7, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane > work_planes_;
    ::google::protobuf::internal::MapField<Job_MarkingParamsMapEntry_DoNotUse, ::int32_t, ::open_vector_format::MarkingParams,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        marking_params_map_;
    ::google::protobuf::internal::MapField<Job_PartsMapEntry_DoNotUse, ::int32_t, ::open_vector_format::Part,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        parts_map_;
    ::open_vector_format::Job_JobMetaData* job_meta_data_;
    ::open_vector_format::JobParameters* job_parameters_;
    ::int32_t num_work_planes_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class JobParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.JobParameters) */ {
 public:
  inline JobParameters() : JobParameters(nullptr) {}
  ~JobParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JobParameters(::google::protobuf::internal::ConstantInitialized);

  JobParameters(const JobParameters& from);
  JobParameters(JobParameters&& from) noexcept
    : JobParameters() {
    *this = ::std::move(from);
  }

  inline JobParameters& operator=(const JobParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobParameters& operator=(JobParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JobParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const JobParameters* internal_default_instance() {
    return reinterpret_cast<const JobParameters*>(
               &_JobParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JobParameters& a, JobParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(JobParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JobParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JobParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JobParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JobParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JobParameters& from) {
    JobParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.JobParameters";
  }
  protected:
  explicit JobParameters(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShieldingGasDirectionsFieldNumber = 2,
    kMaterialFeedDirectionsFieldNumber = 3,
    kPreheatingTemperaturInDgCFieldNumber = 1,
  };
  // repeated double shielding_gas_directions = 2;
  int shielding_gas_directions_size() const;
  private:
  int _internal_shielding_gas_directions_size() const;

  public:
  void clear_shielding_gas_directions() ;
  double shielding_gas_directions(int index) const;
  void set_shielding_gas_directions(int index, double value);
  void add_shielding_gas_directions(double value);
  const ::google::protobuf::RepeatedField<double>& shielding_gas_directions() const;
  ::google::protobuf::RepeatedField<double>* mutable_shielding_gas_directions();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_shielding_gas_directions() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_shielding_gas_directions();

  public:
  // repeated double material_feed_directions = 3;
  int material_feed_directions_size() const;
  private:
  int _internal_material_feed_directions_size() const;

  public:
  void clear_material_feed_directions() ;
  double material_feed_directions(int index) const;
  void set_material_feed_directions(int index, double value);
  void add_material_feed_directions(double value);
  const ::google::protobuf::RepeatedField<double>& material_feed_directions() const;
  ::google::protobuf::RepeatedField<double>* mutable_material_feed_directions();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_material_feed_directions() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_material_feed_directions();

  public:
  // double preheating_temperatur_in_dg_c = 1;
  void clear_preheating_temperatur_in_dg_c() ;
  double preheating_temperatur_in_dg_c() const;
  void set_preheating_temperatur_in_dg_c(double value);

  private:
  double _internal_preheating_temperatur_in_dg_c() const;
  void _internal_set_preheating_temperatur_in_dg_c(double value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.JobParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<double> shielding_gas_directions_;
    ::google::protobuf::RepeatedField<double> material_feed_directions_;
    double preheating_temperatur_in_dg_c_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class MarkingParams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.MarkingParams) */ {
 public:
  inline MarkingParams() : MarkingParams(nullptr) {}
  ~MarkingParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarkingParams(::google::protobuf::internal::ConstantInitialized);

  MarkingParams(const MarkingParams& from);
  MarkingParams(MarkingParams&& from) noexcept
    : MarkingParams() {
    *this = ::std::move(from);
  }

  inline MarkingParams& operator=(const MarkingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarkingParams& operator=(MarkingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarkingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarkingParams* internal_default_instance() {
    return reinterpret_cast<const MarkingParams*>(
               &_MarkingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarkingParams& a, MarkingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MarkingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarkingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarkingParams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarkingParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarkingParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MarkingParams& from) {
    MarkingParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkingParams* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.MarkingParams";
  }
  protected:
  explicit MarkingParams(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MarkingMode = MarkingParams_MarkingMode;
  static constexpr MarkingMode NO_SKY = MarkingParams_MarkingMode_NO_SKY;
  static constexpr MarkingMode SKY_1 = MarkingParams_MarkingMode_SKY_1;
  static constexpr MarkingMode SKY_2 = MarkingParams_MarkingMode_SKY_2;
  static constexpr MarkingMode SKY_3 = MarkingParams_MarkingMode_SKY_3;
  static inline bool MarkingMode_IsValid(int value) {
    return MarkingParams_MarkingMode_IsValid(value);
  }
  static constexpr MarkingMode MarkingMode_MIN = MarkingParams_MarkingMode_MarkingMode_MIN;
  static constexpr MarkingMode MarkingMode_MAX = MarkingParams_MarkingMode_MarkingMode_MAX;
  static constexpr int MarkingMode_ARRAYSIZE = MarkingParams_MarkingMode_MarkingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MarkingMode_descriptor() {
    return MarkingParams_MarkingMode_descriptor();
  }
  template <typename T>
  static inline const std::string& MarkingMode_Name(T value) {
    return MarkingParams_MarkingMode_Name(value);
  }
  static inline bool MarkingMode_Parse(absl::string_view name, MarkingMode* value) {
    return MarkingParams_MarkingMode_Parse(name, value);
  }

  using WobbleMode = MarkingParams_WobbleMode;
  static constexpr WobbleMode NO_WOBBLE = MarkingParams_WobbleMode_NO_WOBBLE;
  static constexpr WobbleMode ELLIPSE_WOBBLE = MarkingParams_WobbleMode_ELLIPSE_WOBBLE;
  static constexpr WobbleMode STANDING_EIGHT_WOBBLE = MarkingParams_WobbleMode_STANDING_EIGHT_WOBBLE;
  static constexpr WobbleMode LYING_EIGHT_WOBBLE = MarkingParams_WobbleMode_LYING_EIGHT_WOBBLE;
  static inline bool WobbleMode_IsValid(int value) {
    return MarkingParams_WobbleMode_IsValid(value);
  }
  static constexpr WobbleMode WobbleMode_MIN = MarkingParams_WobbleMode_WobbleMode_MIN;
  static constexpr WobbleMode WobbleMode_MAX = MarkingParams_WobbleMode_WobbleMode_MAX;
  static constexpr int WobbleMode_ARRAYSIZE = MarkingParams_WobbleMode_WobbleMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* WobbleMode_descriptor() {
    return MarkingParams_WobbleMode_descriptor();
  }
  template <typename T>
  static inline const std::string& WobbleMode_Name(T value) {
    return MarkingParams_WobbleMode_Name(value);
  }
  static inline bool WobbleMode_Parse(absl::string_view name, WobbleMode* value) {
    return MarkingParams_WobbleMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 26,
    kPowerGradientFieldNumber = 25,
    kLaserPowerInWFieldNumber = 1,
    kLaserSpeedInMmPerSFieldNumber = 2,
    kLaserFocusShiftInMmFieldNumber = 3,
    kPointExposureTimeInUsFieldNumber = 4,
    kJumpSpeedInMmSFieldNumber = 5,
    kPointExposureRepetitionsFieldNumber = 6,
    kRepetitionRateInHzFieldNumber = 7,
    kLaserPulsesPerBurstFieldNumber = 8,
    kPulseDurationInFemtosecondsFieldNumber = 9,
    kMarkingModeFieldNumber = 10,
    kJumpDelayInUsFieldNumber = 11,
    kLaserOffDelayInUsFieldNumber = 12,
    kLaserOnDelayInUsFieldNumber = 13,
    kMarkDelayInUsFieldNumber = 14,
    kPolygonDelayInUsFieldNumber = 15,
    kTimeLagInUsFieldNumber = 16,
    kLaserOnShiftInUsFieldNumber = 17,
    kLimitFieldNumber = 18,
    kNPrevInUsFieldNumber = 19,
    kNPostInUsFieldNumber = 20,
    kWobFrequencyInHzFieldNumber = 21,
    kWobAmpLongInMmFieldNumber = 22,
    kWobAmpTransInMmFieldNumber = 23,
    kWobbleModeFieldNumber = 24,
  };
  // string name = 26;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .open_vector_format.PowerGradientParams powerGradient = 25;
  bool has_powergradient() const;
  void clear_powergradient() ;
  const ::open_vector_format::PowerGradientParams& powergradient() const;
  PROTOBUF_NODISCARD ::open_vector_format::PowerGradientParams* release_powergradient();
  ::open_vector_format::PowerGradientParams* mutable_powergradient();
  void set_allocated_powergradient(::open_vector_format::PowerGradientParams* value);
  void unsafe_arena_set_allocated_powergradient(::open_vector_format::PowerGradientParams* value);
  ::open_vector_format::PowerGradientParams* unsafe_arena_release_powergradient();

  private:
  const ::open_vector_format::PowerGradientParams& _internal_powergradient() const;
  ::open_vector_format::PowerGradientParams* _internal_mutable_powergradient();

  public:
  // float laser_power_in_w = 1;
  void clear_laser_power_in_w() ;
  float laser_power_in_w() const;
  void set_laser_power_in_w(float value);

  private:
  float _internal_laser_power_in_w() const;
  void _internal_set_laser_power_in_w(float value);

  public:
  // float laser_speed_in_mm_per_s = 2;
  void clear_laser_speed_in_mm_per_s() ;
  float laser_speed_in_mm_per_s() const;
  void set_laser_speed_in_mm_per_s(float value);

  private:
  float _internal_laser_speed_in_mm_per_s() const;
  void _internal_set_laser_speed_in_mm_per_s(float value);

  public:
  // float laser_focus_shift_in_mm = 3;
  void clear_laser_focus_shift_in_mm() ;
  float laser_focus_shift_in_mm() const;
  void set_laser_focus_shift_in_mm(float value);

  private:
  float _internal_laser_focus_shift_in_mm() const;
  void _internal_set_laser_focus_shift_in_mm(float value);

  public:
  // float point_exposure_time_in_us = 4;
  void clear_point_exposure_time_in_us() ;
  float point_exposure_time_in_us() const;
  void set_point_exposure_time_in_us(float value);

  private:
  float _internal_point_exposure_time_in_us() const;
  void _internal_set_point_exposure_time_in_us(float value);

  public:
  // float jump_speed_in_mm_s = 5;
  void clear_jump_speed_in_mm_s() ;
  float jump_speed_in_mm_s() const;
  void set_jump_speed_in_mm_s(float value);

  private:
  float _internal_jump_speed_in_mm_s() const;
  void _internal_set_jump_speed_in_mm_s(float value);

  public:
  // float point_exposure_repetitions = 6;
  void clear_point_exposure_repetitions() ;
  float point_exposure_repetitions() const;
  void set_point_exposure_repetitions(float value);

  private:
  float _internal_point_exposure_repetitions() const;
  void _internal_set_point_exposure_repetitions(float value);

  public:
  // uint64 repetition_rate_in_hz = 7;
  void clear_repetition_rate_in_hz() ;
  ::uint64_t repetition_rate_in_hz() const;
  void set_repetition_rate_in_hz(::uint64_t value);

  private:
  ::uint64_t _internal_repetition_rate_in_hz() const;
  void _internal_set_repetition_rate_in_hz(::uint64_t value);

  public:
  // uint64 laser_pulses_per_burst = 8;
  void clear_laser_pulses_per_burst() ;
  ::uint64_t laser_pulses_per_burst() const;
  void set_laser_pulses_per_burst(::uint64_t value);

  private:
  ::uint64_t _internal_laser_pulses_per_burst() const;
  void _internal_set_laser_pulses_per_burst(::uint64_t value);

  public:
  // uint64 pulseDurationInFemtoseconds = 9;
  void clear_pulsedurationinfemtoseconds() ;
  ::uint64_t pulsedurationinfemtoseconds() const;
  void set_pulsedurationinfemtoseconds(::uint64_t value);

  private:
  ::uint64_t _internal_pulsedurationinfemtoseconds() const;
  void _internal_set_pulsedurationinfemtoseconds(::uint64_t value);

  public:
  // .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
  void clear_marking_mode() ;
  ::open_vector_format::MarkingParams_MarkingMode marking_mode() const;
  void set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value);

  private:
  ::open_vector_format::MarkingParams_MarkingMode _internal_marking_mode() const;
  void _internal_set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value);

  public:
  // float jump_delay_in_us = 11;
  void clear_jump_delay_in_us() ;
  float jump_delay_in_us() const;
  void set_jump_delay_in_us(float value);

  private:
  float _internal_jump_delay_in_us() const;
  void _internal_set_jump_delay_in_us(float value);

  public:
  // float laser_off_delay_in_us = 12;
  void clear_laser_off_delay_in_us() ;
  float laser_off_delay_in_us() const;
  void set_laser_off_delay_in_us(float value);

  private:
  float _internal_laser_off_delay_in_us() const;
  void _internal_set_laser_off_delay_in_us(float value);

  public:
  // float laser_on_delay_in_us = 13;
  void clear_laser_on_delay_in_us() ;
  float laser_on_delay_in_us() const;
  void set_laser_on_delay_in_us(float value);

  private:
  float _internal_laser_on_delay_in_us() const;
  void _internal_set_laser_on_delay_in_us(float value);

  public:
  // float mark_delay_in_us = 14;
  void clear_mark_delay_in_us() ;
  float mark_delay_in_us() const;
  void set_mark_delay_in_us(float value);

  private:
  float _internal_mark_delay_in_us() const;
  void _internal_set_mark_delay_in_us(float value);

  public:
  // float polygon_delay_in_us = 15;
  void clear_polygon_delay_in_us() ;
  float polygon_delay_in_us() const;
  void set_polygon_delay_in_us(float value);

  private:
  float _internal_polygon_delay_in_us() const;
  void _internal_set_polygon_delay_in_us(float value);

  public:
  // float time_lag_in_us = 16;
  void clear_time_lag_in_us() ;
  float time_lag_in_us() const;
  void set_time_lag_in_us(float value);

  private:
  float _internal_time_lag_in_us() const;
  void _internal_set_time_lag_in_us(float value);

  public:
  // float laser_on_shift_in_us = 17;
  void clear_laser_on_shift_in_us() ;
  float laser_on_shift_in_us() const;
  void set_laser_on_shift_in_us(float value);

  private:
  float _internal_laser_on_shift_in_us() const;
  void _internal_set_laser_on_shift_in_us(float value);

  public:
  // float limit = 18;
  void clear_limit() ;
  float limit() const;
  void set_limit(float value);

  private:
  float _internal_limit() const;
  void _internal_set_limit(float value);

  public:
  // float n_prev_in_us = 19;
  void clear_n_prev_in_us() ;
  float n_prev_in_us() const;
  void set_n_prev_in_us(float value);

  private:
  float _internal_n_prev_in_us() const;
  void _internal_set_n_prev_in_us(float value);

  public:
  // float n_post_in_us = 20;
  void clear_n_post_in_us() ;
  float n_post_in_us() const;
  void set_n_post_in_us(float value);

  private:
  float _internal_n_post_in_us() const;
  void _internal_set_n_post_in_us(float value);

  public:
  // float wob_frequency_in_hz = 21;
  void clear_wob_frequency_in_hz() ;
  float wob_frequency_in_hz() const;
  void set_wob_frequency_in_hz(float value);

  private:
  float _internal_wob_frequency_in_hz() const;
  void _internal_set_wob_frequency_in_hz(float value);

  public:
  // float wob_amp_long_in_mm = 22;
  void clear_wob_amp_long_in_mm() ;
  float wob_amp_long_in_mm() const;
  void set_wob_amp_long_in_mm(float value);

  private:
  float _internal_wob_amp_long_in_mm() const;
  void _internal_set_wob_amp_long_in_mm(float value);

  public:
  // float wob_amp_trans_in_mm = 23;
  void clear_wob_amp_trans_in_mm() ;
  float wob_amp_trans_in_mm() const;
  void set_wob_amp_trans_in_mm(float value);

  private:
  float _internal_wob_amp_trans_in_mm() const;
  void _internal_set_wob_amp_trans_in_mm(float value);

  public:
  // .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
  void clear_wobble_mode() ;
  ::open_vector_format::MarkingParams_WobbleMode wobble_mode() const;
  void set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value);

  private:
  ::open_vector_format::MarkingParams_WobbleMode _internal_wobble_mode() const;
  void _internal_set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.MarkingParams)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 26, 1, 69, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::open_vector_format::PowerGradientParams* powergradient_;
    float laser_power_in_w_;
    float laser_speed_in_mm_per_s_;
    float laser_focus_shift_in_mm_;
    float point_exposure_time_in_us_;
    float jump_speed_in_mm_s_;
    float point_exposure_repetitions_;
    ::uint64_t repetition_rate_in_hz_;
    ::uint64_t laser_pulses_per_burst_;
    ::uint64_t pulsedurationinfemtoseconds_;
    int marking_mode_;
    float jump_delay_in_us_;
    float laser_off_delay_in_us_;
    float laser_on_delay_in_us_;
    float mark_delay_in_us_;
    float polygon_delay_in_us_;
    float time_lag_in_us_;
    float laser_on_shift_in_us_;
    float limit_;
    float n_prev_in_us_;
    float n_post_in_us_;
    float wob_frequency_in_hz_;
    float wob_amp_long_in_mm_;
    float wob_amp_trans_in_mm_;
    int wobble_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class PowerGradientParams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.PowerGradientParams) */ {
 public:
  inline PowerGradientParams() : PowerGradientParams(nullptr) {}
  ~PowerGradientParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PowerGradientParams(::google::protobuf::internal::ConstantInitialized);

  PowerGradientParams(const PowerGradientParams& from);
  PowerGradientParams(PowerGradientParams&& from) noexcept
    : PowerGradientParams() {
    *this = ::std::move(from);
  }

  inline PowerGradientParams& operator=(const PowerGradientParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerGradientParams& operator=(PowerGradientParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowerGradientParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerGradientParams* internal_default_instance() {
    return reinterpret_cast<const PowerGradientParams*>(
               &_PowerGradientParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PowerGradientParams& a, PowerGradientParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerGradientParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerGradientParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerGradientParams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerGradientParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PowerGradientParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PowerGradientParams& from) {
    PowerGradientParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerGradientParams* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.PowerGradientParams";
  }
  protected:
  explicit PowerGradientParams(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPowerInWFieldNumber = 1,
    kGradientInWPerSFieldNumber = 2,
  };
  // float minPowerInW = 1;
  void clear_minpowerinw() ;
  float minpowerinw() const;
  void set_minpowerinw(float value);

  private:
  float _internal_minpowerinw() const;
  void _internal_set_minpowerinw(float value);

  public:
  // float gradientInWPerS = 2;
  void clear_gradientinwpers() ;
  float gradientinwpers() const;
  void set_gradientinwpers(float value);

  private:
  float _internal_gradientinwpers() const;
  void _internal_set_gradientinwpers(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.PowerGradientParams)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float minpowerinw_;
    float gradientinwpers_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Part_GeometryInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.GeometryInfo) */ {
 public:
  inline Part_GeometryInfo() : Part_GeometryInfo(nullptr) {}
  ~Part_GeometryInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part_GeometryInfo(::google::protobuf::internal::ConstantInitialized);

  Part_GeometryInfo(const Part_GeometryInfo& from);
  Part_GeometryInfo(Part_GeometryInfo&& from) noexcept
    : Part_GeometryInfo() {
    *this = ::std::move(from);
  }

  inline Part_GeometryInfo& operator=(const Part_GeometryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_GeometryInfo& operator=(Part_GeometryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part_GeometryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_GeometryInfo* internal_default_instance() {
    return reinterpret_cast<const Part_GeometryInfo*>(
               &_Part_GeometryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Part_GeometryInfo& a, Part_GeometryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_GeometryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_GeometryInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part_GeometryInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part_GeometryInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Part_GeometryInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Part_GeometryInfo& from) {
    Part_GeometryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_GeometryInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Part.GeometryInfo";
  }
  protected:
  explicit Part_GeometryInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVolumeInMm3FieldNumber = 1,
    kSupportVolumeInMm3FieldNumber = 2,
    kBuildHeightInMmFieldNumber = 3,
    kSurfaceAreaInMm2FieldNumber = 4,
    kProjectedSurfaceInMm2FieldNumber = 5,
  };
  // double volume_in_mm3 = 1;
  void clear_volume_in_mm3() ;
  double volume_in_mm3() const;
  void set_volume_in_mm3(double value);

  private:
  double _internal_volume_in_mm3() const;
  void _internal_set_volume_in_mm3(double value);

  public:
  // double support_volume_in_mm3 = 2;
  void clear_support_volume_in_mm3() ;
  double support_volume_in_mm3() const;
  void set_support_volume_in_mm3(double value);

  private:
  double _internal_support_volume_in_mm3() const;
  void _internal_set_support_volume_in_mm3(double value);

  public:
  // double build_height_in_mm = 3;
  void clear_build_height_in_mm() ;
  double build_height_in_mm() const;
  void set_build_height_in_mm(double value);

  private:
  double _internal_build_height_in_mm() const;
  void _internal_set_build_height_in_mm(double value);

  public:
  // double surface_area_in_mm2 = 4;
  void clear_surface_area_in_mm2() ;
  double surface_area_in_mm2() const;
  void set_surface_area_in_mm2(double value);

  private:
  double _internal_surface_area_in_mm2() const;
  void _internal_set_surface_area_in_mm2(double value);

  public:
  // double projected_surface_in_mm2 = 5;
  void clear_projected_surface_in_mm2() ;
  double projected_surface_in_mm2() const;
  void set_projected_surface_in_mm2(double value);

  private:
  double _internal_projected_surface_in_mm2() const;
  void _internal_set_projected_surface_in_mm2(double value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Part.GeometryInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double volume_in_mm3_;
    double support_volume_in_mm3_;
    double build_height_in_mm_;
    double surface_area_in_mm2_;
    double projected_surface_in_mm2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Part_Material final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.Material) */ {
 public:
  inline Part_Material() : Part_Material(nullptr) {}
  ~Part_Material() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part_Material(::google::protobuf::internal::ConstantInitialized);

  Part_Material(const Part_Material& from);
  Part_Material(Part_Material&& from) noexcept
    : Part_Material() {
    *this = ::std::move(from);
  }

  inline Part_Material& operator=(const Part_Material& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_Material& operator=(Part_Material&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part_Material& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_Material* internal_default_instance() {
    return reinterpret_cast<const Part_Material*>(
               &_Part_Material_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Part_Material& a, Part_Material& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_Material* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_Material* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part_Material* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part_Material>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Part_Material& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Part_Material& from) {
    Part_Material::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_Material* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Part.Material";
  }
  protected:
  explicit Part_Material(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Part.Material)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Part_ProcessStrategy_ProprietaryParam final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.ProcessStrategy.ProprietaryParam) */ {
 public:
  inline Part_ProcessStrategy_ProprietaryParam() : Part_ProcessStrategy_ProprietaryParam(nullptr) {}
  ~Part_ProcessStrategy_ProprietaryParam() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part_ProcessStrategy_ProprietaryParam(::google::protobuf::internal::ConstantInitialized);

  Part_ProcessStrategy_ProprietaryParam(const Part_ProcessStrategy_ProprietaryParam& from);
  Part_ProcessStrategy_ProprietaryParam(Part_ProcessStrategy_ProprietaryParam&& from) noexcept
    : Part_ProcessStrategy_ProprietaryParam() {
    *this = ::std::move(from);
  }

  inline Part_ProcessStrategy_ProprietaryParam& operator=(const Part_ProcessStrategy_ProprietaryParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_ProcessStrategy_ProprietaryParam& operator=(Part_ProcessStrategy_ProprietaryParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part_ProcessStrategy_ProprietaryParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_ProcessStrategy_ProprietaryParam* internal_default_instance() {
    return reinterpret_cast<const Part_ProcessStrategy_ProprietaryParam*>(
               &_Part_ProcessStrategy_ProprietaryParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Part_ProcessStrategy_ProprietaryParam& a, Part_ProcessStrategy_ProprietaryParam& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_ProcessStrategy_ProprietaryParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_ProcessStrategy_ProprietaryParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part_ProcessStrategy_ProprietaryParam* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part_ProcessStrategy_ProprietaryParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Part_ProcessStrategy_ProprietaryParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Part_ProcessStrategy_ProprietaryParam& from) {
    Part_ProcessStrategy_ProprietaryParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_ProcessStrategy_ProprietaryParam* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Part.ProcessStrategy.ProprietaryParam";
  }
  protected:
  explicit Part_ProcessStrategy_ProprietaryParam(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kParamDescriptionFieldNumber = 3,
    kParamValueFieldNumber = 2,
  };
  // string param_name = 1;
  void clear_param_name() ;
  const std::string& param_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param_name(Arg_&& arg, Args_... args);
  std::string* mutable_param_name();
  PROTOBUF_NODISCARD std::string* release_param_name();
  void set_allocated_param_name(std::string* ptr);

  private:
  const std::string& _internal_param_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_name(
      const std::string& value);
  std::string* _internal_mutable_param_name();

  public:
  // string param_description = 3;
  void clear_param_description() ;
  const std::string& param_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param_description(Arg_&& arg, Args_... args);
  std::string* mutable_param_description();
  PROTOBUF_NODISCARD std::string* release_param_description();
  void set_allocated_param_description(std::string* ptr);

  private:
  const std::string& _internal_param_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_description(
      const std::string& value);
  std::string* _internal_mutable_param_description();

  public:
  // double param_value = 2;
  void clear_param_value() ;
  double param_value() const;
  void set_param_value(double value);

  private:
  double _internal_param_value() const;
  void _internal_set_param_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Part.ProcessStrategy.ProprietaryParam)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 92, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr param_name_;
    ::google::protobuf::internal::ArenaStringPtr param_description_;
    double param_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Part_ProcessStrategy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part.ProcessStrategy) */ {
 public:
  inline Part_ProcessStrategy() : Part_ProcessStrategy(nullptr) {}
  ~Part_ProcessStrategy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part_ProcessStrategy(::google::protobuf::internal::ConstantInitialized);

  Part_ProcessStrategy(const Part_ProcessStrategy& from);
  Part_ProcessStrategy(Part_ProcessStrategy&& from) noexcept
    : Part_ProcessStrategy() {
    *this = ::std::move(from);
  }

  inline Part_ProcessStrategy& operator=(const Part_ProcessStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part_ProcessStrategy& operator=(Part_ProcessStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part_ProcessStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part_ProcessStrategy* internal_default_instance() {
    return reinterpret_cast<const Part_ProcessStrategy*>(
               &_Part_ProcessStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Part_ProcessStrategy& a, Part_ProcessStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(Part_ProcessStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part_ProcessStrategy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part_ProcessStrategy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part_ProcessStrategy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Part_ProcessStrategy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Part_ProcessStrategy& from) {
    Part_ProcessStrategy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part_ProcessStrategy* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Part.ProcessStrategy";
  }
  protected:
  explicit Part_ProcessStrategy(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Part_ProcessStrategy_ProprietaryParam ProprietaryParam;

  using HatchingPattern = Part_ProcessStrategy_HatchingPattern;
  static constexpr HatchingPattern UNIDIRECTIONAL = Part_ProcessStrategy_HatchingPattern_UNIDIRECTIONAL;
  static constexpr HatchingPattern BIDIRECTIONAL = Part_ProcessStrategy_HatchingPattern_BIDIRECTIONAL;
  static constexpr HatchingPattern CHECKERBOARD = Part_ProcessStrategy_HatchingPattern_CHECKERBOARD;
  static constexpr HatchingPattern STRIPES = Part_ProcessStrategy_HatchingPattern_STRIPES;
  static constexpr HatchingPattern HEXAGON = Part_ProcessStrategy_HatchingPattern_HEXAGON;
  static inline bool HatchingPattern_IsValid(int value) {
    return Part_ProcessStrategy_HatchingPattern_IsValid(value);
  }
  static constexpr HatchingPattern HatchingPattern_MIN = Part_ProcessStrategy_HatchingPattern_HatchingPattern_MIN;
  static constexpr HatchingPattern HatchingPattern_MAX = Part_ProcessStrategy_HatchingPattern_HatchingPattern_MAX;
  static constexpr int HatchingPattern_ARRAYSIZE = Part_ProcessStrategy_HatchingPattern_HatchingPattern_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* HatchingPattern_descriptor() {
    return Part_ProcessStrategy_HatchingPattern_descriptor();
  }
  template <typename T>
  static inline const std::string& HatchingPattern_Name(T value) {
    return Part_ProcessStrategy_HatchingPattern_Name(value);
  }
  static inline bool HatchingPattern_Parse(absl::string_view name, HatchingPattern* value) {
    return Part_ProcessStrategy_HatchingPattern_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalParametersFieldNumber = 100,
    kNameFieldNumber = 90,
    kRotAngleInDegFieldNumber = 1,
    kIncrementAngleInDegFieldNumber = 2,
    kShiftInMmFieldNumber = 3,
    kExtendIntoInMmFieldNumber = 4,
    kLayerThicknessInMmFieldNumber = 5,
    kHatchDistanceInMmFieldNumber = 6,
    kHatchContourDistanceInMmFieldNumber = 7,
    kOverhangAngleInDegFieldNumber = 8,
    kContourOffsetInMmFieldNumber = 9,
    kNumberOfContoursFieldNumber = 10,
    kContourDistanceInMmFieldNumber = 11,
    kHatchingPatternFieldNumber = 12,
    kPatternHatchLengthInMmFieldNumber = 13,
  };
  // repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
  int additional_parameters_size() const;
  private:
  int _internal_additional_parameters_size() const;

  public:
  void clear_additional_parameters() ;
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* mutable_additional_parameters(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >*
      mutable_additional_parameters();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>& _internal_additional_parameters() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>* _internal_mutable_additional_parameters();
  public:
  const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& additional_parameters(int index) const;
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* add_additional_parameters();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >&
      additional_parameters() const;
  // string name = 90;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // float rot_angle_in_deg = 1;
  void clear_rot_angle_in_deg() ;
  float rot_angle_in_deg() const;
  void set_rot_angle_in_deg(float value);

  private:
  float _internal_rot_angle_in_deg() const;
  void _internal_set_rot_angle_in_deg(float value);

  public:
  // float increment_angle_in_deg = 2;
  void clear_increment_angle_in_deg() ;
  float increment_angle_in_deg() const;
  void set_increment_angle_in_deg(float value);

  private:
  float _internal_increment_angle_in_deg() const;
  void _internal_set_increment_angle_in_deg(float value);

  public:
  // float shift_in_mm = 3;
  void clear_shift_in_mm() ;
  float shift_in_mm() const;
  void set_shift_in_mm(float value);

  private:
  float _internal_shift_in_mm() const;
  void _internal_set_shift_in_mm(float value);

  public:
  // float extend_into_in_mm = 4;
  void clear_extend_into_in_mm() ;
  float extend_into_in_mm() const;
  void set_extend_into_in_mm(float value);

  private:
  float _internal_extend_into_in_mm() const;
  void _internal_set_extend_into_in_mm(float value);

  public:
  // float layer_thickness_in_mm = 5;
  void clear_layer_thickness_in_mm() ;
  float layer_thickness_in_mm() const;
  void set_layer_thickness_in_mm(float value);

  private:
  float _internal_layer_thickness_in_mm() const;
  void _internal_set_layer_thickness_in_mm(float value);

  public:
  // float hatch_distance_in_mm = 6;
  void clear_hatch_distance_in_mm() ;
  float hatch_distance_in_mm() const;
  void set_hatch_distance_in_mm(float value);

  private:
  float _internal_hatch_distance_in_mm() const;
  void _internal_set_hatch_distance_in_mm(float value);

  public:
  // float hatch_contour_distance_in_mm = 7;
  void clear_hatch_contour_distance_in_mm() ;
  float hatch_contour_distance_in_mm() const;
  void set_hatch_contour_distance_in_mm(float value);

  private:
  float _internal_hatch_contour_distance_in_mm() const;
  void _internal_set_hatch_contour_distance_in_mm(float value);

  public:
  // float overhang_angle_in_deg = 8;
  void clear_overhang_angle_in_deg() ;
  float overhang_angle_in_deg() const;
  void set_overhang_angle_in_deg(float value);

  private:
  float _internal_overhang_angle_in_deg() const;
  void _internal_set_overhang_angle_in_deg(float value);

  public:
  // float contour_offset_in_mm = 9;
  void clear_contour_offset_in_mm() ;
  float contour_offset_in_mm() const;
  void set_contour_offset_in_mm(float value);

  private:
  float _internal_contour_offset_in_mm() const;
  void _internal_set_contour_offset_in_mm(float value);

  public:
  // int32 number_of_contours = 10;
  void clear_number_of_contours() ;
  ::int32_t number_of_contours() const;
  void set_number_of_contours(::int32_t value);

  private:
  ::int32_t _internal_number_of_contours() const;
  void _internal_set_number_of_contours(::int32_t value);

  public:
  // float contour_distance_in_mm = 11;
  void clear_contour_distance_in_mm() ;
  float contour_distance_in_mm() const;
  void set_contour_distance_in_mm(float value);

  private:
  float _internal_contour_distance_in_mm() const;
  void _internal_set_contour_distance_in_mm(float value);

  public:
  // .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
  void clear_hatching_pattern() ;
  ::open_vector_format::Part_ProcessStrategy_HatchingPattern hatching_pattern() const;
  void set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value);

  private:
  ::open_vector_format::Part_ProcessStrategy_HatchingPattern _internal_hatching_pattern() const;
  void _internal_set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value);

  public:
  // float pattern_hatch_length_in_mm = 13;
  void clear_pattern_hatch_length_in_mm() ;
  float pattern_hatch_length_in_mm() const;
  void set_pattern_hatch_length_in_mm(float value);

  private:
  float _internal_pattern_hatch_length_in_mm() const;
  void _internal_set_pattern_hatch_length_in_mm(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Part.ProcessStrategy)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15, 1, 60, 7> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam > additional_parameters_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    float rot_angle_in_deg_;
    float increment_angle_in_deg_;
    float shift_in_mm_;
    float extend_into_in_mm_;
    float layer_thickness_in_mm_;
    float hatch_distance_in_mm_;
    float hatch_contour_distance_in_mm_;
    float overhang_angle_in_deg_;
    float contour_offset_in_mm_;
    ::int32_t number_of_contours_;
    float contour_distance_in_mm_;
    int hatching_pattern_;
    float pattern_hatch_length_in_mm_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class Part final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.Part) */ {
 public:
  inline Part() : Part(nullptr) {}
  ~Part() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part(::google::protobuf::internal::ConstantInitialized);

  Part(const Part& from);
  Part(Part&& from) noexcept
    : Part() {
    *this = ::std::move(from);
  }

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part& operator=(Part&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part* internal_default_instance() {
    return reinterpret_cast<const Part*>(
               &_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Part& a, Part& b) {
    a.Swap(&b);
  }
  inline void Swap(Part* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Part& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Part& from) {
    Part::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.Part";
  }
  protected:
  explicit Part(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Part_GeometryInfo GeometryInfo;
  typedef Part_Material Material;
  typedef Part_ProcessStrategy ProcessStrategy;

  // accessors -------------------------------------------------------

  enum : int {
    kExposureOrderFieldNumber = 7,
    kNameFieldNumber = 1,
    kParentPartNameFieldNumber = 8,
    kGeometryInfoFieldNumber = 2,
    kMaterialFieldNumber = 3,
    kProcessStrategyFieldNumber = 4,
    kUpSkinProcessStrategyFieldNumber = 5,
    kDownSkinProcessStrategyFieldNumber = 6,
  };
  // repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
  int exposure_order_size() const;
  private:
  int _internal_exposure_order_size() const;

  public:
  void clear_exposure_order() ;
  ::open_vector_format::VectorBlock_LPBFMetadata* mutable_exposure_order(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LPBFMetadata >*
      mutable_exposure_order();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LPBFMetadata>& _internal_exposure_order() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LPBFMetadata>* _internal_mutable_exposure_order();
  public:
  const ::open_vector_format::VectorBlock_LPBFMetadata& exposure_order(int index) const;
  ::open_vector_format::VectorBlock_LPBFMetadata* add_exposure_order();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LPBFMetadata >&
      exposure_order() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string parent_part_name = 8;
  void clear_parent_part_name() ;
  const std::string& parent_part_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent_part_name(Arg_&& arg, Args_... args);
  std::string* mutable_parent_part_name();
  PROTOBUF_NODISCARD std::string* release_parent_part_name();
  void set_allocated_parent_part_name(std::string* ptr);

  private:
  const std::string& _internal_parent_part_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_part_name(
      const std::string& value);
  std::string* _internal_mutable_parent_part_name();

  public:
  // .open_vector_format.Part.GeometryInfo geometry_info = 2;
  bool has_geometry_info() const;
  void clear_geometry_info() ;
  const ::open_vector_format::Part_GeometryInfo& geometry_info() const;
  PROTOBUF_NODISCARD ::open_vector_format::Part_GeometryInfo* release_geometry_info();
  ::open_vector_format::Part_GeometryInfo* mutable_geometry_info();
  void set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* value);
  void unsafe_arena_set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* value);
  ::open_vector_format::Part_GeometryInfo* unsafe_arena_release_geometry_info();

  private:
  const ::open_vector_format::Part_GeometryInfo& _internal_geometry_info() const;
  ::open_vector_format::Part_GeometryInfo* _internal_mutable_geometry_info();

  public:
  // .open_vector_format.Part.Material material = 3;
  bool has_material() const;
  void clear_material() ;
  const ::open_vector_format::Part_Material& material() const;
  PROTOBUF_NODISCARD ::open_vector_format::Part_Material* release_material();
  ::open_vector_format::Part_Material* mutable_material();
  void set_allocated_material(::open_vector_format::Part_Material* value);
  void unsafe_arena_set_allocated_material(::open_vector_format::Part_Material* value);
  ::open_vector_format::Part_Material* unsafe_arena_release_material();

  private:
  const ::open_vector_format::Part_Material& _internal_material() const;
  ::open_vector_format::Part_Material* _internal_mutable_material();

  public:
  // .open_vector_format.Part.ProcessStrategy process_strategy = 4;
  bool has_process_strategy() const;
  void clear_process_strategy() ;
  const ::open_vector_format::Part_ProcessStrategy& process_strategy() const;
  PROTOBUF_NODISCARD ::open_vector_format::Part_ProcessStrategy* release_process_strategy();
  ::open_vector_format::Part_ProcessStrategy* mutable_process_strategy();
  void set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  void unsafe_arena_set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  ::open_vector_format::Part_ProcessStrategy* unsafe_arena_release_process_strategy();

  private:
  const ::open_vector_format::Part_ProcessStrategy& _internal_process_strategy() const;
  ::open_vector_format::Part_ProcessStrategy* _internal_mutable_process_strategy();

  public:
  // .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
  bool has_up_skin_process_strategy() const;
  void clear_up_skin_process_strategy() ;
  const ::open_vector_format::Part_ProcessStrategy& up_skin_process_strategy() const;
  PROTOBUF_NODISCARD ::open_vector_format::Part_ProcessStrategy* release_up_skin_process_strategy();
  ::open_vector_format::Part_ProcessStrategy* mutable_up_skin_process_strategy();
  void set_allocated_up_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  void unsafe_arena_set_allocated_up_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  ::open_vector_format::Part_ProcessStrategy* unsafe_arena_release_up_skin_process_strategy();

  private:
  const ::open_vector_format::Part_ProcessStrategy& _internal_up_skin_process_strategy() const;
  ::open_vector_format::Part_ProcessStrategy* _internal_mutable_up_skin_process_strategy();

  public:
  // .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
  bool has_down_skin_process_strategy() const;
  void clear_down_skin_process_strategy() ;
  const ::open_vector_format::Part_ProcessStrategy& down_skin_process_strategy() const;
  PROTOBUF_NODISCARD ::open_vector_format::Part_ProcessStrategy* release_down_skin_process_strategy();
  ::open_vector_format::Part_ProcessStrategy* mutable_down_skin_process_strategy();
  void set_allocated_down_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  void unsafe_arena_set_allocated_down_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value);
  ::open_vector_format::Part_ProcessStrategy* unsafe_arena_release_down_skin_process_strategy();

  private:
  const ::open_vector_format::Part_ProcessStrategy& _internal_down_skin_process_strategy() const;
  ::open_vector_format::Part_ProcessStrategy* _internal_mutable_down_skin_process_strategy();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.Part)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 6, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LPBFMetadata > exposure_order_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr parent_part_name_;
    ::open_vector_format::Part_GeometryInfo* geometry_info_;
    ::open_vector_format::Part_Material* material_;
    ::open_vector_format::Part_ProcessStrategy* process_strategy_;
    ::open_vector_format::Part_ProcessStrategy* up_skin_process_strategy_;
    ::open_vector_format::Part_ProcessStrategy* down_skin_process_strategy_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::WorkPlane_Patch,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::google::protobuf::internal::MapEntry<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, 
    ::int32_t, ::open_vector_format::WorkPlane_Patch,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse& other);
  static const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse*>(&_WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};
// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData_closedContour final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour) */ {
 public:
  inline WorkPlane_WorkPlaneMetaData_closedContour() : WorkPlane_WorkPlaneMetaData_closedContour(nullptr) {}
  ~WorkPlane_WorkPlaneMetaData_closedContour() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData_closedContour(::google::protobuf::internal::ConstantInitialized);

  WorkPlane_WorkPlaneMetaData_closedContour(const WorkPlane_WorkPlaneMetaData_closedContour& from);
  WorkPlane_WorkPlaneMetaData_closedContour(WorkPlane_WorkPlaneMetaData_closedContour&& from) noexcept
    : WorkPlane_WorkPlaneMetaData_closedContour() {
    *this = ::std::move(from);
  }

  inline WorkPlane_WorkPlaneMetaData_closedContour& operator=(const WorkPlane_WorkPlaneMetaData_closedContour& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_WorkPlaneMetaData_closedContour& operator=(WorkPlane_WorkPlaneMetaData_closedContour&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkPlane_WorkPlaneMetaData_closedContour& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_WorkPlaneMetaData_closedContour* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_WorkPlaneMetaData_closedContour*>(
               &_WorkPlane_WorkPlaneMetaData_closedContour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WorkPlane_WorkPlaneMetaData_closedContour& a, WorkPlane_WorkPlaneMetaData_closedContour& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_WorkPlaneMetaData_closedContour* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_WorkPlaneMetaData_closedContour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkPlane_WorkPlaneMetaData_closedContour* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData_closedContour>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkPlane_WorkPlaneMetaData_closedContour& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WorkPlane_WorkPlaneMetaData_closedContour& from) {
    WorkPlane_WorkPlaneMetaData_closedContour::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_WorkPlaneMetaData_closedContour* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour";
  }
  protected:
  explicit WorkPlane_WorkPlaneMetaData_closedContour(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ContourType = WorkPlane_WorkPlaneMetaData_closedContour_ContourType;
  static constexpr ContourType PART_OUTER_CONTOUR = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_PART_OUTER_CONTOUR;
  static constexpr ContourType PART_INNER_CONTOUR = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_PART_INNER_CONTOUR;
  static constexpr ContourType OFFSET_CONTOUR = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_OFFSET_CONTOUR;
  static inline bool ContourType_IsValid(int value) {
    return WorkPlane_WorkPlaneMetaData_closedContour_ContourType_IsValid(value);
  }
  static constexpr ContourType ContourType_MIN = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_MIN;
  static constexpr ContourType ContourType_MAX = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_MAX;
  static constexpr int ContourType_ARRAYSIZE = WorkPlane_WorkPlaneMetaData_closedContour_ContourType_ContourType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ContourType_descriptor() {
    return WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor();
  }
  template <typename T>
  static inline const std::string& ContourType_Name(T value) {
    return WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Name(value);
  }
  static inline bool ContourType_Parse(absl::string_view name, ContourType* value) {
    return WorkPlane_WorkPlaneMetaData_closedContour_ContourType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContourSectionVectorBlockIndicesFieldNumber = 1,
    kAreaInMm2FieldNumber = 2,
    kLengthInMmFieldNumber = 3,
    kParentIndexFieldNumber = 5,
    kWindingNumberFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // repeated int32 contour_section_vector_block_indices = 1;
  int contour_section_vector_block_indices_size() const;
  private:
  int _internal_contour_section_vector_block_indices_size() const;

  public:
  void clear_contour_section_vector_block_indices() ;
  ::int32_t contour_section_vector_block_indices(int index) const;
  void set_contour_section_vector_block_indices(int index, ::int32_t value);
  void add_contour_section_vector_block_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& contour_section_vector_block_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_contour_section_vector_block_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_contour_section_vector_block_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_contour_section_vector_block_indices();

  public:
  // float area_in_mm_2 = 2;
  void clear_area_in_mm_2() ;
  float area_in_mm_2() const;
  void set_area_in_mm_2(float value);

  private:
  float _internal_area_in_mm_2() const;
  void _internal_set_area_in_mm_2(float value);

  public:
  // float length_in_mm = 3;
  void clear_length_in_mm() ;
  float length_in_mm() const;
  void set_length_in_mm(float value);

  private:
  float _internal_length_in_mm() const;
  void _internal_set_length_in_mm(float value);

  public:
  // int32 parent_index = 5;
  void clear_parent_index() ;
  ::int32_t parent_index() const;
  void set_parent_index(::int32_t value);

  private:
  ::int32_t _internal_parent_index() const;
  void _internal_set_parent_index(::int32_t value);

  public:
  // int32 winding_number = 6;
  void clear_winding_number() ;
  ::int32_t winding_number() const;
  void set_winding_number(::int32_t value);

  private:
  ::int32_t _internal_winding_number() const;
  void _internal_set_winding_number(::int32_t value);

  public:
  // .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
  void clear_type() ;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType type() const;
  void set_type(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType value);

  private:
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType _internal_type() const;
  void _internal_set_type(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::int32_t> contour_section_vector_block_indices_;
    mutable ::google::protobuf::internal::CachedSize _contour_section_vector_block_indices_cached_byte_size_;
    float area_in_mm_2_;
    float length_in_mm_;
    ::int32_t parent_index_;
    ::int32_t winding_number_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class WorkPlane_WorkPlaneMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.WorkPlaneMetaData) */ {
 public:
  inline WorkPlane_WorkPlaneMetaData() : WorkPlane_WorkPlaneMetaData(nullptr) {}
  ~WorkPlane_WorkPlaneMetaData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WorkPlane_WorkPlaneMetaData(::google::protobuf::internal::ConstantInitialized);

  WorkPlane_WorkPlaneMetaData(const WorkPlane_WorkPlaneMetaData& from);
  WorkPlane_WorkPlaneMetaData(WorkPlane_WorkPlaneMetaData&& from) noexcept
    : WorkPlane_WorkPlaneMetaData() {
    *this = ::std::move(from);
  }

  inline WorkPlane_WorkPlaneMetaData& operator=(const WorkPlane_WorkPlaneMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_WorkPlaneMetaData& operator=(WorkPlane_WorkPlaneMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkPlane_WorkPlaneMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_WorkPlaneMetaData* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_WorkPlaneMetaData*>(
               &_WorkPlane_WorkPlaneMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(WorkPlane_WorkPlaneMetaData& a, WorkPlane_WorkPlaneMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_WorkPlaneMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_WorkPlaneMetaData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkPlane_WorkPlaneMetaData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkPlane_WorkPlaneMetaData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkPlane_WorkPlaneMetaData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WorkPlane_WorkPlaneMetaData& from) {
    WorkPlane_WorkPlaneMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_WorkPlaneMetaData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.WorkPlane.WorkPlaneMetaData";
  }
  protected:
  explicit WorkPlane_WorkPlaneMetaData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkPlane_WorkPlaneMetaData_closedContour closedContour;

  // accessors -------------------------------------------------------

  enum : int {
    kPatchesMapFieldNumber = 3,
    kContoursFieldNumber = 6,
    kBoundsFieldNumber = 7,
    kTotalScanDistanceInMmFieldNumber = 1,
    kTotalJumpDistanceInMmFieldNumber = 2,
    kMaxPowerFieldNumber = 4,
    kMinPowerFieldNumber = 5,
  };
  // map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
  int patches_map_size() const;
  private:
  int _internal_patches_map_size() const;

  public:
  void clear_patches_map() ;
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>& patches_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>* mutable_patches_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>& _internal_patches_map() const;
  ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>* _internal_mutable_patches_map();

  public:
  // repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
  int contours_size() const;
  private:
  int _internal_contours_size() const;

  public:
  void clear_contours() ;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* mutable_contours(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >*
      mutable_contours();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>& _internal_contours() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>* _internal_mutable_contours();
  public:
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& contours(int index) const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* add_contours();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >&
      contours() const;
  // .open_vector_format.AxisAlignedBox2D Bounds = 7;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::open_vector_format::AxisAlignedBox2D& bounds() const;
  PROTOBUF_NODISCARD ::open_vector_format::AxisAlignedBox2D* release_bounds();
  ::open_vector_format::AxisAlignedBox2D* mutable_bounds();
  void set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  void unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  ::open_vector_format::AxisAlignedBox2D* unsafe_arena_release_bounds();

  private:
  const ::open_vector_format::AxisAlignedBox2D& _internal_bounds() const;
  ::open_vector_format::AxisAlignedBox2D* _internal_mutable_bounds();

  public:
  // double total_scan_distance_in_mm = 1;
  void clear_total_scan_distance_in_mm() ;
  double total_scan_distance_in_mm() const;
  void set_total_scan_distance_in_mm(double value);

  private:
  double _internal_total_scan_distance_in_mm() const;
  void _internal_set_total_scan_distance_in_mm(double value);

  public:
  // double total_jump_distance_in_mm = 2;
  void clear_total_jump_distance_in_mm() ;
  double total_jump_distance_in_mm() const;
  void set_total_jump_distance_in_mm(double value);

  private:
  double _internal_total_jump_distance_in_mm() const;
  void _internal_set_total_jump_distance_in_mm(double value);

  public:
  // float maxPower = 4;
  void clear_maxpower() ;
  float maxpower() const;
  void set_maxpower(float value);

  private:
  float _internal_maxpower() const;
  void _internal_set_maxpower(float value);

  public:
  // float minPower = 5;
  void clear_minpower() ;
  float minpower() const;
  void set_minpower(float value);

  private:
  float _internal_minpower() const;
  void _internal_set_minpower(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.WorkPlaneMetaData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 4, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<WorkPlane_WorkPlaneMetaData_PatchesMapEntry_DoNotUse, ::int32_t, ::open_vector_format::WorkPlane_Patch,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        patches_map_;
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour > contours_;
    ::open_vector_format::AxisAlignedBox2D* bounds_;
    double total_scan_distance_in_mm_;
    double total_jump_distance_in_mm_;
    float maxpower_;
    float minpower_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class WorkPlane_Patch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane.Patch) */ {
 public:
  inline WorkPlane_Patch() : WorkPlane_Patch(nullptr) {}
  ~WorkPlane_Patch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WorkPlane_Patch(::google::protobuf::internal::ConstantInitialized);

  WorkPlane_Patch(const WorkPlane_Patch& from);
  WorkPlane_Patch(WorkPlane_Patch&& from) noexcept
    : WorkPlane_Patch() {
    *this = ::std::move(from);
  }

  inline WorkPlane_Patch& operator=(const WorkPlane_Patch& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane_Patch& operator=(WorkPlane_Patch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkPlane_Patch& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane_Patch* internal_default_instance() {
    return reinterpret_cast<const WorkPlane_Patch*>(
               &_WorkPlane_Patch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(WorkPlane_Patch& a, WorkPlane_Patch& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane_Patch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane_Patch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkPlane_Patch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkPlane_Patch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkPlane_Patch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WorkPlane_Patch& from) {
    WorkPlane_Patch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane_Patch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.WorkPlane.Patch";
  }
  protected:
  explicit WorkPlane_Patch(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOuterContourFieldNumber = 1,
    kUFieldNumber = 2,
    kVFieldNumber = 3,
    kLayerIdFieldNumber = 4,
  };
  // .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
  bool has_outer_contour() const;
  void clear_outer_contour() ;
  const ::open_vector_format::VectorBlock_LineSequence& outer_contour() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_LineSequence* release_outer_contour();
  ::open_vector_format::VectorBlock_LineSequence* mutable_outer_contour();
  void set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* value);
  void unsafe_arena_set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* value);
  ::open_vector_format::VectorBlock_LineSequence* unsafe_arena_release_outer_contour();

  private:
  const ::open_vector_format::VectorBlock_LineSequence& _internal_outer_contour() const;
  ::open_vector_format::VectorBlock_LineSequence* _internal_mutable_outer_contour();

  public:
  // float u = 2;
  void clear_u() ;
  float u() const;
  void set_u(float value);

  private:
  float _internal_u() const;
  void _internal_set_u(float value);

  public:
  // float v = 3;
  void clear_v() ;
  float v() const;
  void set_v(float value);

  private:
  float _internal_v() const;
  void _internal_set_v(float value);

  public:
  // int32 layer_id = 4;
  void clear_layer_id() ;
  ::int32_t layer_id() const;
  void set_layer_id(::int32_t value);

  private:
  ::int32_t _internal_layer_id() const;
  void _internal_set_layer_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane.Patch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::open_vector_format::VectorBlock_LineSequence* outer_contour_;
    float u_;
    float v_;
    ::int32_t layer_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class WorkPlane final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.WorkPlane) */ {
 public:
  inline WorkPlane() : WorkPlane(nullptr) {}
  ~WorkPlane() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WorkPlane(::google::protobuf::internal::ConstantInitialized);

  WorkPlane(const WorkPlane& from);
  WorkPlane(WorkPlane&& from) noexcept
    : WorkPlane() {
    *this = ::std::move(from);
  }

  inline WorkPlane& operator=(const WorkPlane& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkPlane& operator=(WorkPlane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkPlane& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkPlane* internal_default_instance() {
    return reinterpret_cast<const WorkPlane*>(
               &_WorkPlane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WorkPlane& a, WorkPlane& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkPlane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkPlane* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkPlane* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkPlane>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkPlane& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WorkPlane& from) {
    WorkPlane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkPlane* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.WorkPlane";
  }
  protected:
  explicit WorkPlane(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkPlane_WorkPlaneMetaData WorkPlaneMetaData;
  typedef WorkPlane_Patch Patch;

  // accessors -------------------------------------------------------

  enum : int {
    kVectorBlocksFieldNumber = 1,
    kAdditionalAxisPositionsFieldNumber = 12,
    kMachineTypeFieldNumber = 11,
    kMetaDataFieldNumber = 13,
    kXPosInMmFieldNumber = 2,
    kYPosInMmFieldNumber = 3,
    kZPosInMmFieldNumber = 4,
    kXRotInDegFieldNumber = 5,
    kYRotInDegFieldNumber = 6,
    kZRotInDegFieldNumber = 7,
    kNumBlocksFieldNumber = 8,
    kRepeatsFieldNumber = 9,
    kWorkPlaneNumberFieldNumber = 10,
  };
  // repeated .open_vector_format.VectorBlock vector_blocks = 1;
  int vector_blocks_size() const;
  private:
  int _internal_vector_blocks_size() const;

  public:
  void clear_vector_blocks() ;
  ::open_vector_format::VectorBlock* mutable_vector_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock >*
      mutable_vector_blocks();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock>& _internal_vector_blocks() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock>* _internal_mutable_vector_blocks();
  public:
  const ::open_vector_format::VectorBlock& vector_blocks(int index) const;
  ::open_vector_format::VectorBlock* add_vector_blocks();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock >&
      vector_blocks() const;
  // repeated float additional_axis_positions = 12;
  int additional_axis_positions_size() const;
  private:
  int _internal_additional_axis_positions_size() const;

  public:
  void clear_additional_axis_positions() ;
  float additional_axis_positions(int index) const;
  void set_additional_axis_positions(int index, float value);
  void add_additional_axis_positions(float value);
  const ::google::protobuf::RepeatedField<float>& additional_axis_positions() const;
  ::google::protobuf::RepeatedField<float>* mutable_additional_axis_positions();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_additional_axis_positions() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_additional_axis_positions();

  public:
  // string machine_type = 11;
  void clear_machine_type() ;
  const std::string& machine_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_machine_type(Arg_&& arg, Args_... args);
  std::string* mutable_machine_type();
  PROTOBUF_NODISCARD std::string* release_machine_type();
  void set_allocated_machine_type(std::string* ptr);

  private:
  const std::string& _internal_machine_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_type(
      const std::string& value);
  std::string* _internal_mutable_machine_type();

  public:
  // .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
  bool has_meta_data() const;
  void clear_meta_data() ;
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData& meta_data() const;
  PROTOBUF_NODISCARD ::open_vector_format::WorkPlane_WorkPlaneMetaData* release_meta_data();
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* mutable_meta_data();
  void set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* value);
  void unsafe_arena_set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* value);
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* unsafe_arena_release_meta_data();

  private:
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData& _internal_meta_data() const;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* _internal_mutable_meta_data();

  public:
  // float x_pos_in_mm = 2;
  void clear_x_pos_in_mm() ;
  float x_pos_in_mm() const;
  void set_x_pos_in_mm(float value);

  private:
  float _internal_x_pos_in_mm() const;
  void _internal_set_x_pos_in_mm(float value);

  public:
  // float y_pos_in_mm = 3;
  void clear_y_pos_in_mm() ;
  float y_pos_in_mm() const;
  void set_y_pos_in_mm(float value);

  private:
  float _internal_y_pos_in_mm() const;
  void _internal_set_y_pos_in_mm(float value);

  public:
  // float z_pos_in_mm = 4;
  void clear_z_pos_in_mm() ;
  float z_pos_in_mm() const;
  void set_z_pos_in_mm(float value);

  private:
  float _internal_z_pos_in_mm() const;
  void _internal_set_z_pos_in_mm(float value);

  public:
  // float x_rot_in_deg = 5;
  void clear_x_rot_in_deg() ;
  float x_rot_in_deg() const;
  void set_x_rot_in_deg(float value);

  private:
  float _internal_x_rot_in_deg() const;
  void _internal_set_x_rot_in_deg(float value);

  public:
  // float y_rot_in_deg = 6;
  void clear_y_rot_in_deg() ;
  float y_rot_in_deg() const;
  void set_y_rot_in_deg(float value);

  private:
  float _internal_y_rot_in_deg() const;
  void _internal_set_y_rot_in_deg(float value);

  public:
  // float z_rot_in_deg = 7;
  void clear_z_rot_in_deg() ;
  float z_rot_in_deg() const;
  void set_z_rot_in_deg(float value);

  private:
  float _internal_z_rot_in_deg() const;
  void _internal_set_z_rot_in_deg(float value);

  public:
  // int32 num_blocks = 8;
  void clear_num_blocks() ;
  ::int32_t num_blocks() const;
  void set_num_blocks(::int32_t value);

  private:
  ::int32_t _internal_num_blocks() const;
  void _internal_set_num_blocks(::int32_t value);

  public:
  // uint32 repeats = 9;
  void clear_repeats() ;
  ::uint32_t repeats() const;
  void set_repeats(::uint32_t value);

  private:
  ::uint32_t _internal_repeats() const;
  void _internal_set_repeats(::uint32_t value);

  public:
  // int32 work_plane_number = 10;
  void clear_work_plane_number() ;
  ::int32_t work_plane_number() const;
  void set_work_plane_number(::int32_t value);

  private:
  ::int32_t _internal_work_plane_number() const;
  void _internal_set_work_plane_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.WorkPlane)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 13, 2, 57, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock > vector_blocks_;
    ::google::protobuf::RepeatedField<float> additional_axis_positions_;
    ::google::protobuf::internal::ArenaStringPtr machine_type_;
    ::open_vector_format::WorkPlane_WorkPlaneMetaData* meta_data_;
    float x_pos_in_mm_;
    float y_pos_in_mm_;
    float z_pos_in_mm_;
    float x_rot_in_deg_;
    float y_rot_in_deg_;
    float z_rot_in_deg_;
    ::int32_t num_blocks_;
    ::uint32_t repeats_;
    ::int32_t work_plane_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_VectorBlockMetaData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.VectorBlockMetaData) */ {
 public:
  inline VectorBlock_VectorBlockMetaData() : VectorBlock_VectorBlockMetaData(nullptr) {}
  ~VectorBlock_VectorBlockMetaData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_VectorBlockMetaData(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_VectorBlockMetaData(const VectorBlock_VectorBlockMetaData& from);
  VectorBlock_VectorBlockMetaData(VectorBlock_VectorBlockMetaData&& from) noexcept
    : VectorBlock_VectorBlockMetaData() {
    *this = ::std::move(from);
  }

  inline VectorBlock_VectorBlockMetaData& operator=(const VectorBlock_VectorBlockMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_VectorBlockMetaData& operator=(VectorBlock_VectorBlockMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_VectorBlockMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_VectorBlockMetaData* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_VectorBlockMetaData*>(
               &_VectorBlock_VectorBlockMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VectorBlock_VectorBlockMetaData& a, VectorBlock_VectorBlockMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_VectorBlockMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_VectorBlockMetaData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_VectorBlockMetaData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_VectorBlockMetaData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_VectorBlockMetaData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_VectorBlockMetaData& from) {
    VectorBlock_VectorBlockMetaData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_VectorBlockMetaData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.VectorBlockMetaData";
  }
  protected:
  explicit VectorBlock_VectorBlockMetaData(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundsFieldNumber = 6,
    kTotalScanDistanceInMmFieldNumber = 1,
    kTotalJumpDistanceInMmFieldNumber = 2,
    kPartKeyFieldNumber = 3,
    kPatchKeyFieldNumber = 4,
    kContourIndexFieldNumber = 5,
    kDisplayColorFieldNumber = 7,
  };
  // .open_vector_format.AxisAlignedBox2D bounds = 6;
  bool has_bounds() const;
  void clear_bounds() ;
  const ::open_vector_format::AxisAlignedBox2D& bounds() const;
  PROTOBUF_NODISCARD ::open_vector_format::AxisAlignedBox2D* release_bounds();
  ::open_vector_format::AxisAlignedBox2D* mutable_bounds();
  void set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  void unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value);
  ::open_vector_format::AxisAlignedBox2D* unsafe_arena_release_bounds();

  private:
  const ::open_vector_format::AxisAlignedBox2D& _internal_bounds() const;
  ::open_vector_format::AxisAlignedBox2D* _internal_mutable_bounds();

  public:
  // double total_scan_distance_in_mm = 1;
  void clear_total_scan_distance_in_mm() ;
  double total_scan_distance_in_mm() const;
  void set_total_scan_distance_in_mm(double value);

  private:
  double _internal_total_scan_distance_in_mm() const;
  void _internal_set_total_scan_distance_in_mm(double value);

  public:
  // double total_jump_distance_in_mm = 2;
  void clear_total_jump_distance_in_mm() ;
  double total_jump_distance_in_mm() const;
  void set_total_jump_distance_in_mm(double value);

  private:
  double _internal_total_jump_distance_in_mm() const;
  void _internal_set_total_jump_distance_in_mm(double value);

  public:
  // int32 part_key = 3;
  void clear_part_key() ;
  ::int32_t part_key() const;
  void set_part_key(::int32_t value);

  private:
  ::int32_t _internal_part_key() const;
  void _internal_set_part_key(::int32_t value);

  public:
  // int32 patch_key = 4;
  void clear_patch_key() ;
  ::int32_t patch_key() const;
  void set_patch_key(::int32_t value);

  private:
  ::int32_t _internal_patch_key() const;
  void _internal_set_patch_key(::int32_t value);

  public:
  // int32 contour_index = 5;
  void clear_contour_index() ;
  ::int32_t contour_index() const;
  void set_contour_index(::int32_t value);

  private:
  ::int32_t _internal_contour_index() const;
  void _internal_set_contour_index(::int32_t value);

  public:
  // int32 display_color = 7;
  void clear_display_color() ;
  ::int32_t display_color() const;
  void set_display_color(::int32_t value);

  private:
  ::int32_t _internal_display_color() const;
  void _internal_set_display_color(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.VectorBlockMetaData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::open_vector_format::AxisAlignedBox2D* bounds_;
    double total_scan_distance_in_mm_;
    double total_jump_distance_in_mm_;
    ::int32_t part_key_;
    ::int32_t patch_key_;
    ::int32_t contour_index_;
    ::int32_t display_color_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_LPBFMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LPBFMetadata) */ {
 public:
  inline VectorBlock_LPBFMetadata() : VectorBlock_LPBFMetadata(nullptr) {}
  ~VectorBlock_LPBFMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_LPBFMetadata(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_LPBFMetadata(const VectorBlock_LPBFMetadata& from);
  VectorBlock_LPBFMetadata(VectorBlock_LPBFMetadata&& from) noexcept
    : VectorBlock_LPBFMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LPBFMetadata& operator=(const VectorBlock_LPBFMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LPBFMetadata& operator=(VectorBlock_LPBFMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_LPBFMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LPBFMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LPBFMetadata*>(
               &_VectorBlock_LPBFMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VectorBlock_LPBFMetadata& a, VectorBlock_LPBFMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LPBFMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LPBFMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_LPBFMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_LPBFMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_LPBFMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_LPBFMetadata& from) {
    VectorBlock_LPBFMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LPBFMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.LPBFMetadata";
  }
  protected:
  explicit VectorBlock_LPBFMetadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SkinType = VectorBlock_LPBFMetadata_SkinType;
  static constexpr SkinType IN_SKIN = VectorBlock_LPBFMetadata_SkinType_IN_SKIN;
  static constexpr SkinType DOWN_SKIN = VectorBlock_LPBFMetadata_SkinType_DOWN_SKIN;
  static constexpr SkinType UP_SKIN = VectorBlock_LPBFMetadata_SkinType_UP_SKIN;
  static inline bool SkinType_IsValid(int value) {
    return VectorBlock_LPBFMetadata_SkinType_IsValid(value);
  }
  static constexpr SkinType SkinType_MIN = VectorBlock_LPBFMetadata_SkinType_SkinType_MIN;
  static constexpr SkinType SkinType_MAX = VectorBlock_LPBFMetadata_SkinType_SkinType_MAX;
  static constexpr int SkinType_ARRAYSIZE = VectorBlock_LPBFMetadata_SkinType_SkinType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SkinType_descriptor() {
    return VectorBlock_LPBFMetadata_SkinType_descriptor();
  }
  template <typename T>
  static inline const std::string& SkinType_Name(T value) {
    return VectorBlock_LPBFMetadata_SkinType_Name(value);
  }
  static inline bool SkinType_Parse(absl::string_view name, SkinType* value) {
    return VectorBlock_LPBFMetadata_SkinType_Parse(name, value);
  }

  using SkinCoreStrategyArea = VectorBlock_LPBFMetadata_SkinCoreStrategyArea;
  static constexpr SkinCoreStrategyArea OUTER_HULL = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_OUTER_HULL;
  static constexpr SkinCoreStrategyArea CORE = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_CORE;
  static constexpr SkinCoreStrategyArea INBETWEEN_HULL = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_INBETWEEN_HULL;
  static inline bool SkinCoreStrategyArea_IsValid(int value) {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_IsValid(value);
  }
  static constexpr SkinCoreStrategyArea SkinCoreStrategyArea_MIN = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MIN;
  static constexpr SkinCoreStrategyArea SkinCoreStrategyArea_MAX = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_MAX;
  static constexpr int SkinCoreStrategyArea_ARRAYSIZE = VectorBlock_LPBFMetadata_SkinCoreStrategyArea_SkinCoreStrategyArea_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SkinCoreStrategyArea_descriptor() {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
  }
  template <typename T>
  static inline const std::string& SkinCoreStrategyArea_Name(T value) {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Name(value);
  }
  static inline bool SkinCoreStrategyArea_Parse(absl::string_view name, SkinCoreStrategyArea* value) {
    return VectorBlock_LPBFMetadata_SkinCoreStrategyArea_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartAreaFieldNumber = 1,
    kSkinTypeFieldNumber = 2,
    kSkinCoreStrategyAreaFieldNumber = 3,
    kStructureTypeFieldNumber = 4,
    kReexposureFieldNumber = 5,
  };
  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  void clear_part_area() ;
  ::open_vector_format::VectorBlock_PartArea part_area() const;
  void set_part_area(::open_vector_format::VectorBlock_PartArea value);

  private:
  ::open_vector_format::VectorBlock_PartArea _internal_part_area() const;
  void _internal_set_part_area(::open_vector_format::VectorBlock_PartArea value);

  public:
  // .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
  void clear_skin_type() ;
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinType skin_type() const;
  void set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value);

  private:
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinType _internal_skin_type() const;
  void _internal_set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value);

  public:
  // .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
  void clear_skin_core_strategy_area() ;
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea skin_core_strategy_area() const;
  void set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value);

  private:
  ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea _internal_skin_core_strategy_area() const;
  void _internal_set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value);

  public:
  // .open_vector_format.VectorBlock.StructureType structure_type = 4;
  void clear_structure_type() ;
  ::open_vector_format::VectorBlock_StructureType structure_type() const;
  void set_structure_type(::open_vector_format::VectorBlock_StructureType value);

  private:
  ::open_vector_format::VectorBlock_StructureType _internal_structure_type() const;
  void _internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value);

  public:
  // bool reexposure = 5;
  void clear_reexposure() ;
  bool reexposure() const;
  void set_reexposure(bool value);

  private:
  bool _internal_reexposure() const;
  void _internal_set_reexposure(bool value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LPBFMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int part_area_;
    int skin_type_;
    int skin_core_strategy_area_;
    int structure_type_;
    bool reexposure_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_MicroStructuringMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.MicroStructuringMetadata) */ {
 public:
  inline VectorBlock_MicroStructuringMetadata() : VectorBlock_MicroStructuringMetadata(nullptr) {}
  ~VectorBlock_MicroStructuringMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_MicroStructuringMetadata(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_MicroStructuringMetadata(const VectorBlock_MicroStructuringMetadata& from);
  VectorBlock_MicroStructuringMetadata(VectorBlock_MicroStructuringMetadata&& from) noexcept
    : VectorBlock_MicroStructuringMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_MicroStructuringMetadata& operator=(const VectorBlock_MicroStructuringMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_MicroStructuringMetadata& operator=(VectorBlock_MicroStructuringMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_MicroStructuringMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_MicroStructuringMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_MicroStructuringMetadata*>(
               &_VectorBlock_MicroStructuringMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(VectorBlock_MicroStructuringMetadata& a, VectorBlock_MicroStructuringMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_MicroStructuringMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_MicroStructuringMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_MicroStructuringMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_MicroStructuringMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_MicroStructuringMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_MicroStructuringMetadata& from) {
    VectorBlock_MicroStructuringMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_MicroStructuringMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.MicroStructuringMetadata";
  }
  protected:
  explicit VectorBlock_MicroStructuringMetadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartAreaFieldNumber = 1,
    kStructureTypeFieldNumber = 2,
  };
  // .open_vector_format.VectorBlock.PartArea part_area = 1;
  void clear_part_area() ;
  ::open_vector_format::VectorBlock_PartArea part_area() const;
  void set_part_area(::open_vector_format::VectorBlock_PartArea value);

  private:
  ::open_vector_format::VectorBlock_PartArea _internal_part_area() const;
  void _internal_set_part_area(::open_vector_format::VectorBlock_PartArea value);

  public:
  // .open_vector_format.VectorBlock.StructureType structure_type = 2;
  void clear_structure_type() ;
  ::open_vector_format::VectorBlock_StructureType structure_type() const;
  void set_structure_type(::open_vector_format::VectorBlock_StructureType value);

  private:
  ::open_vector_format::VectorBlock_StructureType _internal_structure_type() const;
  void _internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.MicroStructuringMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int part_area_;
    int structure_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_PolishingMetadata final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PolishingMetadata) */ {
 public:
  inline VectorBlock_PolishingMetadata() : VectorBlock_PolishingMetadata(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_PolishingMetadata(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_PolishingMetadata(const VectorBlock_PolishingMetadata& from);
  VectorBlock_PolishingMetadata(VectorBlock_PolishingMetadata&& from) noexcept
    : VectorBlock_PolishingMetadata() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PolishingMetadata& operator=(const VectorBlock_PolishingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PolishingMetadata& operator=(VectorBlock_PolishingMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_PolishingMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PolishingMetadata* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PolishingMetadata*>(
               &_VectorBlock_PolishingMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VectorBlock_PolishingMetadata& a, VectorBlock_PolishingMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PolishingMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PolishingMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_PolishingMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_PolishingMetadata>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VectorBlock_PolishingMetadata& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VectorBlock_PolishingMetadata& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.PolishingMetadata";
  }
  protected:
  explicit VectorBlock_PolishingMetadata(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PolishingMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_LineSequence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequence) */ {
 public:
  inline VectorBlock_LineSequence() : VectorBlock_LineSequence(nullptr) {}
  ~VectorBlock_LineSequence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_LineSequence(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_LineSequence(const VectorBlock_LineSequence& from);
  VectorBlock_LineSequence(VectorBlock_LineSequence&& from) noexcept
    : VectorBlock_LineSequence() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequence& operator=(const VectorBlock_LineSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequence& operator=(VectorBlock_LineSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_LineSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequence* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequence*>(
               &_VectorBlock_LineSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VectorBlock_LineSequence& a, VectorBlock_LineSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_LineSequence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_LineSequence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_LineSequence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_LineSequence& from) {
    VectorBlock_LineSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequence";
  }
  protected:
  explicit VectorBlock_LineSequence(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_LineSequence3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequence3D) */ {
 public:
  inline VectorBlock_LineSequence3D() : VectorBlock_LineSequence3D(nullptr) {}
  ~VectorBlock_LineSequence3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_LineSequence3D(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_LineSequence3D(const VectorBlock_LineSequence3D& from);
  VectorBlock_LineSequence3D(VectorBlock_LineSequence3D&& from) noexcept
    : VectorBlock_LineSequence3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequence3D& operator=(const VectorBlock_LineSequence3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequence3D& operator=(VectorBlock_LineSequence3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_LineSequence3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequence3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequence3D*>(
               &_VectorBlock_LineSequence3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(VectorBlock_LineSequence3D& a, VectorBlock_LineSequence3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequence3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequence3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_LineSequence3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_LineSequence3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_LineSequence3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_LineSequence3D& from) {
    VectorBlock_LineSequence3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequence3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequence3D";
  }
  protected:
  explicit VectorBlock_LineSequence3D(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequence3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_Hatches final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Hatches) */ {
 public:
  inline VectorBlock_Hatches() : VectorBlock_Hatches(nullptr) {}
  ~VectorBlock_Hatches() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_Hatches(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_Hatches(const VectorBlock_Hatches& from);
  VectorBlock_Hatches(VectorBlock_Hatches&& from) noexcept
    : VectorBlock_Hatches() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Hatches& operator=(const VectorBlock_Hatches& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Hatches& operator=(VectorBlock_Hatches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_Hatches& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Hatches* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Hatches*>(
               &_VectorBlock_Hatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VectorBlock_Hatches& a, VectorBlock_Hatches& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Hatches* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Hatches* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_Hatches* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_Hatches>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_Hatches& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_Hatches& from) {
    VectorBlock_Hatches::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Hatches* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.Hatches";
  }
  protected:
  explicit VectorBlock_Hatches(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Hatches)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_Hatches3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Hatches3D) */ {
 public:
  inline VectorBlock_Hatches3D() : VectorBlock_Hatches3D(nullptr) {}
  ~VectorBlock_Hatches3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_Hatches3D(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_Hatches3D(const VectorBlock_Hatches3D& from);
  VectorBlock_Hatches3D(VectorBlock_Hatches3D&& from) noexcept
    : VectorBlock_Hatches3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Hatches3D& operator=(const VectorBlock_Hatches3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Hatches3D& operator=(VectorBlock_Hatches3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_Hatches3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Hatches3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Hatches3D*>(
               &_VectorBlock_Hatches3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(VectorBlock_Hatches3D& a, VectorBlock_Hatches3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Hatches3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Hatches3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_Hatches3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_Hatches3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_Hatches3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_Hatches3D& from) {
    VectorBlock_Hatches3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Hatches3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.Hatches3D";
  }
  protected:
  explicit VectorBlock_Hatches3D(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Hatches3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_PointSequence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PointSequence) */ {
 public:
  inline VectorBlock_PointSequence() : VectorBlock_PointSequence(nullptr) {}
  ~VectorBlock_PointSequence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_PointSequence(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_PointSequence(const VectorBlock_PointSequence& from);
  VectorBlock_PointSequence(VectorBlock_PointSequence&& from) noexcept
    : VectorBlock_PointSequence() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PointSequence& operator=(const VectorBlock_PointSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PointSequence& operator=(VectorBlock_PointSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_PointSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PointSequence* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PointSequence*>(
               &_VectorBlock_PointSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(VectorBlock_PointSequence& a, VectorBlock_PointSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PointSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PointSequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_PointSequence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_PointSequence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_PointSequence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_PointSequence& from) {
    VectorBlock_PointSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_PointSequence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.PointSequence";
  }
  protected:
  explicit VectorBlock_PointSequence(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PointSequence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_PointSequence3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.PointSequence3D) */ {
 public:
  inline VectorBlock_PointSequence3D() : VectorBlock_PointSequence3D(nullptr) {}
  ~VectorBlock_PointSequence3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_PointSequence3D(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_PointSequence3D(const VectorBlock_PointSequence3D& from);
  VectorBlock_PointSequence3D(VectorBlock_PointSequence3D&& from) noexcept
    : VectorBlock_PointSequence3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_PointSequence3D& operator=(const VectorBlock_PointSequence3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_PointSequence3D& operator=(VectorBlock_PointSequence3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_PointSequence3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_PointSequence3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_PointSequence3D*>(
               &_VectorBlock_PointSequence3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(VectorBlock_PointSequence3D& a, VectorBlock_PointSequence3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_PointSequence3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_PointSequence3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_PointSequence3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_PointSequence3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_PointSequence3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_PointSequence3D& from) {
    VectorBlock_PointSequence3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_PointSequence3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.PointSequence3D";
  }
  protected:
  explicit VectorBlock_PointSequence3D(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated float points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField<float>& points() const;
  ::google::protobuf::RepeatedField<float>* mutable_points();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points();

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.PointSequence3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_Arcs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Arcs) */ {
 public:
  inline VectorBlock_Arcs() : VectorBlock_Arcs(nullptr) {}
  ~VectorBlock_Arcs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_Arcs(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_Arcs(const VectorBlock_Arcs& from);
  VectorBlock_Arcs(VectorBlock_Arcs&& from) noexcept
    : VectorBlock_Arcs() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Arcs& operator=(const VectorBlock_Arcs& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Arcs& operator=(VectorBlock_Arcs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_Arcs& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Arcs* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Arcs*>(
               &_VectorBlock_Arcs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(VectorBlock_Arcs& a, VectorBlock_Arcs& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Arcs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Arcs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_Arcs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_Arcs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_Arcs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_Arcs& from) {
    VectorBlock_Arcs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Arcs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.Arcs";
  }
  protected:
  explicit VectorBlock_Arcs(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentersFieldNumber = 4,
    kAngleFieldNumber = 1,
    kStartDxFieldNumber = 2,
    kStartDyFieldNumber = 3,
  };
  // repeated float centers = 4;
  int centers_size() const;
  private:
  int _internal_centers_size() const;

  public:
  void clear_centers() ;
  float centers(int index) const;
  void set_centers(int index, float value);
  void add_centers(float value);
  const ::google::protobuf::RepeatedField<float>& centers() const;
  ::google::protobuf::RepeatedField<float>* mutable_centers();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_centers() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_centers();

  public:
  // double angle = 1;
  void clear_angle() ;
  double angle() const;
  void set_angle(double value);

  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);

  public:
  // float start_dx = 2;
  void clear_start_dx() ;
  float start_dx() const;
  void set_start_dx(float value);

  private:
  float _internal_start_dx() const;
  void _internal_set_start_dx(float value);

  public:
  // float start_dy = 3;
  void clear_start_dy() ;
  float start_dy() const;
  void set_start_dy(float value);

  private:
  float _internal_start_dy() const;
  void _internal_set_start_dy(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Arcs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> centers_;
    double angle_;
    float start_dx_;
    float start_dy_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_Arcs3D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Arcs3D) */ {
 public:
  inline VectorBlock_Arcs3D() : VectorBlock_Arcs3D(nullptr) {}
  ~VectorBlock_Arcs3D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_Arcs3D(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_Arcs3D(const VectorBlock_Arcs3D& from);
  VectorBlock_Arcs3D(VectorBlock_Arcs3D&& from) noexcept
    : VectorBlock_Arcs3D() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Arcs3D& operator=(const VectorBlock_Arcs3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Arcs3D& operator=(VectorBlock_Arcs3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_Arcs3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Arcs3D* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Arcs3D*>(
               &_VectorBlock_Arcs3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VectorBlock_Arcs3D& a, VectorBlock_Arcs3D& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Arcs3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Arcs3D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_Arcs3D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_Arcs3D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_Arcs3D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_Arcs3D& from) {
    VectorBlock_Arcs3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Arcs3D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.Arcs3D";
  }
  protected:
  explicit VectorBlock_Arcs3D(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentersFieldNumber = 5,
    kAngleFieldNumber = 1,
    kStartDxFieldNumber = 2,
    kStartDyFieldNumber = 3,
    kStartDzFieldNumber = 4,
  };
  // repeated float centers = 5;
  int centers_size() const;
  private:
  int _internal_centers_size() const;

  public:
  void clear_centers() ;
  float centers(int index) const;
  void set_centers(int index, float value);
  void add_centers(float value);
  const ::google::protobuf::RepeatedField<float>& centers() const;
  ::google::protobuf::RepeatedField<float>* mutable_centers();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_centers() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_centers();

  public:
  // double angle = 1;
  void clear_angle() ;
  double angle() const;
  void set_angle(double value);

  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);

  public:
  // float start_dx = 2;
  void clear_start_dx() ;
  float start_dx() const;
  void set_start_dx(float value);

  private:
  float _internal_start_dx() const;
  void _internal_set_start_dx(float value);

  public:
  // float start_dy = 3;
  void clear_start_dy() ;
  float start_dy() const;
  void set_start_dy(float value);

  private:
  float _internal_start_dy() const;
  void _internal_set_start_dy(float value);

  public:
  // float start_dz = 4;
  void clear_start_dz() ;
  float start_dz() const;
  void set_start_dz(float value);

  private:
  float _internal_start_dz() const;
  void _internal_set_start_dz(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Arcs3D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> centers_;
    double angle_;
    float start_dx_;
    float start_dy_;
    float start_dz_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_Ellipses final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.Ellipses) */ {
 public:
  inline VectorBlock_Ellipses() : VectorBlock_Ellipses(nullptr) {}
  ~VectorBlock_Ellipses() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_Ellipses(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_Ellipses(const VectorBlock_Ellipses& from);
  VectorBlock_Ellipses(VectorBlock_Ellipses&& from) noexcept
    : VectorBlock_Ellipses() {
    *this = ::std::move(from);
  }

  inline VectorBlock_Ellipses& operator=(const VectorBlock_Ellipses& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_Ellipses& operator=(VectorBlock_Ellipses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_Ellipses& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_Ellipses* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_Ellipses*>(
               &_VectorBlock_Ellipses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VectorBlock_Ellipses& a, VectorBlock_Ellipses& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_Ellipses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_Ellipses* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_Ellipses* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_Ellipses>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_Ellipses& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_Ellipses& from) {
    VectorBlock_Ellipses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_Ellipses* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.Ellipses";
  }
  protected:
  explicit VectorBlock_Ellipses(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEllipsesArcsFieldNumber = 4,
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kPhi0FieldNumber = 3,
  };
  // .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
  bool has_ellipses_arcs() const;
  void clear_ellipses_arcs() ;
  const ::open_vector_format::VectorBlock_Arcs& ellipses_arcs() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Arcs* release_ellipses_arcs();
  ::open_vector_format::VectorBlock_Arcs* mutable_ellipses_arcs();
  void set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* value);
  void unsafe_arena_set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* value);
  ::open_vector_format::VectorBlock_Arcs* unsafe_arena_release_ellipses_arcs();

  private:
  const ::open_vector_format::VectorBlock_Arcs& _internal_ellipses_arcs() const;
  ::open_vector_format::VectorBlock_Arcs* _internal_mutable_ellipses_arcs();

  public:
  // float a = 1;
  void clear_a() ;
  float a() const;
  void set_a(float value);

  private:
  float _internal_a() const;
  void _internal_set_a(float value);

  public:
  // float b = 2;
  void clear_b() ;
  float b() const;
  void set_b(float value);

  private:
  float _internal_b() const;
  void _internal_set_b(float value);

  public:
  // double phi0 = 3;
  void clear_phi0() ;
  double phi0() const;
  void set_phi0(double value);

  private:
  double _internal_phi0() const;
  void _internal_set_phi0(double value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.Ellipses)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::open_vector_format::VectorBlock_Arcs* ellipses_arcs_;
    float a_;
    float b_;
    double phi0_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_ExposurePause final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.ExposurePause) */ {
 public:
  inline VectorBlock_ExposurePause() : VectorBlock_ExposurePause(nullptr) {}
  ~VectorBlock_ExposurePause() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_ExposurePause(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_ExposurePause(const VectorBlock_ExposurePause& from);
  VectorBlock_ExposurePause(VectorBlock_ExposurePause&& from) noexcept
    : VectorBlock_ExposurePause() {
    *this = ::std::move(from);
  }

  inline VectorBlock_ExposurePause& operator=(const VectorBlock_ExposurePause& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_ExposurePause& operator=(VectorBlock_ExposurePause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_ExposurePause& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_ExposurePause* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_ExposurePause*>(
               &_VectorBlock_ExposurePause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(VectorBlock_ExposurePause& a, VectorBlock_ExposurePause& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_ExposurePause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_ExposurePause* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_ExposurePause* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_ExposurePause>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_ExposurePause& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_ExposurePause& from) {
    VectorBlock_ExposurePause::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_ExposurePause* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.ExposurePause";
  }
  protected:
  explicit VectorBlock_ExposurePause(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPauseInUsFieldNumber = 1,
  };
  // uint64 pause_in_us = 1;
  void clear_pause_in_us() ;
  ::uint64_t pause_in_us() const;
  void set_pause_in_us(::uint64_t value);

  private:
  ::uint64_t _internal_pause_in_us() const;
  void _internal_set_pause_in_us(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.ExposurePause)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t pause_in_us_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_LineSequenceParaAdapt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.LineSequenceParaAdapt) */ {
 public:
  inline VectorBlock_LineSequenceParaAdapt() : VectorBlock_LineSequenceParaAdapt(nullptr) {}
  ~VectorBlock_LineSequenceParaAdapt() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_LineSequenceParaAdapt(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_LineSequenceParaAdapt(const VectorBlock_LineSequenceParaAdapt& from);
  VectorBlock_LineSequenceParaAdapt(VectorBlock_LineSequenceParaAdapt&& from) noexcept
    : VectorBlock_LineSequenceParaAdapt() {
    *this = ::std::move(from);
  }

  inline VectorBlock_LineSequenceParaAdapt& operator=(const VectorBlock_LineSequenceParaAdapt& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_LineSequenceParaAdapt& operator=(VectorBlock_LineSequenceParaAdapt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_LineSequenceParaAdapt& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_LineSequenceParaAdapt* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_LineSequenceParaAdapt*>(
               &_VectorBlock_LineSequenceParaAdapt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(VectorBlock_LineSequenceParaAdapt& a, VectorBlock_LineSequenceParaAdapt& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_LineSequenceParaAdapt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_LineSequenceParaAdapt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_LineSequenceParaAdapt* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_LineSequenceParaAdapt>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_LineSequenceParaAdapt& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_LineSequenceParaAdapt& from) {
    VectorBlock_LineSequenceParaAdapt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_LineSequenceParaAdapt* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.LineSequenceParaAdapt";
  }
  protected:
  explicit VectorBlock_LineSequenceParaAdapt(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AdaptedParameter = VectorBlock_LineSequenceParaAdapt_AdaptedParameter;
  static constexpr AdaptedParameter LASER_POWER_IN_W = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_POWER_IN_W;
  static constexpr AdaptedParameter LASER_FOCUS_SHIFT_IN_MM = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_FOCUS_SHIFT_IN_MM;
  static constexpr AdaptedParameter LASER_PULSE_LENGTH_IN_US = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_LENGTH_IN_US;
  static constexpr AdaptedParameter LASER_PULSE_REPITION_RATE_IN_HZ = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_LASER_PULSE_REPITION_RATE_IN_HZ;
  static inline bool AdaptedParameter_IsValid(int value) {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_IsValid(value);
  }
  static constexpr AdaptedParameter AdaptedParameter_MIN = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MIN;
  static constexpr AdaptedParameter AdaptedParameter_MAX = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_MAX;
  static constexpr int AdaptedParameter_ARRAYSIZE = VectorBlock_LineSequenceParaAdapt_AdaptedParameter_AdaptedParameter_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AdaptedParameter_descriptor() {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
  }
  template <typename T>
  static inline const std::string& AdaptedParameter_Name(T value) {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Name(value);
  }
  static inline bool AdaptedParameter_Parse(absl::string_view name, AdaptedParameter* value) {
    return VectorBlock_LineSequenceParaAdapt_AdaptedParameter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointsWithParasFieldNumber = 1,
    kParameterFieldNumber = 2,
  };
  // repeated float points_with_paras = 1;
  int points_with_paras_size() const;
  private:
  int _internal_points_with_paras_size() const;

  public:
  void clear_points_with_paras() ;
  float points_with_paras(int index) const;
  void set_points_with_paras(int index, float value);
  void add_points_with_paras(float value);
  const ::google::protobuf::RepeatedField<float>& points_with_paras() const;
  ::google::protobuf::RepeatedField<float>* mutable_points_with_paras();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_points_with_paras() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_points_with_paras();

  public:
  // .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
  void clear_parameter() ;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter parameter() const;
  void set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value);

  private:
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter _internal_parameter() const;
  void _internal_set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.LineSequenceParaAdapt)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<float> points_with_paras_;
    int parameter_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock_HatchesParaAdapt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock.HatchesParaAdapt) */ {
 public:
  inline VectorBlock_HatchesParaAdapt() : VectorBlock_HatchesParaAdapt(nullptr) {}
  ~VectorBlock_HatchesParaAdapt() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock_HatchesParaAdapt(::google::protobuf::internal::ConstantInitialized);

  VectorBlock_HatchesParaAdapt(const VectorBlock_HatchesParaAdapt& from);
  VectorBlock_HatchesParaAdapt(VectorBlock_HatchesParaAdapt&& from) noexcept
    : VectorBlock_HatchesParaAdapt() {
    *this = ::std::move(from);
  }

  inline VectorBlock_HatchesParaAdapt& operator=(const VectorBlock_HatchesParaAdapt& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock_HatchesParaAdapt& operator=(VectorBlock_HatchesParaAdapt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock_HatchesParaAdapt& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBlock_HatchesParaAdapt* internal_default_instance() {
    return reinterpret_cast<const VectorBlock_HatchesParaAdapt*>(
               &_VectorBlock_HatchesParaAdapt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(VectorBlock_HatchesParaAdapt& a, VectorBlock_HatchesParaAdapt& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock_HatchesParaAdapt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock_HatchesParaAdapt* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock_HatchesParaAdapt* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock_HatchesParaAdapt>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock_HatchesParaAdapt& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock_HatchesParaAdapt& from) {
    VectorBlock_HatchesParaAdapt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock_HatchesParaAdapt* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock.HatchesParaAdapt";
  }
  protected:
  explicit VectorBlock_HatchesParaAdapt(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHatchAsLinesequenceFieldNumber = 1,
  };
  // repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
  int hatchaslinesequence_size() const;
  private:
  int _internal_hatchaslinesequence_size() const;

  public:
  void clear_hatchaslinesequence() ;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* mutable_hatchaslinesequence(int index);
  ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >*
      mutable_hatchaslinesequence();
  private:
  const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LineSequenceParaAdapt>& _internal_hatchaslinesequence() const;
  ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LineSequenceParaAdapt>* _internal_mutable_hatchaslinesequence();
  public:
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& hatchaslinesequence(int index) const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* add_hatchaslinesequence();
  const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >&
      hatchaslinesequence() const;
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock.HatchesParaAdapt)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt > hatchaslinesequence_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class VectorBlock final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.VectorBlock) */ {
 public:
  inline VectorBlock() : VectorBlock(nullptr) {}
  ~VectorBlock() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBlock(::google::protobuf::internal::ConstantInitialized);

  VectorBlock(const VectorBlock& from);
  VectorBlock(VectorBlock&& from) noexcept
    : VectorBlock() {
    *this = ::std::move(from);
  }

  inline VectorBlock& operator=(const VectorBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBlock& operator=(VectorBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBlock& default_instance() {
    return *internal_default_instance();
  }
  enum VectorDataCase {
    kLineSequence = 1,
    kHatches = 2,
    kPointSequence = 3,
    kArcs = 4,
    kEllipses = 5,
    kLineSequence3D = 6,
    kHatches3D = 7,
    kPointSequence3D = 8,
    kArcs3D = 9,
    kExposurePause = 10,
    kLineSequenceParaAdapt = 11,
    kHatchParaAdapt = 12,
    VECTOR_DATA_NOT_SET = 0,
  };

  enum ProcessMetaDataCase {
    kLpbfMetadata = 101,
    kMicroStructuringMetadata = 102,
    kPolishingMetadata = 103,
    PROCESS_META_DATA_NOT_SET = 0,
  };

  static inline const VectorBlock* internal_default_instance() {
    return reinterpret_cast<const VectorBlock*>(
               &_VectorBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(VectorBlock& a, VectorBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBlock* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBlock>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBlock& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBlock& from) {
    VectorBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorBlock* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.VectorBlock";
  }
  protected:
  explicit VectorBlock(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VectorBlock_VectorBlockMetaData VectorBlockMetaData;
  typedef VectorBlock_LPBFMetadata LPBFMetadata;
  typedef VectorBlock_MicroStructuringMetadata MicroStructuringMetadata;
  typedef VectorBlock_PolishingMetadata PolishingMetadata;
  typedef VectorBlock_LineSequence LineSequence;
  typedef VectorBlock_LineSequence3D LineSequence3D;
  typedef VectorBlock_Hatches Hatches;
  typedef VectorBlock_Hatches3D Hatches3D;
  typedef VectorBlock_PointSequence PointSequence;
  typedef VectorBlock_PointSequence3D PointSequence3D;
  typedef VectorBlock_Arcs Arcs;
  typedef VectorBlock_Arcs3D Arcs3D;
  typedef VectorBlock_Ellipses Ellipses;
  typedef VectorBlock_ExposurePause ExposurePause;
  typedef VectorBlock_LineSequenceParaAdapt LineSequenceParaAdapt;
  typedef VectorBlock_HatchesParaAdapt HatchesParaAdapt;

  using PartArea = VectorBlock_PartArea;
  static constexpr PartArea VOLUME = VectorBlock_PartArea_VOLUME;
  static constexpr PartArea CONTOUR = VectorBlock_PartArea_CONTOUR;
  static constexpr PartArea TRANSITION_CONTOUR = VectorBlock_PartArea_TRANSITION_CONTOUR;
  static inline bool PartArea_IsValid(int value) {
    return VectorBlock_PartArea_IsValid(value);
  }
  static constexpr PartArea PartArea_MIN = VectorBlock_PartArea_PartArea_MIN;
  static constexpr PartArea PartArea_MAX = VectorBlock_PartArea_PartArea_MAX;
  static constexpr int PartArea_ARRAYSIZE = VectorBlock_PartArea_PartArea_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PartArea_descriptor() {
    return VectorBlock_PartArea_descriptor();
  }
  template <typename T>
  static inline const std::string& PartArea_Name(T value) {
    return VectorBlock_PartArea_Name(value);
  }
  static inline bool PartArea_Parse(absl::string_view name, PartArea* value) {
    return VectorBlock_PartArea_Parse(name, value);
  }

  using StructureType = VectorBlock_StructureType;
  static constexpr StructureType PART = VectorBlock_StructureType_PART;
  static constexpr StructureType SUPPORT = VectorBlock_StructureType_SUPPORT;
  static constexpr StructureType WIRESTRUCTURE = VectorBlock_StructureType_WIRESTRUCTURE;
  static constexpr StructureType POINTS = VectorBlock_StructureType_POINTS;
  static inline bool StructureType_IsValid(int value) {
    return VectorBlock_StructureType_IsValid(value);
  }
  static constexpr StructureType StructureType_MIN = VectorBlock_StructureType_StructureType_MIN;
  static constexpr StructureType StructureType_MAX = VectorBlock_StructureType_StructureType_MAX;
  static constexpr int StructureType_ARRAYSIZE = VectorBlock_StructureType_StructureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* StructureType_descriptor() {
    return VectorBlock_StructureType_descriptor();
  }
  template <typename T>
  static inline const std::string& StructureType_Name(T value) {
    return VectorBlock_StructureType_Name(value);
  }
  static inline bool StructureType_Parse(absl::string_view name, StructureType* value) {
    return VectorBlock_StructureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaDataFieldNumber = 100,
    kMarkingParamsKeyFieldNumber = 50,
    kLaserIndexFieldNumber = 53,
    kRepeatsFieldNumber = 54,
    kLineSequenceFieldNumber = 1,
    kHatchesFieldNumber = 2,
    kPointSequenceFieldNumber = 3,
    kArcsFieldNumber = 4,
    kEllipsesFieldNumber = 5,
    kLineSequence3DFieldNumber = 6,
    kHatches3DFieldNumber = 7,
    kPointSequence3DFieldNumber = 8,
    kArcs3DFieldNumber = 9,
    kExposurePauseFieldNumber = 10,
    kLineSequenceParaAdaptFieldNumber = 11,
    kHatchParaAdaptFieldNumber = 12,
    kLpbfMetadataFieldNumber = 101,
    kMicroStructuringMetadataFieldNumber = 102,
    kPolishingMetadataFieldNumber = 103,
  };
  // .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
  bool has_meta_data() const;
  void clear_meta_data() ;
  const ::open_vector_format::VectorBlock_VectorBlockMetaData& meta_data() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_VectorBlockMetaData* release_meta_data();
  ::open_vector_format::VectorBlock_VectorBlockMetaData* mutable_meta_data();
  void set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* value);
  void unsafe_arena_set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* value);
  ::open_vector_format::VectorBlock_VectorBlockMetaData* unsafe_arena_release_meta_data();

  private:
  const ::open_vector_format::VectorBlock_VectorBlockMetaData& _internal_meta_data() const;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* _internal_mutable_meta_data();

  public:
  // int32 marking_params_key = 50;
  void clear_marking_params_key() ;
  ::int32_t marking_params_key() const;
  void set_marking_params_key(::int32_t value);

  private:
  ::int32_t _internal_marking_params_key() const;
  void _internal_set_marking_params_key(::int32_t value);

  public:
  // int32 laser_index = 53;
  void clear_laser_index() ;
  ::int32_t laser_index() const;
  void set_laser_index(::int32_t value);

  private:
  ::int32_t _internal_laser_index() const;
  void _internal_set_laser_index(::int32_t value);

  public:
  // uint64 repeats = 54;
  void clear_repeats() ;
  ::uint64_t repeats() const;
  void set_repeats(::uint64_t value);

  private:
  ::uint64_t _internal_repeats() const;
  void _internal_set_repeats(::uint64_t value);

  public:
  // .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
  bool has_line_sequence() const;
  private:
  bool _internal_has_line_sequence() const;

  public:
  void clear_line_sequence() ;
  const ::open_vector_format::VectorBlock_LineSequence& line_sequence() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_LineSequence* release_line_sequence();
  ::open_vector_format::VectorBlock_LineSequence* mutable_line_sequence();
  void set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* value);
  void unsafe_arena_set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* value);
  ::open_vector_format::VectorBlock_LineSequence* unsafe_arena_release_line_sequence();

  private:
  const ::open_vector_format::VectorBlock_LineSequence& _internal_line_sequence() const;
  ::open_vector_format::VectorBlock_LineSequence* _internal_mutable_line_sequence();

  public:
  // .open_vector_format.VectorBlock.Hatches _hatches = 2;
  bool has__hatches() const;
  private:
  bool _internal_has__hatches() const;

  public:
  void clear__hatches() ;
  const ::open_vector_format::VectorBlock_Hatches& _hatches() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Hatches* release__hatches();
  ::open_vector_format::VectorBlock_Hatches* mutable__hatches();
  void set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* value);
  void unsafe_arena_set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* value);
  ::open_vector_format::VectorBlock_Hatches* unsafe_arena_release__hatches();

  private:
  const ::open_vector_format::VectorBlock_Hatches& _internal__hatches() const;
  ::open_vector_format::VectorBlock_Hatches* _internal_mutable__hatches();

  public:
  // .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
  bool has_point_sequence() const;
  private:
  bool _internal_has_point_sequence() const;

  public:
  void clear_point_sequence() ;
  const ::open_vector_format::VectorBlock_PointSequence& point_sequence() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_PointSequence* release_point_sequence();
  ::open_vector_format::VectorBlock_PointSequence* mutable_point_sequence();
  void set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* value);
  void unsafe_arena_set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* value);
  ::open_vector_format::VectorBlock_PointSequence* unsafe_arena_release_point_sequence();

  private:
  const ::open_vector_format::VectorBlock_PointSequence& _internal_point_sequence() const;
  ::open_vector_format::VectorBlock_PointSequence* _internal_mutable_point_sequence();

  public:
  // .open_vector_format.VectorBlock.Arcs _arcs = 4;
  bool has__arcs() const;
  private:
  bool _internal_has__arcs() const;

  public:
  void clear__arcs() ;
  const ::open_vector_format::VectorBlock_Arcs& _arcs() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Arcs* release__arcs();
  ::open_vector_format::VectorBlock_Arcs* mutable__arcs();
  void set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* value);
  void unsafe_arena_set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* value);
  ::open_vector_format::VectorBlock_Arcs* unsafe_arena_release__arcs();

  private:
  const ::open_vector_format::VectorBlock_Arcs& _internal__arcs() const;
  ::open_vector_format::VectorBlock_Arcs* _internal_mutable__arcs();

  public:
  // .open_vector_format.VectorBlock.Ellipses ellipses = 5;
  bool has_ellipses() const;
  private:
  bool _internal_has_ellipses() const;

  public:
  void clear_ellipses() ;
  const ::open_vector_format::VectorBlock_Ellipses& ellipses() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Ellipses* release_ellipses();
  ::open_vector_format::VectorBlock_Ellipses* mutable_ellipses();
  void set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* value);
  void unsafe_arena_set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* value);
  ::open_vector_format::VectorBlock_Ellipses* unsafe_arena_release_ellipses();

  private:
  const ::open_vector_format::VectorBlock_Ellipses& _internal_ellipses() const;
  ::open_vector_format::VectorBlock_Ellipses* _internal_mutable_ellipses();

  public:
  // .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
  bool has_line_sequence_3d() const;
  private:
  bool _internal_has_line_sequence_3d() const;

  public:
  void clear_line_sequence_3d() ;
  const ::open_vector_format::VectorBlock_LineSequence3D& line_sequence_3d() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_LineSequence3D* release_line_sequence_3d();
  ::open_vector_format::VectorBlock_LineSequence3D* mutable_line_sequence_3d();
  void set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* value);
  void unsafe_arena_set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* value);
  ::open_vector_format::VectorBlock_LineSequence3D* unsafe_arena_release_line_sequence_3d();

  private:
  const ::open_vector_format::VectorBlock_LineSequence3D& _internal_line_sequence_3d() const;
  ::open_vector_format::VectorBlock_LineSequence3D* _internal_mutable_line_sequence_3d();

  public:
  // .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
  bool has_hatches_3d() const;
  private:
  bool _internal_has_hatches_3d() const;

  public:
  void clear_hatches_3d() ;
  const ::open_vector_format::VectorBlock_Hatches3D& hatches_3d() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Hatches3D* release_hatches_3d();
  ::open_vector_format::VectorBlock_Hatches3D* mutable_hatches_3d();
  void set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* value);
  void unsafe_arena_set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* value);
  ::open_vector_format::VectorBlock_Hatches3D* unsafe_arena_release_hatches_3d();

  private:
  const ::open_vector_format::VectorBlock_Hatches3D& _internal_hatches_3d() const;
  ::open_vector_format::VectorBlock_Hatches3D* _internal_mutable_hatches_3d();

  public:
  // .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
  bool has_point_sequence_3d() const;
  private:
  bool _internal_has_point_sequence_3d() const;

  public:
  void clear_point_sequence_3d() ;
  const ::open_vector_format::VectorBlock_PointSequence3D& point_sequence_3d() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_PointSequence3D* release_point_sequence_3d();
  ::open_vector_format::VectorBlock_PointSequence3D* mutable_point_sequence_3d();
  void set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* value);
  void unsafe_arena_set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* value);
  ::open_vector_format::VectorBlock_PointSequence3D* unsafe_arena_release_point_sequence_3d();

  private:
  const ::open_vector_format::VectorBlock_PointSequence3D& _internal_point_sequence_3d() const;
  ::open_vector_format::VectorBlock_PointSequence3D* _internal_mutable_point_sequence_3d();

  public:
  // .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
  bool has_arcs_3d() const;
  private:
  bool _internal_has_arcs_3d() const;

  public:
  void clear_arcs_3d() ;
  const ::open_vector_format::VectorBlock_Arcs3D& arcs_3d() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_Arcs3D* release_arcs_3d();
  ::open_vector_format::VectorBlock_Arcs3D* mutable_arcs_3d();
  void set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* value);
  void unsafe_arena_set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* value);
  ::open_vector_format::VectorBlock_Arcs3D* unsafe_arena_release_arcs_3d();

  private:
  const ::open_vector_format::VectorBlock_Arcs3D& _internal_arcs_3d() const;
  ::open_vector_format::VectorBlock_Arcs3D* _internal_mutable_arcs_3d();

  public:
  // .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
  bool has_exposure_pause() const;
  private:
  bool _internal_has_exposure_pause() const;

  public:
  void clear_exposure_pause() ;
  const ::open_vector_format::VectorBlock_ExposurePause& exposure_pause() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_ExposurePause* release_exposure_pause();
  ::open_vector_format::VectorBlock_ExposurePause* mutable_exposure_pause();
  void set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* value);
  void unsafe_arena_set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* value);
  ::open_vector_format::VectorBlock_ExposurePause* unsafe_arena_release_exposure_pause();

  private:
  const ::open_vector_format::VectorBlock_ExposurePause& _internal_exposure_pause() const;
  ::open_vector_format::VectorBlock_ExposurePause* _internal_mutable_exposure_pause();

  public:
  // .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
  bool has_line_sequence_para_adapt() const;
  private:
  bool _internal_has_line_sequence_para_adapt() const;

  public:
  void clear_line_sequence_para_adapt() ;
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& line_sequence_para_adapt() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_LineSequenceParaAdapt* release_line_sequence_para_adapt();
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* mutable_line_sequence_para_adapt();
  void set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* value);
  void unsafe_arena_set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* value);
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* unsafe_arena_release_line_sequence_para_adapt();

  private:
  const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& _internal_line_sequence_para_adapt() const;
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* _internal_mutable_line_sequence_para_adapt();

  public:
  // .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
  bool has__hatchparaadapt() const;
  private:
  bool _internal_has__hatchparaadapt() const;

  public:
  void clear__hatchparaadapt() ;
  const ::open_vector_format::VectorBlock_HatchesParaAdapt& _hatchparaadapt() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_HatchesParaAdapt* release__hatchparaadapt();
  ::open_vector_format::VectorBlock_HatchesParaAdapt* mutable__hatchparaadapt();
  void set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* value);
  void unsafe_arena_set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* value);
  ::open_vector_format::VectorBlock_HatchesParaAdapt* unsafe_arena_release__hatchparaadapt();

  private:
  const ::open_vector_format::VectorBlock_HatchesParaAdapt& _internal__hatchparaadapt() const;
  ::open_vector_format::VectorBlock_HatchesParaAdapt* _internal_mutable__hatchparaadapt();

  public:
  // .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
  bool has_lpbf_metadata() const;
  private:
  bool _internal_has_lpbf_metadata() const;

  public:
  void clear_lpbf_metadata() ;
  const ::open_vector_format::VectorBlock_LPBFMetadata& lpbf_metadata() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_LPBFMetadata* release_lpbf_metadata();
  ::open_vector_format::VectorBlock_LPBFMetadata* mutable_lpbf_metadata();
  void set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* value);
  void unsafe_arena_set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* value);
  ::open_vector_format::VectorBlock_LPBFMetadata* unsafe_arena_release_lpbf_metadata();

  private:
  const ::open_vector_format::VectorBlock_LPBFMetadata& _internal_lpbf_metadata() const;
  ::open_vector_format::VectorBlock_LPBFMetadata* _internal_mutable_lpbf_metadata();

  public:
  // .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
  bool has_micro_structuring_metadata() const;
  private:
  bool _internal_has_micro_structuring_metadata() const;

  public:
  void clear_micro_structuring_metadata() ;
  const ::open_vector_format::VectorBlock_MicroStructuringMetadata& micro_structuring_metadata() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_MicroStructuringMetadata* release_micro_structuring_metadata();
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* mutable_micro_structuring_metadata();
  void set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* value);
  void unsafe_arena_set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* value);
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* unsafe_arena_release_micro_structuring_metadata();

  private:
  const ::open_vector_format::VectorBlock_MicroStructuringMetadata& _internal_micro_structuring_metadata() const;
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* _internal_mutable_micro_structuring_metadata();

  public:
  // .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
  bool has_polishing_metadata() const;
  private:
  bool _internal_has_polishing_metadata() const;

  public:
  void clear_polishing_metadata() ;
  const ::open_vector_format::VectorBlock_PolishingMetadata& polishing_metadata() const;
  PROTOBUF_NODISCARD ::open_vector_format::VectorBlock_PolishingMetadata* release_polishing_metadata();
  ::open_vector_format::VectorBlock_PolishingMetadata* mutable_polishing_metadata();
  void set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* value);
  void unsafe_arena_set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* value);
  ::open_vector_format::VectorBlock_PolishingMetadata* unsafe_arena_release_polishing_metadata();

  private:
  const ::open_vector_format::VectorBlock_PolishingMetadata& _internal_polishing_metadata() const;
  ::open_vector_format::VectorBlock_PolishingMetadata* _internal_mutable_polishing_metadata();

  public:
  void clear_vector_data();
  VectorDataCase vector_data_case() const;
  void clear_process_meta_data();
  ProcessMetaDataCase process_meta_data_case() const;
  // @@protoc_insertion_point(class_scope:open_vector_format.VectorBlock)
 private:
  class _Internal;
  void set_has_line_sequence();
  void set_has__hatches();
  void set_has_point_sequence();
  void set_has__arcs();
  void set_has_ellipses();
  void set_has_line_sequence_3d();
  void set_has_hatches_3d();
  void set_has_point_sequence_3d();
  void set_has_arcs_3d();
  void set_has_exposure_pause();
  void set_has_line_sequence_para_adapt();
  void set_has__hatchparaadapt();
  void set_has_lpbf_metadata();
  void set_has_micro_structuring_metadata();
  void set_has_polishing_metadata();

  inline bool has_vector_data() const;
  inline void clear_has_vector_data();

  inline bool has_process_meta_data() const;
  inline void clear_has_process_meta_data();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 19, 16, 0, 13> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::open_vector_format::VectorBlock_VectorBlockMetaData* meta_data_;
    ::int32_t marking_params_key_;
    ::int32_t laser_index_;
    ::uint64_t repeats_;
    union VectorDataUnion {
      constexpr VectorDataUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::open_vector_format::VectorBlock_LineSequence* line_sequence_;
      ::open_vector_format::VectorBlock_Hatches* _hatches_;
      ::open_vector_format::VectorBlock_PointSequence* point_sequence_;
      ::open_vector_format::VectorBlock_Arcs* _arcs_;
      ::open_vector_format::VectorBlock_Ellipses* ellipses_;
      ::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d_;
      ::open_vector_format::VectorBlock_Hatches3D* hatches_3d_;
      ::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d_;
      ::open_vector_format::VectorBlock_Arcs3D* arcs_3d_;
      ::open_vector_format::VectorBlock_ExposurePause* exposure_pause_;
      ::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt_;
      ::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt_;
    } vector_data_;
    union ProcessMetaDataUnion {
      constexpr ProcessMetaDataUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata_;
      ::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata_;
      ::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata_;
    } process_meta_data_;
    ::uint32_t _oneof_case_[2];

    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};// -------------------------------------------------------------------

class AxisAlignedBox2D final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_vector_format.AxisAlignedBox2D) */ {
 public:
  inline AxisAlignedBox2D() : AxisAlignedBox2D(nullptr) {}
  ~AxisAlignedBox2D() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AxisAlignedBox2D(::google::protobuf::internal::ConstantInitialized);

  AxisAlignedBox2D(const AxisAlignedBox2D& from);
  AxisAlignedBox2D(AxisAlignedBox2D&& from) noexcept
    : AxisAlignedBox2D() {
    *this = ::std::move(from);
  }

  inline AxisAlignedBox2D& operator=(const AxisAlignedBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxisAlignedBox2D& operator=(AxisAlignedBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AxisAlignedBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const AxisAlignedBox2D* internal_default_instance() {
    return reinterpret_cast<const AxisAlignedBox2D*>(
               &_AxisAlignedBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AxisAlignedBox2D& a, AxisAlignedBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(AxisAlignedBox2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AxisAlignedBox2D* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AxisAlignedBox2D* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AxisAlignedBox2D>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AxisAlignedBox2D& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AxisAlignedBox2D& from) {
    AxisAlignedBox2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisAlignedBox2D* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "open_vector_format.AxisAlignedBox2D";
  }
  protected:
  explicit AxisAlignedBox2D(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMinFieldNumber = 1,
    kYMinFieldNumber = 2,
    kXMaxFieldNumber = 3,
    kYMaxFieldNumber = 4,
  };
  // float x_min = 1;
  void clear_x_min() ;
  float x_min() const;
  void set_x_min(float value);

  private:
  float _internal_x_min() const;
  void _internal_set_x_min(float value);

  public:
  // float y_min = 2;
  void clear_y_min() ;
  float y_min() const;
  void set_y_min(float value);

  private:
  float _internal_y_min() const;
  void _internal_set_y_min(float value);

  public:
  // float x_max = 3;
  void clear_x_max() ;
  float x_max() const;
  void set_x_max(float value);

  private:
  float _internal_x_max() const;
  void _internal_set_x_max(float value);

  public:
  // float y_max = 4;
  void clear_y_max() ;
  float y_max() const;
  void set_y_max(float value);

  private:
  float _internal_y_max() const;
  void _internal_set_y_max(float value);

  public:
  // @@protoc_insertion_point(class_scope:open_vector_format.AxisAlignedBox2D)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_min_;
    float y_min_;
    float x_max_;
    float y_max_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_open_5fvector_5fformat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Job_JobMetaData

// int64 job_creation_time = 1;
inline void Job_JobMetaData::clear_job_creation_time() {
  _impl_.job_creation_time_ = ::int64_t{0};
}
inline ::int64_t Job_JobMetaData::job_creation_time() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.job_creation_time)
  return _internal_job_creation_time();
}
inline void Job_JobMetaData::set_job_creation_time(::int64_t value) {
  _internal_set_job_creation_time(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.job_creation_time)
}
inline ::int64_t Job_JobMetaData::_internal_job_creation_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.job_creation_time_;
}
inline void Job_JobMetaData::_internal_set_job_creation_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.job_creation_time_ = value;
}

// uint64 version = 2;
inline void Job_JobMetaData::clear_version() {
  _impl_.version_ = ::uint64_t{0u};
}
inline ::uint64_t Job_JobMetaData::version() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.version)
  return _internal_version();
}
inline void Job_JobMetaData::set_version(::uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.version)
}
inline ::uint64_t Job_JobMetaData::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_;
}
inline void Job_JobMetaData::_internal_set_version(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

// string job_name = 3;
inline void Job_JobMetaData::clear_job_name() {
  _impl_.job_name_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::job_name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.job_name)
  return _internal_job_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Job_JobMetaData::set_job_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.job_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.job_name)
}
inline std::string* Job_JobMetaData::mutable_job_name() {
  std::string* _s = _internal_mutable_job_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.job_name)
  return _s;
}
inline const std::string& Job_JobMetaData::_internal_job_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.job_name_.Get();
}
inline void Job_JobMetaData::_internal_set_job_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::_internal_mutable_job_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.job_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::release_job_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.job_name)
  return _impl_.job_name_.Release();
}
inline void Job_JobMetaData::set_allocated_job_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.job_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.job_name_.IsDefault()) {
          _impl_.job_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.job_name)
}

// string author = 4;
inline void Job_JobMetaData::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::author() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.author)
  return _internal_author();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Job_JobMetaData::set_author(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.author)
}
inline std::string* Job_JobMetaData::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.author)
  return _s;
}
inline const std::string& Job_JobMetaData::_internal_author() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.author_.Get();
}
inline void Job_JobMetaData::_internal_set_author(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::_internal_mutable_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.author_.Mutable( GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::release_author() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.author)
  return _impl_.author_.Release();
}
inline void Job_JobMetaData::set_allocated_author(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.author_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.author_.IsDefault()) {
          _impl_.author_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.author)
}

// string description = 5;
inline void Job_JobMetaData::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Job_JobMetaData::description() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Job_JobMetaData::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Job.JobMetaData.description)
}
inline std::string* Job_JobMetaData::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.description)
  return _s;
}
inline const std::string& Job_JobMetaData::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void Job_JobMetaData::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Job_JobMetaData::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.description)
  return _impl_.description_.Release();
}
inline void Job_JobMetaData::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.description)
}

// .open_vector_format.AxisAlignedBox2D bounds = 6;
inline bool Job_JobMetaData::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline void Job_JobMetaData::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::AxisAlignedBox2D& Job_JobMetaData::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::AxisAlignedBox2D* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::AxisAlignedBox2D&>(::open_vector_format::_AxisAlignedBox2D_default_instance_);
}
inline const ::open_vector_format::AxisAlignedBox2D& Job_JobMetaData::bounds() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.JobMetaData.bounds)
  return _internal_bounds();
}
inline void Job_JobMetaData::unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Job.JobMetaData.bounds)
}
inline ::open_vector_format::AxisAlignedBox2D* Job_JobMetaData::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::AxisAlignedBox2D* Job_JobMetaData::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.JobMetaData.bounds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::open_vector_format::AxisAlignedBox2D* Job_JobMetaData::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::AxisAlignedBox2D>(GetArenaForAllocation());
    _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(p);
  }
  return _impl_.bounds_;
}
inline ::open_vector_format::AxisAlignedBox2D* Job_JobMetaData::mutable_bounds() {
  ::open_vector_format::AxisAlignedBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.JobMetaData.bounds)
  return _msg;
}
inline void Job_JobMetaData::set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.JobMetaData.bounds)
}

// -------------------------------------------------------------------

// Job

// repeated .open_vector_format.WorkPlane work_planes = 1;
inline int Job::_internal_work_planes_size() const {
  return _internal_work_planes().size();
}
inline int Job::work_planes_size() const {
  return _internal_work_planes_size();
}
inline void Job::clear_work_planes() {
  _internal_mutable_work_planes()->Clear();
}
inline ::open_vector_format::WorkPlane* Job::mutable_work_planes(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.work_planes)
  return _internal_mutable_work_planes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane >*
Job::mutable_work_planes() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.Job.work_planes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_work_planes();
}
inline const ::open_vector_format::WorkPlane& Job::work_planes(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.work_planes)
    return _internal_work_planes().Get(index);
}
inline ::open_vector_format::WorkPlane* Job::add_work_planes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::WorkPlane* _add = _internal_mutable_work_planes()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.Job.work_planes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane >&
Job::work_planes() const {
  // @@protoc_insertion_point(field_list:open_vector_format.Job.work_planes)
  return _internal_work_planes();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane>&
Job::_internal_work_planes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.work_planes_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane>*
Job::_internal_mutable_work_planes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.work_planes_;
}

// .open_vector_format.Job.JobMetaData job_meta_data = 2;
inline bool Job::has_job_meta_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.job_meta_data_ != nullptr);
  return value;
}
inline void Job::clear_job_meta_data() {
  if (_impl_.job_meta_data_ != nullptr) _impl_.job_meta_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::Job_JobMetaData& Job::_internal_job_meta_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Job_JobMetaData* p = _impl_.job_meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Job_JobMetaData&>(::open_vector_format::_Job_JobMetaData_default_instance_);
}
inline const ::open_vector_format::Job_JobMetaData& Job::job_meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.job_meta_data)
  return _internal_job_meta_data();
}
inline void Job::unsafe_arena_set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.job_meta_data_);
  }
  _impl_.job_meta_data_ = reinterpret_cast<::open_vector_format::Job_JobMetaData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Job.job_meta_data)
}
inline ::open_vector_format::Job_JobMetaData* Job::release_job_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::Job_JobMetaData* released = _impl_.job_meta_data_;
  _impl_.job_meta_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Job_JobMetaData* Job::unsafe_arena_release_job_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.job_meta_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::Job_JobMetaData* temp = _impl_.job_meta_data_;
  _impl_.job_meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::Job_JobMetaData* Job::_internal_mutable_job_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.job_meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Job_JobMetaData>(GetArenaForAllocation());
    _impl_.job_meta_data_ = reinterpret_cast<::open_vector_format::Job_JobMetaData*>(p);
  }
  return _impl_.job_meta_data_;
}
inline ::open_vector_format::Job_JobMetaData* Job::mutable_job_meta_data() {
  ::open_vector_format::Job_JobMetaData* _msg = _internal_mutable_job_meta_data();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.job_meta_data)
  return _msg;
}
inline void Job::set_allocated_job_meta_data(::open_vector_format::Job_JobMetaData* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Job_JobMetaData*>(_impl_.job_meta_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Job_JobMetaData*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.job_meta_data_ = reinterpret_cast<::open_vector_format::Job_JobMetaData*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.job_meta_data)
}

// map<int32, .open_vector_format.MarkingParams> marking_params_map = 3;
inline int Job::_internal_marking_params_map_size() const {
  return _internal_marking_params_map().size();
}
inline int Job::marking_params_map_size() const {
  return _internal_marking_params_map_size();
}
inline void Job::clear_marking_params_map() {
  _impl_.marking_params_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>& Job::_internal_marking_params_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.marking_params_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>& Job::marking_params_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.Job.marking_params_map)
  return _internal_marking_params_map();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>* Job::_internal_mutable_marking_params_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.marking_params_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::MarkingParams>* Job::mutable_marking_params_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.Job.marking_params_map)
  return _internal_mutable_marking_params_map();
}

// map<int32, .open_vector_format.Part> parts_map = 4;
inline int Job::_internal_parts_map_size() const {
  return _internal_parts_map().size();
}
inline int Job::parts_map_size() const {
  return _internal_parts_map_size();
}
inline void Job::clear_parts_map() {
  _impl_.parts_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>& Job::_internal_parts_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parts_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>& Job::parts_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.Job.parts_map)
  return _internal_parts_map();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>* Job::_internal_mutable_parts_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.parts_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::Part>* Job::mutable_parts_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.Job.parts_map)
  return _internal_mutable_parts_map();
}

// .open_vector_format.JobParameters job_parameters = 5;
inline bool Job::has_job_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.job_parameters_ != nullptr);
  return value;
}
inline void Job::clear_job_parameters() {
  if (_impl_.job_parameters_ != nullptr) _impl_.job_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::open_vector_format::JobParameters& Job::_internal_job_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::JobParameters* p = _impl_.job_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::JobParameters&>(::open_vector_format::_JobParameters_default_instance_);
}
inline const ::open_vector_format::JobParameters& Job::job_parameters() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.job_parameters)
  return _internal_job_parameters();
}
inline void Job::unsafe_arena_set_allocated_job_parameters(::open_vector_format::JobParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.job_parameters_);
  }
  _impl_.job_parameters_ = reinterpret_cast<::open_vector_format::JobParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Job.job_parameters)
}
inline ::open_vector_format::JobParameters* Job::release_job_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::open_vector_format::JobParameters* released = _impl_.job_parameters_;
  _impl_.job_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::JobParameters* Job::unsafe_arena_release_job_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Job.job_parameters)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::open_vector_format::JobParameters* temp = _impl_.job_parameters_;
  _impl_.job_parameters_ = nullptr;
  return temp;
}
inline ::open_vector_format::JobParameters* Job::_internal_mutable_job_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.job_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::JobParameters>(GetArenaForAllocation());
    _impl_.job_parameters_ = reinterpret_cast<::open_vector_format::JobParameters*>(p);
  }
  return _impl_.job_parameters_;
}
inline ::open_vector_format::JobParameters* Job::mutable_job_parameters() {
  ::open_vector_format::JobParameters* _msg = _internal_mutable_job_parameters();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Job.job_parameters)
  return _msg;
}
inline void Job::set_allocated_job_parameters(::open_vector_format::JobParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::JobParameters*>(_impl_.job_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::JobParameters*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.job_parameters_ = reinterpret_cast<::open_vector_format::JobParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Job.job_parameters)
}

// int32 num_work_planes = 6;
inline void Job::clear_num_work_planes() {
  _impl_.num_work_planes_ = 0;
}
inline ::int32_t Job::num_work_planes() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Job.num_work_planes)
  return _internal_num_work_planes();
}
inline void Job::set_num_work_planes(::int32_t value) {
  _internal_set_num_work_planes(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Job.num_work_planes)
}
inline ::int32_t Job::_internal_num_work_planes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_work_planes_;
}
inline void Job::_internal_set_num_work_planes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_work_planes_ = value;
}

// -------------------------------------------------------------------

// JobParameters

// double preheating_temperatur_in_dg_c = 1;
inline void JobParameters::clear_preheating_temperatur_in_dg_c() {
  _impl_.preheating_temperatur_in_dg_c_ = 0;
}
inline double JobParameters::preheating_temperatur_in_dg_c() const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.preheating_temperatur_in_dg_c)
  return _internal_preheating_temperatur_in_dg_c();
}
inline void JobParameters::set_preheating_temperatur_in_dg_c(double value) {
  _internal_set_preheating_temperatur_in_dg_c(value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.preheating_temperatur_in_dg_c)
}
inline double JobParameters::_internal_preheating_temperatur_in_dg_c() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preheating_temperatur_in_dg_c_;
}
inline void JobParameters::_internal_set_preheating_temperatur_in_dg_c(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.preheating_temperatur_in_dg_c_ = value;
}

// repeated double shielding_gas_directions = 2;
inline int JobParameters::_internal_shielding_gas_directions_size() const {
  return _internal_shielding_gas_directions().size();
}
inline int JobParameters::shielding_gas_directions_size() const {
  return _internal_shielding_gas_directions_size();
}
inline void JobParameters::clear_shielding_gas_directions() {
  _internal_mutable_shielding_gas_directions()->Clear();
}
inline double JobParameters::shielding_gas_directions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.shielding_gas_directions)
  return _internal_shielding_gas_directions().Get(index);
}
inline void JobParameters::set_shielding_gas_directions(int index, double value) {
  _internal_mutable_shielding_gas_directions()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.shielding_gas_directions)
}
inline void JobParameters::add_shielding_gas_directions(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_shielding_gas_directions()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.JobParameters.shielding_gas_directions)
}
inline const ::google::protobuf::RepeatedField<double>& JobParameters::shielding_gas_directions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.JobParameters.shielding_gas_directions)
  return _internal_shielding_gas_directions();
}
inline ::google::protobuf::RepeatedField<double>* JobParameters::mutable_shielding_gas_directions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.JobParameters.shielding_gas_directions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shielding_gas_directions();
}

inline const ::google::protobuf::RepeatedField<double>& JobParameters::_internal_shielding_gas_directions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shielding_gas_directions_;
}
inline ::google::protobuf::RepeatedField<double>* JobParameters::_internal_mutable_shielding_gas_directions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shielding_gas_directions_;
}

// repeated double material_feed_directions = 3;
inline int JobParameters::_internal_material_feed_directions_size() const {
  return _internal_material_feed_directions().size();
}
inline int JobParameters::material_feed_directions_size() const {
  return _internal_material_feed_directions_size();
}
inline void JobParameters::clear_material_feed_directions() {
  _internal_mutable_material_feed_directions()->Clear();
}
inline double JobParameters::material_feed_directions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.JobParameters.material_feed_directions)
  return _internal_material_feed_directions().Get(index);
}
inline void JobParameters::set_material_feed_directions(int index, double value) {
  _internal_mutable_material_feed_directions()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.JobParameters.material_feed_directions)
}
inline void JobParameters::add_material_feed_directions(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_material_feed_directions()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.JobParameters.material_feed_directions)
}
inline const ::google::protobuf::RepeatedField<double>& JobParameters::material_feed_directions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.JobParameters.material_feed_directions)
  return _internal_material_feed_directions();
}
inline ::google::protobuf::RepeatedField<double>* JobParameters::mutable_material_feed_directions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.JobParameters.material_feed_directions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_material_feed_directions();
}

inline const ::google::protobuf::RepeatedField<double>& JobParameters::_internal_material_feed_directions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.material_feed_directions_;
}
inline ::google::protobuf::RepeatedField<double>* JobParameters::_internal_mutable_material_feed_directions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.material_feed_directions_;
}

// -------------------------------------------------------------------

// MarkingParams

// float laser_power_in_w = 1;
inline void MarkingParams::clear_laser_power_in_w() {
  _impl_.laser_power_in_w_ = 0;
}
inline float MarkingParams::laser_power_in_w() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_power_in_w)
  return _internal_laser_power_in_w();
}
inline void MarkingParams::set_laser_power_in_w(float value) {
  _internal_set_laser_power_in_w(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_power_in_w)
}
inline float MarkingParams::_internal_laser_power_in_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_power_in_w_;
}
inline void MarkingParams::_internal_set_laser_power_in_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_power_in_w_ = value;
}

// float laser_speed_in_mm_per_s = 2;
inline void MarkingParams::clear_laser_speed_in_mm_per_s() {
  _impl_.laser_speed_in_mm_per_s_ = 0;
}
inline float MarkingParams::laser_speed_in_mm_per_s() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_speed_in_mm_per_s)
  return _internal_laser_speed_in_mm_per_s();
}
inline void MarkingParams::set_laser_speed_in_mm_per_s(float value) {
  _internal_set_laser_speed_in_mm_per_s(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_speed_in_mm_per_s)
}
inline float MarkingParams::_internal_laser_speed_in_mm_per_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_speed_in_mm_per_s_;
}
inline void MarkingParams::_internal_set_laser_speed_in_mm_per_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_speed_in_mm_per_s_ = value;
}

// float laser_focus_shift_in_mm = 3;
inline void MarkingParams::clear_laser_focus_shift_in_mm() {
  _impl_.laser_focus_shift_in_mm_ = 0;
}
inline float MarkingParams::laser_focus_shift_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_focus_shift_in_mm)
  return _internal_laser_focus_shift_in_mm();
}
inline void MarkingParams::set_laser_focus_shift_in_mm(float value) {
  _internal_set_laser_focus_shift_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_focus_shift_in_mm)
}
inline float MarkingParams::_internal_laser_focus_shift_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_focus_shift_in_mm_;
}
inline void MarkingParams::_internal_set_laser_focus_shift_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_focus_shift_in_mm_ = value;
}

// float point_exposure_time_in_us = 4;
inline void MarkingParams::clear_point_exposure_time_in_us() {
  _impl_.point_exposure_time_in_us_ = 0;
}
inline float MarkingParams::point_exposure_time_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.point_exposure_time_in_us)
  return _internal_point_exposure_time_in_us();
}
inline void MarkingParams::set_point_exposure_time_in_us(float value) {
  _internal_set_point_exposure_time_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.point_exposure_time_in_us)
}
inline float MarkingParams::_internal_point_exposure_time_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_exposure_time_in_us_;
}
inline void MarkingParams::_internal_set_point_exposure_time_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_exposure_time_in_us_ = value;
}

// float jump_speed_in_mm_s = 5;
inline void MarkingParams::clear_jump_speed_in_mm_s() {
  _impl_.jump_speed_in_mm_s_ = 0;
}
inline float MarkingParams::jump_speed_in_mm_s() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.jump_speed_in_mm_s)
  return _internal_jump_speed_in_mm_s();
}
inline void MarkingParams::set_jump_speed_in_mm_s(float value) {
  _internal_set_jump_speed_in_mm_s(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.jump_speed_in_mm_s)
}
inline float MarkingParams::_internal_jump_speed_in_mm_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jump_speed_in_mm_s_;
}
inline void MarkingParams::_internal_set_jump_speed_in_mm_s(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_speed_in_mm_s_ = value;
}

// float point_exposure_repetitions = 6;
inline void MarkingParams::clear_point_exposure_repetitions() {
  _impl_.point_exposure_repetitions_ = 0;
}
inline float MarkingParams::point_exposure_repetitions() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.point_exposure_repetitions)
  return _internal_point_exposure_repetitions();
}
inline void MarkingParams::set_point_exposure_repetitions(float value) {
  _internal_set_point_exposure_repetitions(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.point_exposure_repetitions)
}
inline float MarkingParams::_internal_point_exposure_repetitions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_exposure_repetitions_;
}
inline void MarkingParams::_internal_set_point_exposure_repetitions(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_exposure_repetitions_ = value;
}

// uint64 repetition_rate_in_hz = 7;
inline void MarkingParams::clear_repetition_rate_in_hz() {
  _impl_.repetition_rate_in_hz_ = ::uint64_t{0u};
}
inline ::uint64_t MarkingParams::repetition_rate_in_hz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.repetition_rate_in_hz)
  return _internal_repetition_rate_in_hz();
}
inline void MarkingParams::set_repetition_rate_in_hz(::uint64_t value) {
  _internal_set_repetition_rate_in_hz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.repetition_rate_in_hz)
}
inline ::uint64_t MarkingParams::_internal_repetition_rate_in_hz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repetition_rate_in_hz_;
}
inline void MarkingParams::_internal_set_repetition_rate_in_hz(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repetition_rate_in_hz_ = value;
}

// uint64 laser_pulses_per_burst = 8;
inline void MarkingParams::clear_laser_pulses_per_burst() {
  _impl_.laser_pulses_per_burst_ = ::uint64_t{0u};
}
inline ::uint64_t MarkingParams::laser_pulses_per_burst() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_pulses_per_burst)
  return _internal_laser_pulses_per_burst();
}
inline void MarkingParams::set_laser_pulses_per_burst(::uint64_t value) {
  _internal_set_laser_pulses_per_burst(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_pulses_per_burst)
}
inline ::uint64_t MarkingParams::_internal_laser_pulses_per_burst() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_pulses_per_burst_;
}
inline void MarkingParams::_internal_set_laser_pulses_per_burst(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_pulses_per_burst_ = value;
}

// uint64 pulseDurationInFemtoseconds = 9;
inline void MarkingParams::clear_pulsedurationinfemtoseconds() {
  _impl_.pulsedurationinfemtoseconds_ = ::uint64_t{0u};
}
inline ::uint64_t MarkingParams::pulsedurationinfemtoseconds() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.pulseDurationInFemtoseconds)
  return _internal_pulsedurationinfemtoseconds();
}
inline void MarkingParams::set_pulsedurationinfemtoseconds(::uint64_t value) {
  _internal_set_pulsedurationinfemtoseconds(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.pulseDurationInFemtoseconds)
}
inline ::uint64_t MarkingParams::_internal_pulsedurationinfemtoseconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pulsedurationinfemtoseconds_;
}
inline void MarkingParams::_internal_set_pulsedurationinfemtoseconds(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pulsedurationinfemtoseconds_ = value;
}

// .open_vector_format.MarkingParams.MarkingMode marking_mode = 10;
inline void MarkingParams::clear_marking_mode() {
  _impl_.marking_mode_ = 0;
}
inline ::open_vector_format::MarkingParams_MarkingMode MarkingParams::marking_mode() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.marking_mode)
  return _internal_marking_mode();
}
inline void MarkingParams::set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value) {
  _internal_set_marking_mode(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.marking_mode)
}
inline ::open_vector_format::MarkingParams_MarkingMode MarkingParams::_internal_marking_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::MarkingParams_MarkingMode>(_impl_.marking_mode_);
}
inline void MarkingParams::_internal_set_marking_mode(::open_vector_format::MarkingParams_MarkingMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.marking_mode_ = value;
}

// float jump_delay_in_us = 11;
inline void MarkingParams::clear_jump_delay_in_us() {
  _impl_.jump_delay_in_us_ = 0;
}
inline float MarkingParams::jump_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.jump_delay_in_us)
  return _internal_jump_delay_in_us();
}
inline void MarkingParams::set_jump_delay_in_us(float value) {
  _internal_set_jump_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.jump_delay_in_us)
}
inline float MarkingParams::_internal_jump_delay_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jump_delay_in_us_;
}
inline void MarkingParams::_internal_set_jump_delay_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jump_delay_in_us_ = value;
}

// float laser_off_delay_in_us = 12;
inline void MarkingParams::clear_laser_off_delay_in_us() {
  _impl_.laser_off_delay_in_us_ = 0;
}
inline float MarkingParams::laser_off_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_off_delay_in_us)
  return _internal_laser_off_delay_in_us();
}
inline void MarkingParams::set_laser_off_delay_in_us(float value) {
  _internal_set_laser_off_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_off_delay_in_us)
}
inline float MarkingParams::_internal_laser_off_delay_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_off_delay_in_us_;
}
inline void MarkingParams::_internal_set_laser_off_delay_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_off_delay_in_us_ = value;
}

// float laser_on_delay_in_us = 13;
inline void MarkingParams::clear_laser_on_delay_in_us() {
  _impl_.laser_on_delay_in_us_ = 0;
}
inline float MarkingParams::laser_on_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_on_delay_in_us)
  return _internal_laser_on_delay_in_us();
}
inline void MarkingParams::set_laser_on_delay_in_us(float value) {
  _internal_set_laser_on_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_on_delay_in_us)
}
inline float MarkingParams::_internal_laser_on_delay_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_on_delay_in_us_;
}
inline void MarkingParams::_internal_set_laser_on_delay_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_on_delay_in_us_ = value;
}

// float mark_delay_in_us = 14;
inline void MarkingParams::clear_mark_delay_in_us() {
  _impl_.mark_delay_in_us_ = 0;
}
inline float MarkingParams::mark_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.mark_delay_in_us)
  return _internal_mark_delay_in_us();
}
inline void MarkingParams::set_mark_delay_in_us(float value) {
  _internal_set_mark_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.mark_delay_in_us)
}
inline float MarkingParams::_internal_mark_delay_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mark_delay_in_us_;
}
inline void MarkingParams::_internal_set_mark_delay_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mark_delay_in_us_ = value;
}

// float polygon_delay_in_us = 15;
inline void MarkingParams::clear_polygon_delay_in_us() {
  _impl_.polygon_delay_in_us_ = 0;
}
inline float MarkingParams::polygon_delay_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.polygon_delay_in_us)
  return _internal_polygon_delay_in_us();
}
inline void MarkingParams::set_polygon_delay_in_us(float value) {
  _internal_set_polygon_delay_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.polygon_delay_in_us)
}
inline float MarkingParams::_internal_polygon_delay_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.polygon_delay_in_us_;
}
inline void MarkingParams::_internal_set_polygon_delay_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.polygon_delay_in_us_ = value;
}

// float time_lag_in_us = 16;
inline void MarkingParams::clear_time_lag_in_us() {
  _impl_.time_lag_in_us_ = 0;
}
inline float MarkingParams::time_lag_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.time_lag_in_us)
  return _internal_time_lag_in_us();
}
inline void MarkingParams::set_time_lag_in_us(float value) {
  _internal_set_time_lag_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.time_lag_in_us)
}
inline float MarkingParams::_internal_time_lag_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_lag_in_us_;
}
inline void MarkingParams::_internal_set_time_lag_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_lag_in_us_ = value;
}

// float laser_on_shift_in_us = 17;
inline void MarkingParams::clear_laser_on_shift_in_us() {
  _impl_.laser_on_shift_in_us_ = 0;
}
inline float MarkingParams::laser_on_shift_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.laser_on_shift_in_us)
  return _internal_laser_on_shift_in_us();
}
inline void MarkingParams::set_laser_on_shift_in_us(float value) {
  _internal_set_laser_on_shift_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.laser_on_shift_in_us)
}
inline float MarkingParams::_internal_laser_on_shift_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_on_shift_in_us_;
}
inline void MarkingParams::_internal_set_laser_on_shift_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_on_shift_in_us_ = value;
}

// float limit = 18;
inline void MarkingParams::clear_limit() {
  _impl_.limit_ = 0;
}
inline float MarkingParams::limit() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.limit)
  return _internal_limit();
}
inline void MarkingParams::set_limit(float value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.limit)
}
inline float MarkingParams::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void MarkingParams::_internal_set_limit(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// float n_prev_in_us = 19;
inline void MarkingParams::clear_n_prev_in_us() {
  _impl_.n_prev_in_us_ = 0;
}
inline float MarkingParams::n_prev_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.n_prev_in_us)
  return _internal_n_prev_in_us();
}
inline void MarkingParams::set_n_prev_in_us(float value) {
  _internal_set_n_prev_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.n_prev_in_us)
}
inline float MarkingParams::_internal_n_prev_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.n_prev_in_us_;
}
inline void MarkingParams::_internal_set_n_prev_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_prev_in_us_ = value;
}

// float n_post_in_us = 20;
inline void MarkingParams::clear_n_post_in_us() {
  _impl_.n_post_in_us_ = 0;
}
inline float MarkingParams::n_post_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.n_post_in_us)
  return _internal_n_post_in_us();
}
inline void MarkingParams::set_n_post_in_us(float value) {
  _internal_set_n_post_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.n_post_in_us)
}
inline float MarkingParams::_internal_n_post_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.n_post_in_us_;
}
inline void MarkingParams::_internal_set_n_post_in_us(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.n_post_in_us_ = value;
}

// float wob_frequency_in_hz = 21;
inline void MarkingParams::clear_wob_frequency_in_hz() {
  _impl_.wob_frequency_in_hz_ = 0;
}
inline float MarkingParams::wob_frequency_in_hz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_frequency_in_hz)
  return _internal_wob_frequency_in_hz();
}
inline void MarkingParams::set_wob_frequency_in_hz(float value) {
  _internal_set_wob_frequency_in_hz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_frequency_in_hz)
}
inline float MarkingParams::_internal_wob_frequency_in_hz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wob_frequency_in_hz_;
}
inline void MarkingParams::_internal_set_wob_frequency_in_hz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wob_frequency_in_hz_ = value;
}

// float wob_amp_long_in_mm = 22;
inline void MarkingParams::clear_wob_amp_long_in_mm() {
  _impl_.wob_amp_long_in_mm_ = 0;
}
inline float MarkingParams::wob_amp_long_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_amp_long_in_mm)
  return _internal_wob_amp_long_in_mm();
}
inline void MarkingParams::set_wob_amp_long_in_mm(float value) {
  _internal_set_wob_amp_long_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_amp_long_in_mm)
}
inline float MarkingParams::_internal_wob_amp_long_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wob_amp_long_in_mm_;
}
inline void MarkingParams::_internal_set_wob_amp_long_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wob_amp_long_in_mm_ = value;
}

// float wob_amp_trans_in_mm = 23;
inline void MarkingParams::clear_wob_amp_trans_in_mm() {
  _impl_.wob_amp_trans_in_mm_ = 0;
}
inline float MarkingParams::wob_amp_trans_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wob_amp_trans_in_mm)
  return _internal_wob_amp_trans_in_mm();
}
inline void MarkingParams::set_wob_amp_trans_in_mm(float value) {
  _internal_set_wob_amp_trans_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wob_amp_trans_in_mm)
}
inline float MarkingParams::_internal_wob_amp_trans_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wob_amp_trans_in_mm_;
}
inline void MarkingParams::_internal_set_wob_amp_trans_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wob_amp_trans_in_mm_ = value;
}

// .open_vector_format.MarkingParams.WobbleMode wobble_mode = 24;
inline void MarkingParams::clear_wobble_mode() {
  _impl_.wobble_mode_ = 0;
}
inline ::open_vector_format::MarkingParams_WobbleMode MarkingParams::wobble_mode() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.wobble_mode)
  return _internal_wobble_mode();
}
inline void MarkingParams::set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value) {
  _internal_set_wobble_mode(value);
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.wobble_mode)
}
inline ::open_vector_format::MarkingParams_WobbleMode MarkingParams::_internal_wobble_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::MarkingParams_WobbleMode>(_impl_.wobble_mode_);
}
inline void MarkingParams::_internal_set_wobble_mode(::open_vector_format::MarkingParams_WobbleMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wobble_mode_ = value;
}

// .open_vector_format.PowerGradientParams powerGradient = 25;
inline bool MarkingParams::has_powergradient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.powergradient_ != nullptr);
  return value;
}
inline void MarkingParams::clear_powergradient() {
  if (_impl_.powergradient_ != nullptr) _impl_.powergradient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::PowerGradientParams& MarkingParams::_internal_powergradient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::PowerGradientParams* p = _impl_.powergradient_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::PowerGradientParams&>(::open_vector_format::_PowerGradientParams_default_instance_);
}
inline const ::open_vector_format::PowerGradientParams& MarkingParams::powergradient() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.powerGradient)
  return _internal_powergradient();
}
inline void MarkingParams::unsafe_arena_set_allocated_powergradient(::open_vector_format::PowerGradientParams* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.powergradient_);
  }
  _impl_.powergradient_ = reinterpret_cast<::open_vector_format::PowerGradientParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.MarkingParams.powerGradient)
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::release_powergradient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::PowerGradientParams* released = _impl_.powergradient_;
  _impl_.powergradient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::unsafe_arena_release_powergradient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.MarkingParams.powerGradient)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::PowerGradientParams* temp = _impl_.powergradient_;
  _impl_.powergradient_ = nullptr;
  return temp;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::_internal_mutable_powergradient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.powergradient_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::PowerGradientParams>(GetArenaForAllocation());
    _impl_.powergradient_ = reinterpret_cast<::open_vector_format::PowerGradientParams*>(p);
  }
  return _impl_.powergradient_;
}
inline ::open_vector_format::PowerGradientParams* MarkingParams::mutable_powergradient() {
  ::open_vector_format::PowerGradientParams* _msg = _internal_mutable_powergradient();
  // @@protoc_insertion_point(field_mutable:open_vector_format.MarkingParams.powerGradient)
  return _msg;
}
inline void MarkingParams::set_allocated_powergradient(::open_vector_format::PowerGradientParams* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::PowerGradientParams*>(_impl_.powergradient_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::PowerGradientParams*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.powergradient_ = reinterpret_cast<::open_vector_format::PowerGradientParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.MarkingParams.powerGradient)
}

// string name = 26;
inline void MarkingParams::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MarkingParams::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.MarkingParams.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarkingParams::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.MarkingParams.name)
}
inline std::string* MarkingParams::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.MarkingParams.name)
  return _s;
}
inline const std::string& MarkingParams::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void MarkingParams::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MarkingParams::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* MarkingParams::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.MarkingParams.name)
  return _impl_.name_.Release();
}
inline void MarkingParams::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.MarkingParams.name)
}

// -------------------------------------------------------------------

// PowerGradientParams

// float minPowerInW = 1;
inline void PowerGradientParams::clear_minpowerinw() {
  _impl_.minpowerinw_ = 0;
}
inline float PowerGradientParams::minpowerinw() const {
  // @@protoc_insertion_point(field_get:open_vector_format.PowerGradientParams.minPowerInW)
  return _internal_minpowerinw();
}
inline void PowerGradientParams::set_minpowerinw(float value) {
  _internal_set_minpowerinw(value);
  // @@protoc_insertion_point(field_set:open_vector_format.PowerGradientParams.minPowerInW)
}
inline float PowerGradientParams::_internal_minpowerinw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minpowerinw_;
}
inline void PowerGradientParams::_internal_set_minpowerinw(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minpowerinw_ = value;
}

// float gradientInWPerS = 2;
inline void PowerGradientParams::clear_gradientinwpers() {
  _impl_.gradientinwpers_ = 0;
}
inline float PowerGradientParams::gradientinwpers() const {
  // @@protoc_insertion_point(field_get:open_vector_format.PowerGradientParams.gradientInWPerS)
  return _internal_gradientinwpers();
}
inline void PowerGradientParams::set_gradientinwpers(float value) {
  _internal_set_gradientinwpers(value);
  // @@protoc_insertion_point(field_set:open_vector_format.PowerGradientParams.gradientInWPerS)
}
inline float PowerGradientParams::_internal_gradientinwpers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gradientinwpers_;
}
inline void PowerGradientParams::_internal_set_gradientinwpers(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gradientinwpers_ = value;
}

// -------------------------------------------------------------------

// Part_GeometryInfo

// double volume_in_mm3 = 1;
inline void Part_GeometryInfo::clear_volume_in_mm3() {
  _impl_.volume_in_mm3_ = 0;
}
inline double Part_GeometryInfo::volume_in_mm3() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.volume_in_mm3)
  return _internal_volume_in_mm3();
}
inline void Part_GeometryInfo::set_volume_in_mm3(double value) {
  _internal_set_volume_in_mm3(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.volume_in_mm3)
}
inline double Part_GeometryInfo::_internal_volume_in_mm3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_in_mm3_;
}
inline void Part_GeometryInfo::_internal_set_volume_in_mm3(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.volume_in_mm3_ = value;
}

// double support_volume_in_mm3 = 2;
inline void Part_GeometryInfo::clear_support_volume_in_mm3() {
  _impl_.support_volume_in_mm3_ = 0;
}
inline double Part_GeometryInfo::support_volume_in_mm3() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.support_volume_in_mm3)
  return _internal_support_volume_in_mm3();
}
inline void Part_GeometryInfo::set_support_volume_in_mm3(double value) {
  _internal_set_support_volume_in_mm3(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.support_volume_in_mm3)
}
inline double Part_GeometryInfo::_internal_support_volume_in_mm3() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.support_volume_in_mm3_;
}
inline void Part_GeometryInfo::_internal_set_support_volume_in_mm3(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.support_volume_in_mm3_ = value;
}

// double build_height_in_mm = 3;
inline void Part_GeometryInfo::clear_build_height_in_mm() {
  _impl_.build_height_in_mm_ = 0;
}
inline double Part_GeometryInfo::build_height_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.build_height_in_mm)
  return _internal_build_height_in_mm();
}
inline void Part_GeometryInfo::set_build_height_in_mm(double value) {
  _internal_set_build_height_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.build_height_in_mm)
}
inline double Part_GeometryInfo::_internal_build_height_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.build_height_in_mm_;
}
inline void Part_GeometryInfo::_internal_set_build_height_in_mm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_height_in_mm_ = value;
}

// double surface_area_in_mm2 = 4;
inline void Part_GeometryInfo::clear_surface_area_in_mm2() {
  _impl_.surface_area_in_mm2_ = 0;
}
inline double Part_GeometryInfo::surface_area_in_mm2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.surface_area_in_mm2)
  return _internal_surface_area_in_mm2();
}
inline void Part_GeometryInfo::set_surface_area_in_mm2(double value) {
  _internal_set_surface_area_in_mm2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.surface_area_in_mm2)
}
inline double Part_GeometryInfo::_internal_surface_area_in_mm2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.surface_area_in_mm2_;
}
inline void Part_GeometryInfo::_internal_set_surface_area_in_mm2(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.surface_area_in_mm2_ = value;
}

// double projected_surface_in_mm2 = 5;
inline void Part_GeometryInfo::clear_projected_surface_in_mm2() {
  _impl_.projected_surface_in_mm2_ = 0;
}
inline double Part_GeometryInfo::projected_surface_in_mm2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.GeometryInfo.projected_surface_in_mm2)
  return _internal_projected_surface_in_mm2();
}
inline void Part_GeometryInfo::set_projected_surface_in_mm2(double value) {
  _internal_set_projected_surface_in_mm2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.GeometryInfo.projected_surface_in_mm2)
}
inline double Part_GeometryInfo::_internal_projected_surface_in_mm2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.projected_surface_in_mm2_;
}
inline void Part_GeometryInfo::_internal_set_projected_surface_in_mm2(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.projected_surface_in_mm2_ = value;
}

// -------------------------------------------------------------------

// Part_Material

// uint64 id = 1;
inline void Part_Material::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t Part_Material::id() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.Material.id)
  return _internal_id();
}
inline void Part_Material::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.Material.id)
}
inline ::uint64_t Part_Material::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Part_Material::_internal_set_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void Part_Material::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Part_Material::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.Material.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part_Material::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.Material.name)
}
inline std::string* Part_Material::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.Material.name)
  return _s;
}
inline const std::string& Part_Material::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Part_Material::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Part_Material::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Part_Material::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.Material.name)
  return _impl_.name_.Release();
}
inline void Part_Material::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.Material.name)
}

// -------------------------------------------------------------------

// Part_ProcessStrategy_ProprietaryParam

// string param_name = 1;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_name() {
  _impl_.param_name_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::param_name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return _internal_param_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part_ProcessStrategy_ProprietaryParam::set_param_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.param_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::mutable_param_name() {
  std::string* _s = _internal_mutable_param_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return _s;
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::_internal_param_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_name_.Get();
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.param_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::_internal_mutable_param_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.param_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::release_param_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
  return _impl_.param_name_.Release();
}
inline void Part_ProcessStrategy_ProprietaryParam::set_allocated_param_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.param_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param_name_.IsDefault()) {
          _impl_.param_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_name)
}

// double param_value = 2;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_value() {
  _impl_.param_value_ = 0;
}
inline double Part_ProcessStrategy_ProprietaryParam::param_value() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_value)
  return _internal_param_value();
}
inline void Part_ProcessStrategy_ProprietaryParam::set_param_value(double value) {
  _internal_set_param_value(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_value)
}
inline double Part_ProcessStrategy_ProprietaryParam::_internal_param_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_value_;
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.param_value_ = value;
}

// string param_description = 3;
inline void Part_ProcessStrategy_ProprietaryParam::clear_param_description() {
  _impl_.param_description_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::param_description() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return _internal_param_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part_ProcessStrategy_ProprietaryParam::set_param_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.param_description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::mutable_param_description() {
  std::string* _s = _internal_mutable_param_description();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return _s;
}
inline const std::string& Part_ProcessStrategy_ProprietaryParam::_internal_param_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_description_.Get();
}
inline void Part_ProcessStrategy_ProprietaryParam::_internal_set_param_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.param_description_.Set(value, GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::_internal_mutable_param_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.param_description_.Mutable( GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy_ProprietaryParam::release_param_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
  return _impl_.param_description_.Release();
}
inline void Part_ProcessStrategy_ProprietaryParam::set_allocated_param_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.param_description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param_description_.IsDefault()) {
          _impl_.param_description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.ProprietaryParam.param_description)
}

// -------------------------------------------------------------------

// Part_ProcessStrategy

// float rot_angle_in_deg = 1;
inline void Part_ProcessStrategy::clear_rot_angle_in_deg() {
  _impl_.rot_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::rot_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.rot_angle_in_deg)
  return _internal_rot_angle_in_deg();
}
inline void Part_ProcessStrategy::set_rot_angle_in_deg(float value) {
  _internal_set_rot_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.rot_angle_in_deg)
}
inline float Part_ProcessStrategy::_internal_rot_angle_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rot_angle_in_deg_;
}
inline void Part_ProcessStrategy::_internal_set_rot_angle_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.rot_angle_in_deg_ = value;
}

// float increment_angle_in_deg = 2;
inline void Part_ProcessStrategy::clear_increment_angle_in_deg() {
  _impl_.increment_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::increment_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.increment_angle_in_deg)
  return _internal_increment_angle_in_deg();
}
inline void Part_ProcessStrategy::set_increment_angle_in_deg(float value) {
  _internal_set_increment_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.increment_angle_in_deg)
}
inline float Part_ProcessStrategy::_internal_increment_angle_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.increment_angle_in_deg_;
}
inline void Part_ProcessStrategy::_internal_set_increment_angle_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.increment_angle_in_deg_ = value;
}

// float shift_in_mm = 3;
inline void Part_ProcessStrategy::clear_shift_in_mm() {
  _impl_.shift_in_mm_ = 0;
}
inline float Part_ProcessStrategy::shift_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.shift_in_mm)
  return _internal_shift_in_mm();
}
inline void Part_ProcessStrategy::set_shift_in_mm(float value) {
  _internal_set_shift_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.shift_in_mm)
}
inline float Part_ProcessStrategy::_internal_shift_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shift_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_shift_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shift_in_mm_ = value;
}

// float extend_into_in_mm = 4;
inline void Part_ProcessStrategy::clear_extend_into_in_mm() {
  _impl_.extend_into_in_mm_ = 0;
}
inline float Part_ProcessStrategy::extend_into_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.extend_into_in_mm)
  return _internal_extend_into_in_mm();
}
inline void Part_ProcessStrategy::set_extend_into_in_mm(float value) {
  _internal_set_extend_into_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.extend_into_in_mm)
}
inline float Part_ProcessStrategy::_internal_extend_into_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extend_into_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_extend_into_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.extend_into_in_mm_ = value;
}

// float pattern_hatch_length_in_mm = 13;
inline void Part_ProcessStrategy::clear_pattern_hatch_length_in_mm() {
  _impl_.pattern_hatch_length_in_mm_ = 0;
}
inline float Part_ProcessStrategy::pattern_hatch_length_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.pattern_hatch_length_in_mm)
  return _internal_pattern_hatch_length_in_mm();
}
inline void Part_ProcessStrategy::set_pattern_hatch_length_in_mm(float value) {
  _internal_set_pattern_hatch_length_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.pattern_hatch_length_in_mm)
}
inline float Part_ProcessStrategy::_internal_pattern_hatch_length_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pattern_hatch_length_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_pattern_hatch_length_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pattern_hatch_length_in_mm_ = value;
}

// .open_vector_format.Part.ProcessStrategy.HatchingPattern hatching_pattern = 12;
inline void Part_ProcessStrategy::clear_hatching_pattern() {
  _impl_.hatching_pattern_ = 0;
}
inline ::open_vector_format::Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::hatching_pattern() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatching_pattern)
  return _internal_hatching_pattern();
}
inline void Part_ProcessStrategy::set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value) {
  _internal_set_hatching_pattern(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatching_pattern)
}
inline ::open_vector_format::Part_ProcessStrategy_HatchingPattern Part_ProcessStrategy::_internal_hatching_pattern() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::Part_ProcessStrategy_HatchingPattern>(_impl_.hatching_pattern_);
}
inline void Part_ProcessStrategy::_internal_set_hatching_pattern(::open_vector_format::Part_ProcessStrategy_HatchingPattern value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hatching_pattern_ = value;
}

// float layer_thickness_in_mm = 5;
inline void Part_ProcessStrategy::clear_layer_thickness_in_mm() {
  _impl_.layer_thickness_in_mm_ = 0;
}
inline float Part_ProcessStrategy::layer_thickness_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.layer_thickness_in_mm)
  return _internal_layer_thickness_in_mm();
}
inline void Part_ProcessStrategy::set_layer_thickness_in_mm(float value) {
  _internal_set_layer_thickness_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.layer_thickness_in_mm)
}
inline float Part_ProcessStrategy::_internal_layer_thickness_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layer_thickness_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_layer_thickness_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.layer_thickness_in_mm_ = value;
}

// float hatch_distance_in_mm = 6;
inline void Part_ProcessStrategy::clear_hatch_distance_in_mm() {
  _impl_.hatch_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::hatch_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatch_distance_in_mm)
  return _internal_hatch_distance_in_mm();
}
inline void Part_ProcessStrategy::set_hatch_distance_in_mm(float value) {
  _internal_set_hatch_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatch_distance_in_mm)
}
inline float Part_ProcessStrategy::_internal_hatch_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hatch_distance_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_hatch_distance_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hatch_distance_in_mm_ = value;
}

// float hatch_contour_distance_in_mm = 7;
inline void Part_ProcessStrategy::clear_hatch_contour_distance_in_mm() {
  _impl_.hatch_contour_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::hatch_contour_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.hatch_contour_distance_in_mm)
  return _internal_hatch_contour_distance_in_mm();
}
inline void Part_ProcessStrategy::set_hatch_contour_distance_in_mm(float value) {
  _internal_set_hatch_contour_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.hatch_contour_distance_in_mm)
}
inline float Part_ProcessStrategy::_internal_hatch_contour_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hatch_contour_distance_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_hatch_contour_distance_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hatch_contour_distance_in_mm_ = value;
}

// float overhang_angle_in_deg = 8;
inline void Part_ProcessStrategy::clear_overhang_angle_in_deg() {
  _impl_.overhang_angle_in_deg_ = 0;
}
inline float Part_ProcessStrategy::overhang_angle_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.overhang_angle_in_deg)
  return _internal_overhang_angle_in_deg();
}
inline void Part_ProcessStrategy::set_overhang_angle_in_deg(float value) {
  _internal_set_overhang_angle_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.overhang_angle_in_deg)
}
inline float Part_ProcessStrategy::_internal_overhang_angle_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.overhang_angle_in_deg_;
}
inline void Part_ProcessStrategy::_internal_set_overhang_angle_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.overhang_angle_in_deg_ = value;
}

// float contour_offset_in_mm = 9;
inline void Part_ProcessStrategy::clear_contour_offset_in_mm() {
  _impl_.contour_offset_in_mm_ = 0;
}
inline float Part_ProcessStrategy::contour_offset_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.contour_offset_in_mm)
  return _internal_contour_offset_in_mm();
}
inline void Part_ProcessStrategy::set_contour_offset_in_mm(float value) {
  _internal_set_contour_offset_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.contour_offset_in_mm)
}
inline float Part_ProcessStrategy::_internal_contour_offset_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contour_offset_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_contour_offset_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contour_offset_in_mm_ = value;
}

// int32 number_of_contours = 10;
inline void Part_ProcessStrategy::clear_number_of_contours() {
  _impl_.number_of_contours_ = 0;
}
inline ::int32_t Part_ProcessStrategy::number_of_contours() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.number_of_contours)
  return _internal_number_of_contours();
}
inline void Part_ProcessStrategy::set_number_of_contours(::int32_t value) {
  _internal_set_number_of_contours(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.number_of_contours)
}
inline ::int32_t Part_ProcessStrategy::_internal_number_of_contours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_of_contours_;
}
inline void Part_ProcessStrategy::_internal_set_number_of_contours(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_of_contours_ = value;
}

// float contour_distance_in_mm = 11;
inline void Part_ProcessStrategy::clear_contour_distance_in_mm() {
  _impl_.contour_distance_in_mm_ = 0;
}
inline float Part_ProcessStrategy::contour_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.contour_distance_in_mm)
  return _internal_contour_distance_in_mm();
}
inline void Part_ProcessStrategy::set_contour_distance_in_mm(float value) {
  _internal_set_contour_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.contour_distance_in_mm)
}
inline float Part_ProcessStrategy::_internal_contour_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contour_distance_in_mm_;
}
inline void Part_ProcessStrategy::_internal_set_contour_distance_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contour_distance_in_mm_ = value;
}

// string name = 90;
inline void Part_ProcessStrategy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Part_ProcessStrategy::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part_ProcessStrategy::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.ProcessStrategy.name)
}
inline std::string* Part_ProcessStrategy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.name)
  return _s;
}
inline const std::string& Part_ProcessStrategy::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Part_ProcessStrategy::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Part_ProcessStrategy::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.ProcessStrategy.name)
  return _impl_.name_.Release();
}
inline void Part_ProcessStrategy::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.ProcessStrategy.name)
}

// repeated .open_vector_format.Part.ProcessStrategy.ProprietaryParam additional_parameters = 100;
inline int Part_ProcessStrategy::_internal_additional_parameters_size() const {
  return _internal_additional_parameters().size();
}
inline int Part_ProcessStrategy::additional_parameters_size() const {
  return _internal_additional_parameters_size();
}
inline void Part_ProcessStrategy::clear_additional_parameters() {
  _internal_mutable_additional_parameters()->Clear();
}
inline ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Part_ProcessStrategy::mutable_additional_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return _internal_mutable_additional_parameters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >*
Part_ProcessStrategy::mutable_additional_parameters() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.Part.ProcessStrategy.additional_parameters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_additional_parameters();
}
inline const ::open_vector_format::Part_ProcessStrategy_ProprietaryParam& Part_ProcessStrategy::additional_parameters(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.ProcessStrategy.additional_parameters)
    return _internal_additional_parameters().Get(index);
}
inline ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* Part_ProcessStrategy::add_additional_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::Part_ProcessStrategy_ProprietaryParam* _add = _internal_mutable_additional_parameters()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::Part_ProcessStrategy_ProprietaryParam >&
Part_ProcessStrategy::additional_parameters() const {
  // @@protoc_insertion_point(field_list:open_vector_format.Part.ProcessStrategy.additional_parameters)
  return _internal_additional_parameters();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>&
Part_ProcessStrategy::_internal_additional_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.additional_parameters_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::Part_ProcessStrategy_ProprietaryParam>*
Part_ProcessStrategy::_internal_mutable_additional_parameters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.additional_parameters_;
}

// -------------------------------------------------------------------

// Part

// string name = 1;
inline void Part::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Part::name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.name)
}
inline std::string* Part::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.name)
  return _s;
}
inline const std::string& Part::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Part::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Part::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Part::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.name)
  return _impl_.name_.Release();
}
inline void Part::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.name)
}

// .open_vector_format.Part.GeometryInfo geometry_info = 2;
inline bool Part::has_geometry_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geometry_info_ != nullptr);
  return value;
}
inline void Part::clear_geometry_info() {
  if (_impl_.geometry_info_ != nullptr) _impl_.geometry_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::Part_GeometryInfo& Part::_internal_geometry_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Part_GeometryInfo* p = _impl_.geometry_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_GeometryInfo&>(::open_vector_format::_Part_GeometryInfo_default_instance_);
}
inline const ::open_vector_format::Part_GeometryInfo& Part::geometry_info() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.geometry_info)
  return _internal_geometry_info();
}
inline void Part::unsafe_arena_set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.geometry_info_);
  }
  _impl_.geometry_info_ = reinterpret_cast<::open_vector_format::Part_GeometryInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.geometry_info)
}
inline ::open_vector_format::Part_GeometryInfo* Part::release_geometry_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::Part_GeometryInfo* released = _impl_.geometry_info_;
  _impl_.geometry_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Part_GeometryInfo* Part::unsafe_arena_release_geometry_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.geometry_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::Part_GeometryInfo* temp = _impl_.geometry_info_;
  _impl_.geometry_info_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_GeometryInfo* Part::_internal_mutable_geometry_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.geometry_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_GeometryInfo>(GetArenaForAllocation());
    _impl_.geometry_info_ = reinterpret_cast<::open_vector_format::Part_GeometryInfo*>(p);
  }
  return _impl_.geometry_info_;
}
inline ::open_vector_format::Part_GeometryInfo* Part::mutable_geometry_info() {
  ::open_vector_format::Part_GeometryInfo* _msg = _internal_mutable_geometry_info();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.geometry_info)
  return _msg;
}
inline void Part::set_allocated_geometry_info(::open_vector_format::Part_GeometryInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Part_GeometryInfo*>(_impl_.geometry_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Part_GeometryInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.geometry_info_ = reinterpret_cast<::open_vector_format::Part_GeometryInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.geometry_info)
}

// .open_vector_format.Part.Material material = 3;
inline bool Part::has_material() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.material_ != nullptr);
  return value;
}
inline void Part::clear_material() {
  if (_impl_.material_ != nullptr) _impl_.material_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::open_vector_format::Part_Material& Part::_internal_material() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Part_Material* p = _impl_.material_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_Material&>(::open_vector_format::_Part_Material_default_instance_);
}
inline const ::open_vector_format::Part_Material& Part::material() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.material)
  return _internal_material();
}
inline void Part::unsafe_arena_set_allocated_material(::open_vector_format::Part_Material* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.material_);
  }
  _impl_.material_ = reinterpret_cast<::open_vector_format::Part_Material*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.material)
}
inline ::open_vector_format::Part_Material* Part::release_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::open_vector_format::Part_Material* released = _impl_.material_;
  _impl_.material_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Part_Material* Part::unsafe_arena_release_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.material)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::open_vector_format::Part_Material* temp = _impl_.material_;
  _impl_.material_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_Material* Part::_internal_mutable_material() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.material_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_Material>(GetArenaForAllocation());
    _impl_.material_ = reinterpret_cast<::open_vector_format::Part_Material*>(p);
  }
  return _impl_.material_;
}
inline ::open_vector_format::Part_Material* Part::mutable_material() {
  ::open_vector_format::Part_Material* _msg = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.material)
  return _msg;
}
inline void Part::set_allocated_material(::open_vector_format::Part_Material* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Part_Material*>(_impl_.material_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Part_Material*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.material_ = reinterpret_cast<::open_vector_format::Part_Material*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.material)
}

// .open_vector_format.Part.ProcessStrategy process_strategy = 4;
inline bool Part::has_process_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_strategy_ != nullptr);
  return value;
}
inline void Part::clear_process_strategy() {
  if (_impl_.process_strategy_ != nullptr) _impl_.process_strategy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::_internal_process_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Part_ProcessStrategy* p = _impl_.process_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_ProcessStrategy&>(::open_vector_format::_Part_ProcessStrategy_default_instance_);
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::process_strategy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.process_strategy)
  return _internal_process_strategy();
}
inline void Part::unsafe_arena_set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.process_strategy_);
  }
  _impl_.process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.process_strategy)
}
inline ::open_vector_format::Part_ProcessStrategy* Part::release_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::open_vector_format::Part_ProcessStrategy* released = _impl_.process_strategy_;
  _impl_.process_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::unsafe_arena_release_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.process_strategy)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::open_vector_format::Part_ProcessStrategy* temp = _impl_.process_strategy_;
  _impl_.process_strategy_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::_internal_mutable_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.process_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy>(GetArenaForAllocation());
    _impl_.process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(p);
  }
  return _impl_.process_strategy_;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::mutable_process_strategy() {
  ::open_vector_format::Part_ProcessStrategy* _msg = _internal_mutable_process_strategy();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.process_strategy)
  return _msg;
}
inline void Part::set_allocated_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(_impl_.process_strategy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.process_strategy)
}

// .open_vector_format.Part.ProcessStrategy up_skin_process_strategy = 5;
inline bool Part::has_up_skin_process_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.up_skin_process_strategy_ != nullptr);
  return value;
}
inline void Part::clear_up_skin_process_strategy() {
  if (_impl_.up_skin_process_strategy_ != nullptr) _impl_.up_skin_process_strategy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::_internal_up_skin_process_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Part_ProcessStrategy* p = _impl_.up_skin_process_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_ProcessStrategy&>(::open_vector_format::_Part_ProcessStrategy_default_instance_);
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::up_skin_process_strategy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.up_skin_process_strategy)
  return _internal_up_skin_process_strategy();
}
inline void Part::unsafe_arena_set_allocated_up_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.up_skin_process_strategy_);
  }
  _impl_.up_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.up_skin_process_strategy)
}
inline ::open_vector_format::Part_ProcessStrategy* Part::release_up_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::open_vector_format::Part_ProcessStrategy* released = _impl_.up_skin_process_strategy_;
  _impl_.up_skin_process_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::unsafe_arena_release_up_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.up_skin_process_strategy)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::open_vector_format::Part_ProcessStrategy* temp = _impl_.up_skin_process_strategy_;
  _impl_.up_skin_process_strategy_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::_internal_mutable_up_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.up_skin_process_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy>(GetArenaForAllocation());
    _impl_.up_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(p);
  }
  return _impl_.up_skin_process_strategy_;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::mutable_up_skin_process_strategy() {
  ::open_vector_format::Part_ProcessStrategy* _msg = _internal_mutable_up_skin_process_strategy();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.up_skin_process_strategy)
  return _msg;
}
inline void Part::set_allocated_up_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(_impl_.up_skin_process_strategy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.up_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.up_skin_process_strategy)
}

// .open_vector_format.Part.ProcessStrategy down_skin_process_strategy = 6;
inline bool Part::has_down_skin_process_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.down_skin_process_strategy_ != nullptr);
  return value;
}
inline void Part::clear_down_skin_process_strategy() {
  if (_impl_.down_skin_process_strategy_ != nullptr) _impl_.down_skin_process_strategy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::_internal_down_skin_process_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::Part_ProcessStrategy* p = _impl_.down_skin_process_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::Part_ProcessStrategy&>(::open_vector_format::_Part_ProcessStrategy_default_instance_);
}
inline const ::open_vector_format::Part_ProcessStrategy& Part::down_skin_process_strategy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.down_skin_process_strategy)
  return _internal_down_skin_process_strategy();
}
inline void Part::unsafe_arena_set_allocated_down_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.down_skin_process_strategy_);
  }
  _impl_.down_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.Part.down_skin_process_strategy)
}
inline ::open_vector_format::Part_ProcessStrategy* Part::release_down_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::open_vector_format::Part_ProcessStrategy* released = _impl_.down_skin_process_strategy_;
  _impl_.down_skin_process_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::unsafe_arena_release_down_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.down_skin_process_strategy)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::open_vector_format::Part_ProcessStrategy* temp = _impl_.down_skin_process_strategy_;
  _impl_.down_skin_process_strategy_ = nullptr;
  return temp;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::_internal_mutable_down_skin_process_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.down_skin_process_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::Part_ProcessStrategy>(GetArenaForAllocation());
    _impl_.down_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(p);
  }
  return _impl_.down_skin_process_strategy_;
}
inline ::open_vector_format::Part_ProcessStrategy* Part::mutable_down_skin_process_strategy() {
  ::open_vector_format::Part_ProcessStrategy* _msg = _internal_mutable_down_skin_process_strategy();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.down_skin_process_strategy)
  return _msg;
}
inline void Part::set_allocated_down_skin_process_strategy(::open_vector_format::Part_ProcessStrategy* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(_impl_.down_skin_process_strategy_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.down_skin_process_strategy_ = reinterpret_cast<::open_vector_format::Part_ProcessStrategy*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.down_skin_process_strategy)
}

// repeated .open_vector_format.VectorBlock.LPBFMetadata exposure_order = 7;
inline int Part::_internal_exposure_order_size() const {
  return _internal_exposure_order().size();
}
inline int Part::exposure_order_size() const {
  return _internal_exposure_order_size();
}
inline void Part::clear_exposure_order() {
  _internal_mutable_exposure_order()->Clear();
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* Part::mutable_exposure_order(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.exposure_order)
  return _internal_mutable_exposure_order()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LPBFMetadata >*
Part::mutable_exposure_order() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.Part.exposure_order)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exposure_order();
}
inline const ::open_vector_format::VectorBlock_LPBFMetadata& Part::exposure_order(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.exposure_order)
    return _internal_exposure_order().Get(index);
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* Part::add_exposure_order() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::VectorBlock_LPBFMetadata* _add = _internal_mutable_exposure_order()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.Part.exposure_order)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LPBFMetadata >&
Part::exposure_order() const {
  // @@protoc_insertion_point(field_list:open_vector_format.Part.exposure_order)
  return _internal_exposure_order();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LPBFMetadata>&
Part::_internal_exposure_order() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exposure_order_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LPBFMetadata>*
Part::_internal_mutable_exposure_order() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exposure_order_;
}

// string parent_part_name = 8;
inline void Part::clear_parent_part_name() {
  _impl_.parent_part_name_.ClearToEmpty();
}
inline const std::string& Part::parent_part_name() const {
  // @@protoc_insertion_point(field_get:open_vector_format.Part.parent_part_name)
  return _internal_parent_part_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part::set_parent_part_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_part_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.Part.parent_part_name)
}
inline std::string* Part::mutable_parent_part_name() {
  std::string* _s = _internal_mutable_parent_part_name();
  // @@protoc_insertion_point(field_mutable:open_vector_format.Part.parent_part_name)
  return _s;
}
inline const std::string& Part::_internal_parent_part_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_part_name_.Get();
}
inline void Part::_internal_set_parent_part_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_part_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Part::_internal_mutable_parent_part_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.parent_part_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Part::release_parent_part_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.Part.parent_part_name)
  return _impl_.parent_part_name_.Release();
}
inline void Part::set_allocated_parent_part_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parent_part_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_part_name_.IsDefault()) {
          _impl_.parent_part_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.Part.parent_part_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WorkPlane_WorkPlaneMetaData_closedContour

// repeated int32 contour_section_vector_block_indices = 1;
inline int WorkPlane_WorkPlaneMetaData_closedContour::_internal_contour_section_vector_block_indices_size() const {
  return _internal_contour_section_vector_block_indices().size();
}
inline int WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices_size() const {
  return _internal_contour_section_vector_block_indices_size();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_contour_section_vector_block_indices() {
  _internal_mutable_contour_section_vector_block_indices()->Clear();
}
inline ::int32_t WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  return _internal_contour_section_vector_block_indices().Get(index);
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_contour_section_vector_block_indices(int index, ::int32_t value) {
  _internal_mutable_contour_section_vector_block_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::add_contour_section_vector_block_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contour_section_vector_block_indices()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& WorkPlane_WorkPlaneMetaData_closedContour::contour_section_vector_block_indices() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  return _internal_contour_section_vector_block_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* WorkPlane_WorkPlaneMetaData_closedContour::mutable_contour_section_vector_block_indices() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.contour_section_vector_block_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_contour_section_vector_block_indices();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& WorkPlane_WorkPlaneMetaData_closedContour::_internal_contour_section_vector_block_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contour_section_vector_block_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* WorkPlane_WorkPlaneMetaData_closedContour::_internal_mutable_contour_section_vector_block_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.contour_section_vector_block_indices_;
}

// float area_in_mm_2 = 2;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_area_in_mm_2() {
  _impl_.area_in_mm_2_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::area_in_mm_2() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.area_in_mm_2)
  return _internal_area_in_mm_2();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_area_in_mm_2(float value) {
  _internal_set_area_in_mm_2(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.area_in_mm_2)
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::_internal_area_in_mm_2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.area_in_mm_2_;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_area_in_mm_2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.area_in_mm_2_ = value;
}

// float length_in_mm = 3;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_length_in_mm() {
  _impl_.length_in_mm_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::length_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.length_in_mm)
  return _internal_length_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_length_in_mm(float value) {
  _internal_set_length_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.length_in_mm)
}
inline float WorkPlane_WorkPlaneMetaData_closedContour::_internal_length_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_in_mm_;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_length_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_in_mm_ = value;
}

// int32 parent_index = 5;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_parent_index() {
  _impl_.parent_index_ = 0;
}
inline ::int32_t WorkPlane_WorkPlaneMetaData_closedContour::parent_index() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.parent_index)
  return _internal_parent_index();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_parent_index(::int32_t value) {
  _internal_set_parent_index(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.parent_index)
}
inline ::int32_t WorkPlane_WorkPlaneMetaData_closedContour::_internal_parent_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_index_;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_parent_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_index_ = value;
}

// int32 winding_number = 6;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_winding_number() {
  _impl_.winding_number_ = 0;
}
inline ::int32_t WorkPlane_WorkPlaneMetaData_closedContour::winding_number() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.winding_number)
  return _internal_winding_number();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_winding_number(::int32_t value) {
  _internal_set_winding_number(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.winding_number)
}
inline ::int32_t WorkPlane_WorkPlaneMetaData_closedContour::_internal_winding_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.winding_number_;
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_winding_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.winding_number_ = value;
}

// .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.ContourType type = 7;
inline void WorkPlane_WorkPlaneMetaData_closedContour::clear_type() {
  _impl_.type_ = 0;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.type)
  return _internal_type();
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::set_type(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour.type)
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType WorkPlane_WorkPlaneMetaData_closedContour::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType>(_impl_.type_);
}
inline void WorkPlane_WorkPlaneMetaData_closedContour::_internal_set_type(::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// WorkPlane_WorkPlaneMetaData

// double total_scan_distance_in_mm = 1;
inline void WorkPlane_WorkPlaneMetaData::clear_total_scan_distance_in_mm() {
  _impl_.total_scan_distance_in_mm_ = 0;
}
inline double WorkPlane_WorkPlaneMetaData::total_scan_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.total_scan_distance_in_mm)
  return _internal_total_scan_distance_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData::set_total_scan_distance_in_mm(double value) {
  _internal_set_total_scan_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.total_scan_distance_in_mm)
}
inline double WorkPlane_WorkPlaneMetaData::_internal_total_scan_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_scan_distance_in_mm_;
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_total_scan_distance_in_mm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_scan_distance_in_mm_ = value;
}

// double total_jump_distance_in_mm = 2;
inline void WorkPlane_WorkPlaneMetaData::clear_total_jump_distance_in_mm() {
  _impl_.total_jump_distance_in_mm_ = 0;
}
inline double WorkPlane_WorkPlaneMetaData::total_jump_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.total_jump_distance_in_mm)
  return _internal_total_jump_distance_in_mm();
}
inline void WorkPlane_WorkPlaneMetaData::set_total_jump_distance_in_mm(double value) {
  _internal_set_total_jump_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.total_jump_distance_in_mm)
}
inline double WorkPlane_WorkPlaneMetaData::_internal_total_jump_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_jump_distance_in_mm_;
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_total_jump_distance_in_mm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_jump_distance_in_mm_ = value;
}

// map<int32, .open_vector_format.WorkPlane.Patch> patches_map = 3;
inline int WorkPlane_WorkPlaneMetaData::_internal_patches_map_size() const {
  return _internal_patches_map().size();
}
inline int WorkPlane_WorkPlaneMetaData::patches_map_size() const {
  return _internal_patches_map_size();
}
inline void WorkPlane_WorkPlaneMetaData::clear_patches_map() {
  _impl_.patches_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>& WorkPlane_WorkPlaneMetaData::_internal_patches_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.patches_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>& WorkPlane_WorkPlaneMetaData::patches_map() const {
  // @@protoc_insertion_point(field_map:open_vector_format.WorkPlane.WorkPlaneMetaData.patches_map)
  return _internal_patches_map();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>* WorkPlane_WorkPlaneMetaData::_internal_mutable_patches_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.patches_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::open_vector_format::WorkPlane_Patch>* WorkPlane_WorkPlaneMetaData::mutable_patches_map() {
  // @@protoc_insertion_point(field_mutable_map:open_vector_format.WorkPlane.WorkPlaneMetaData.patches_map)
  return _internal_mutable_patches_map();
}

// float maxPower = 4;
inline void WorkPlane_WorkPlaneMetaData::clear_maxpower() {
  _impl_.maxpower_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData::maxpower() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.maxPower)
  return _internal_maxpower();
}
inline void WorkPlane_WorkPlaneMetaData::set_maxpower(float value) {
  _internal_set_maxpower(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.maxPower)
}
inline float WorkPlane_WorkPlaneMetaData::_internal_maxpower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.maxpower_;
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_maxpower(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.maxpower_ = value;
}

// float minPower = 5;
inline void WorkPlane_WorkPlaneMetaData::clear_minpower() {
  _impl_.minpower_ = 0;
}
inline float WorkPlane_WorkPlaneMetaData::minpower() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.minPower)
  return _internal_minpower();
}
inline void WorkPlane_WorkPlaneMetaData::set_minpower(float value) {
  _internal_set_minpower(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.WorkPlaneMetaData.minPower)
}
inline float WorkPlane_WorkPlaneMetaData::_internal_minpower() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minpower_;
}
inline void WorkPlane_WorkPlaneMetaData::_internal_set_minpower(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minpower_ = value;
}

// repeated .open_vector_format.WorkPlane.WorkPlaneMetaData.closedContour contours = 6;
inline int WorkPlane_WorkPlaneMetaData::_internal_contours_size() const {
  return _internal_contours().size();
}
inline int WorkPlane_WorkPlaneMetaData::contours_size() const {
  return _internal_contours_size();
}
inline void WorkPlane_WorkPlaneMetaData::clear_contours() {
  _internal_mutable_contours()->Clear();
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* WorkPlane_WorkPlaneMetaData::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return _internal_mutable_contours()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >*
WorkPlane_WorkPlaneMetaData::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_contours();
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour& WorkPlane_WorkPlaneMetaData::contours(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
    return _internal_contours().Get(index);
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* WorkPlane_WorkPlaneMetaData::add_contours() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour* _add = _internal_mutable_contours()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour >&
WorkPlane_WorkPlaneMetaData::contours() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.WorkPlaneMetaData.contours)
  return _internal_contours();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>&
WorkPlane_WorkPlaneMetaData::_internal_contours() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contours_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour>*
WorkPlane_WorkPlaneMetaData::_internal_mutable_contours() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.contours_;
}

// .open_vector_format.AxisAlignedBox2D Bounds = 7;
inline bool WorkPlane_WorkPlaneMetaData::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline void WorkPlane_WorkPlaneMetaData::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::AxisAlignedBox2D& WorkPlane_WorkPlaneMetaData::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::AxisAlignedBox2D* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::AxisAlignedBox2D&>(::open_vector_format::_AxisAlignedBox2D_default_instance_);
}
inline const ::open_vector_format::AxisAlignedBox2D& WorkPlane_WorkPlaneMetaData::bounds() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.WorkPlaneMetaData.Bounds)
  return _internal_bounds();
}
inline void WorkPlane_WorkPlaneMetaData::unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.WorkPlane.WorkPlaneMetaData.Bounds)
}
inline ::open_vector_format::AxisAlignedBox2D* WorkPlane_WorkPlaneMetaData::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::AxisAlignedBox2D* WorkPlane_WorkPlaneMetaData::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.WorkPlaneMetaData.Bounds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::open_vector_format::AxisAlignedBox2D* WorkPlane_WorkPlaneMetaData::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::AxisAlignedBox2D>(GetArenaForAllocation());
    _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(p);
  }
  return _impl_.bounds_;
}
inline ::open_vector_format::AxisAlignedBox2D* WorkPlane_WorkPlaneMetaData::mutable_bounds() {
  ::open_vector_format::AxisAlignedBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.WorkPlaneMetaData.Bounds)
  return _msg;
}
inline void WorkPlane_WorkPlaneMetaData::set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.WorkPlaneMetaData.Bounds)
}

// -------------------------------------------------------------------

// WorkPlane_Patch

// .open_vector_format.VectorBlock.LineSequence outer_contour = 1;
inline bool WorkPlane_Patch::has_outer_contour() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outer_contour_ != nullptr);
  return value;
}
inline void WorkPlane_Patch::clear_outer_contour() {
  if (_impl_.outer_contour_ != nullptr) _impl_.outer_contour_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::VectorBlock_LineSequence& WorkPlane_Patch::_internal_outer_contour() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::VectorBlock_LineSequence* p = _impl_.outer_contour_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_LineSequence&>(::open_vector_format::_VectorBlock_LineSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence& WorkPlane_Patch::outer_contour() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.outer_contour)
  return _internal_outer_contour();
}
inline void WorkPlane_Patch::unsafe_arena_set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.outer_contour_);
  }
  _impl_.outer_contour_ = reinterpret_cast<::open_vector_format::VectorBlock_LineSequence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.WorkPlane.Patch.outer_contour)
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::release_outer_contour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_LineSequence* released = _impl_.outer_contour_;
  _impl_.outer_contour_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::unsafe_arena_release_outer_contour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.Patch.outer_contour)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_LineSequence* temp = _impl_.outer_contour_;
  _impl_.outer_contour_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::_internal_mutable_outer_contour() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.outer_contour_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_LineSequence>(GetArenaForAllocation());
    _impl_.outer_contour_ = reinterpret_cast<::open_vector_format::VectorBlock_LineSequence*>(p);
  }
  return _impl_.outer_contour_;
}
inline ::open_vector_format::VectorBlock_LineSequence* WorkPlane_Patch::mutable_outer_contour() {
  ::open_vector_format::VectorBlock_LineSequence* _msg = _internal_mutable_outer_contour();
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.Patch.outer_contour)
  return _msg;
}
inline void WorkPlane_Patch::set_allocated_outer_contour(::open_vector_format::VectorBlock_LineSequence* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::VectorBlock_LineSequence*>(_impl_.outer_contour_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::VectorBlock_LineSequence*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.outer_contour_ = reinterpret_cast<::open_vector_format::VectorBlock_LineSequence*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.Patch.outer_contour)
}

// float u = 2;
inline void WorkPlane_Patch::clear_u() {
  _impl_.u_ = 0;
}
inline float WorkPlane_Patch::u() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.u)
  return _internal_u();
}
inline void WorkPlane_Patch::set_u(float value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.u)
}
inline float WorkPlane_Patch::_internal_u() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.u_;
}
inline void WorkPlane_Patch::_internal_set_u(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.u_ = value;
}

// float v = 3;
inline void WorkPlane_Patch::clear_v() {
  _impl_.v_ = 0;
}
inline float WorkPlane_Patch::v() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.v)
  return _internal_v();
}
inline void WorkPlane_Patch::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.v)
}
inline float WorkPlane_Patch::_internal_v() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_;
}
inline void WorkPlane_Patch::_internal_set_v(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_ = value;
}

// int32 layer_id = 4;
inline void WorkPlane_Patch::clear_layer_id() {
  _impl_.layer_id_ = 0;
}
inline ::int32_t WorkPlane_Patch::layer_id() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.Patch.layer_id)
  return _internal_layer_id();
}
inline void WorkPlane_Patch::set_layer_id(::int32_t value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.Patch.layer_id)
}
inline ::int32_t WorkPlane_Patch::_internal_layer_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layer_id_;
}
inline void WorkPlane_Patch::_internal_set_layer_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.layer_id_ = value;
}

// -------------------------------------------------------------------

// WorkPlane

// repeated .open_vector_format.VectorBlock vector_blocks = 1;
inline int WorkPlane::_internal_vector_blocks_size() const {
  return _internal_vector_blocks().size();
}
inline int WorkPlane::vector_blocks_size() const {
  return _internal_vector_blocks_size();
}
inline void WorkPlane::clear_vector_blocks() {
  _internal_mutable_vector_blocks()->Clear();
}
inline ::open_vector_format::VectorBlock* WorkPlane::mutable_vector_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.vector_blocks)
  return _internal_mutable_vector_blocks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock >*
WorkPlane::mutable_vector_blocks() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.vector_blocks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vector_blocks();
}
inline const ::open_vector_format::VectorBlock& WorkPlane::vector_blocks(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.vector_blocks)
    return _internal_vector_blocks().Get(index);
}
inline ::open_vector_format::VectorBlock* WorkPlane::add_vector_blocks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::VectorBlock* _add = _internal_mutable_vector_blocks()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.vector_blocks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock >&
WorkPlane::vector_blocks() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.vector_blocks)
  return _internal_vector_blocks();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock>&
WorkPlane::_internal_vector_blocks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vector_blocks_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock>*
WorkPlane::_internal_mutable_vector_blocks() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vector_blocks_;
}

// float x_pos_in_mm = 2;
inline void WorkPlane::clear_x_pos_in_mm() {
  _impl_.x_pos_in_mm_ = 0;
}
inline float WorkPlane::x_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.x_pos_in_mm)
  return _internal_x_pos_in_mm();
}
inline void WorkPlane::set_x_pos_in_mm(float value) {
  _internal_set_x_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.x_pos_in_mm)
}
inline float WorkPlane::_internal_x_pos_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_pos_in_mm_;
}
inline void WorkPlane::_internal_set_x_pos_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_pos_in_mm_ = value;
}

// float y_pos_in_mm = 3;
inline void WorkPlane::clear_y_pos_in_mm() {
  _impl_.y_pos_in_mm_ = 0;
}
inline float WorkPlane::y_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.y_pos_in_mm)
  return _internal_y_pos_in_mm();
}
inline void WorkPlane::set_y_pos_in_mm(float value) {
  _internal_set_y_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.y_pos_in_mm)
}
inline float WorkPlane::_internal_y_pos_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_pos_in_mm_;
}
inline void WorkPlane::_internal_set_y_pos_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_pos_in_mm_ = value;
}

// float z_pos_in_mm = 4;
inline void WorkPlane::clear_z_pos_in_mm() {
  _impl_.z_pos_in_mm_ = 0;
}
inline float WorkPlane::z_pos_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.z_pos_in_mm)
  return _internal_z_pos_in_mm();
}
inline void WorkPlane::set_z_pos_in_mm(float value) {
  _internal_set_z_pos_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.z_pos_in_mm)
}
inline float WorkPlane::_internal_z_pos_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_pos_in_mm_;
}
inline void WorkPlane::_internal_set_z_pos_in_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_pos_in_mm_ = value;
}

// float x_rot_in_deg = 5;
inline void WorkPlane::clear_x_rot_in_deg() {
  _impl_.x_rot_in_deg_ = 0;
}
inline float WorkPlane::x_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.x_rot_in_deg)
  return _internal_x_rot_in_deg();
}
inline void WorkPlane::set_x_rot_in_deg(float value) {
  _internal_set_x_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.x_rot_in_deg)
}
inline float WorkPlane::_internal_x_rot_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_rot_in_deg_;
}
inline void WorkPlane::_internal_set_x_rot_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_rot_in_deg_ = value;
}

// float y_rot_in_deg = 6;
inline void WorkPlane::clear_y_rot_in_deg() {
  _impl_.y_rot_in_deg_ = 0;
}
inline float WorkPlane::y_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.y_rot_in_deg)
  return _internal_y_rot_in_deg();
}
inline void WorkPlane::set_y_rot_in_deg(float value) {
  _internal_set_y_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.y_rot_in_deg)
}
inline float WorkPlane::_internal_y_rot_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_rot_in_deg_;
}
inline void WorkPlane::_internal_set_y_rot_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_rot_in_deg_ = value;
}

// float z_rot_in_deg = 7;
inline void WorkPlane::clear_z_rot_in_deg() {
  _impl_.z_rot_in_deg_ = 0;
}
inline float WorkPlane::z_rot_in_deg() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.z_rot_in_deg)
  return _internal_z_rot_in_deg();
}
inline void WorkPlane::set_z_rot_in_deg(float value) {
  _internal_set_z_rot_in_deg(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.z_rot_in_deg)
}
inline float WorkPlane::_internal_z_rot_in_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_rot_in_deg_;
}
inline void WorkPlane::_internal_set_z_rot_in_deg(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_rot_in_deg_ = value;
}

// int32 num_blocks = 8;
inline void WorkPlane::clear_num_blocks() {
  _impl_.num_blocks_ = 0;
}
inline ::int32_t WorkPlane::num_blocks() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.num_blocks)
  return _internal_num_blocks();
}
inline void WorkPlane::set_num_blocks(::int32_t value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.num_blocks)
}
inline ::int32_t WorkPlane::_internal_num_blocks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_blocks_;
}
inline void WorkPlane::_internal_set_num_blocks(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_blocks_ = value;
}

// uint32 repeats = 9;
inline void WorkPlane::clear_repeats() {
  _impl_.repeats_ = 0u;
}
inline ::uint32_t WorkPlane::repeats() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.repeats)
  return _internal_repeats();
}
inline void WorkPlane::set_repeats(::uint32_t value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.repeats)
}
inline ::uint32_t WorkPlane::_internal_repeats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repeats_;
}
inline void WorkPlane::_internal_set_repeats(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repeats_ = value;
}

// int32 work_plane_number = 10;
inline void WorkPlane::clear_work_plane_number() {
  _impl_.work_plane_number_ = 0;
}
inline ::int32_t WorkPlane::work_plane_number() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.work_plane_number)
  return _internal_work_plane_number();
}
inline void WorkPlane::set_work_plane_number(::int32_t value) {
  _internal_set_work_plane_number(value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.work_plane_number)
}
inline ::int32_t WorkPlane::_internal_work_plane_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.work_plane_number_;
}
inline void WorkPlane::_internal_set_work_plane_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.work_plane_number_ = value;
}

// string machine_type = 11;
inline void WorkPlane::clear_machine_type() {
  _impl_.machine_type_.ClearToEmpty();
}
inline const std::string& WorkPlane::machine_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.machine_type)
  return _internal_machine_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkPlane::set_machine_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.machine_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.machine_type)
}
inline std::string* WorkPlane::mutable_machine_type() {
  std::string* _s = _internal_mutable_machine_type();
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.machine_type)
  return _s;
}
inline const std::string& WorkPlane::_internal_machine_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.machine_type_.Get();
}
inline void WorkPlane::_internal_set_machine_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.machine_type_.Set(value, GetArenaForAllocation());
}
inline std::string* WorkPlane::_internal_mutable_machine_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.machine_type_.Mutable( GetArenaForAllocation());
}
inline std::string* WorkPlane::release_machine_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.machine_type)
  return _impl_.machine_type_.Release();
}
inline void WorkPlane::set_allocated_machine_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.machine_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.machine_type_.IsDefault()) {
          _impl_.machine_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.machine_type)
}

// repeated float additional_axis_positions = 12;
inline int WorkPlane::_internal_additional_axis_positions_size() const {
  return _internal_additional_axis_positions().size();
}
inline int WorkPlane::additional_axis_positions_size() const {
  return _internal_additional_axis_positions_size();
}
inline void WorkPlane::clear_additional_axis_positions() {
  _internal_mutable_additional_axis_positions()->Clear();
}
inline float WorkPlane::additional_axis_positions(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.additional_axis_positions)
  return _internal_additional_axis_positions().Get(index);
}
inline void WorkPlane::set_additional_axis_positions(int index, float value) {
  _internal_mutable_additional_axis_positions()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.WorkPlane.additional_axis_positions)
}
inline void WorkPlane::add_additional_axis_positions(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_additional_axis_positions()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.WorkPlane.additional_axis_positions)
}
inline const ::google::protobuf::RepeatedField<float>& WorkPlane::additional_axis_positions() const {
  // @@protoc_insertion_point(field_list:open_vector_format.WorkPlane.additional_axis_positions)
  return _internal_additional_axis_positions();
}
inline ::google::protobuf::RepeatedField<float>* WorkPlane::mutable_additional_axis_positions() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.WorkPlane.additional_axis_positions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_additional_axis_positions();
}

inline const ::google::protobuf::RepeatedField<float>& WorkPlane::_internal_additional_axis_positions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.additional_axis_positions_;
}
inline ::google::protobuf::RepeatedField<float>* WorkPlane::_internal_mutable_additional_axis_positions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.additional_axis_positions_;
}

// .open_vector_format.WorkPlane.WorkPlaneMetaData meta_data = 13;
inline bool WorkPlane::has_meta_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_data_ != nullptr);
  return value;
}
inline void WorkPlane::clear_meta_data() {
  if (_impl_.meta_data_ != nullptr) _impl_.meta_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData& WorkPlane::_internal_meta_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::WorkPlane_WorkPlaneMetaData* p = _impl_.meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::WorkPlane_WorkPlaneMetaData&>(::open_vector_format::_WorkPlane_WorkPlaneMetaData_default_instance_);
}
inline const ::open_vector_format::WorkPlane_WorkPlaneMetaData& WorkPlane::meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.WorkPlane.meta_data)
  return _internal_meta_data();
}
inline void WorkPlane::unsafe_arena_set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_data_);
  }
  _impl_.meta_data_ = reinterpret_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.WorkPlane.meta_data)
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::release_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* released = _impl_.meta_data_;
  _impl_.meta_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::unsafe_arena_release_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.WorkPlane.meta_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* temp = _impl_.meta_data_;
  _impl_.meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::_internal_mutable_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::WorkPlane_WorkPlaneMetaData>(GetArenaForAllocation());
    _impl_.meta_data_ = reinterpret_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData*>(p);
  }
  return _impl_.meta_data_;
}
inline ::open_vector_format::WorkPlane_WorkPlaneMetaData* WorkPlane::mutable_meta_data() {
  ::open_vector_format::WorkPlane_WorkPlaneMetaData* _msg = _internal_mutable_meta_data();
  // @@protoc_insertion_point(field_mutable:open_vector_format.WorkPlane.meta_data)
  return _msg;
}
inline void WorkPlane::set_allocated_meta_data(::open_vector_format::WorkPlane_WorkPlaneMetaData* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData*>(_impl_.meta_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_data_ = reinterpret_cast<::open_vector_format::WorkPlane_WorkPlaneMetaData*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.WorkPlane.meta_data)
}

// -------------------------------------------------------------------

// VectorBlock_VectorBlockMetaData

// double total_scan_distance_in_mm = 1;
inline void VectorBlock_VectorBlockMetaData::clear_total_scan_distance_in_mm() {
  _impl_.total_scan_distance_in_mm_ = 0;
}
inline double VectorBlock_VectorBlockMetaData::total_scan_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.total_scan_distance_in_mm)
  return _internal_total_scan_distance_in_mm();
}
inline void VectorBlock_VectorBlockMetaData::set_total_scan_distance_in_mm(double value) {
  _internal_set_total_scan_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.total_scan_distance_in_mm)
}
inline double VectorBlock_VectorBlockMetaData::_internal_total_scan_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_scan_distance_in_mm_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_total_scan_distance_in_mm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_scan_distance_in_mm_ = value;
}

// double total_jump_distance_in_mm = 2;
inline void VectorBlock_VectorBlockMetaData::clear_total_jump_distance_in_mm() {
  _impl_.total_jump_distance_in_mm_ = 0;
}
inline double VectorBlock_VectorBlockMetaData::total_jump_distance_in_mm() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.total_jump_distance_in_mm)
  return _internal_total_jump_distance_in_mm();
}
inline void VectorBlock_VectorBlockMetaData::set_total_jump_distance_in_mm(double value) {
  _internal_set_total_jump_distance_in_mm(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.total_jump_distance_in_mm)
}
inline double VectorBlock_VectorBlockMetaData::_internal_total_jump_distance_in_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_jump_distance_in_mm_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_total_jump_distance_in_mm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_jump_distance_in_mm_ = value;
}

// int32 part_key = 3;
inline void VectorBlock_VectorBlockMetaData::clear_part_key() {
  _impl_.part_key_ = 0;
}
inline ::int32_t VectorBlock_VectorBlockMetaData::part_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.part_key)
  return _internal_part_key();
}
inline void VectorBlock_VectorBlockMetaData::set_part_key(::int32_t value) {
  _internal_set_part_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.part_key)
}
inline ::int32_t VectorBlock_VectorBlockMetaData::_internal_part_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.part_key_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_part_key(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.part_key_ = value;
}

// int32 patch_key = 4;
inline void VectorBlock_VectorBlockMetaData::clear_patch_key() {
  _impl_.patch_key_ = 0;
}
inline ::int32_t VectorBlock_VectorBlockMetaData::patch_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.patch_key)
  return _internal_patch_key();
}
inline void VectorBlock_VectorBlockMetaData::set_patch_key(::int32_t value) {
  _internal_set_patch_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.patch_key)
}
inline ::int32_t VectorBlock_VectorBlockMetaData::_internal_patch_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.patch_key_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_patch_key(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.patch_key_ = value;
}

// int32 contour_index = 5;
inline void VectorBlock_VectorBlockMetaData::clear_contour_index() {
  _impl_.contour_index_ = 0;
}
inline ::int32_t VectorBlock_VectorBlockMetaData::contour_index() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.contour_index)
  return _internal_contour_index();
}
inline void VectorBlock_VectorBlockMetaData::set_contour_index(::int32_t value) {
  _internal_set_contour_index(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.contour_index)
}
inline ::int32_t VectorBlock_VectorBlockMetaData::_internal_contour_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contour_index_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_contour_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contour_index_ = value;
}

// .open_vector_format.AxisAlignedBox2D bounds = 6;
inline bool VectorBlock_VectorBlockMetaData::has_bounds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bounds_ != nullptr);
  return value;
}
inline void VectorBlock_VectorBlockMetaData::clear_bounds() {
  if (_impl_.bounds_ != nullptr) _impl_.bounds_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::AxisAlignedBox2D& VectorBlock_VectorBlockMetaData::_internal_bounds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::AxisAlignedBox2D* p = _impl_.bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::AxisAlignedBox2D&>(::open_vector_format::_AxisAlignedBox2D_default_instance_);
}
inline const ::open_vector_format::AxisAlignedBox2D& VectorBlock_VectorBlockMetaData::bounds() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.bounds)
  return _internal_bounds();
}
inline void VectorBlock_VectorBlockMetaData::unsafe_arena_set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bounds_);
  }
  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.VectorBlockMetaData.bounds)
}
inline ::open_vector_format::AxisAlignedBox2D* VectorBlock_VectorBlockMetaData::release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* released = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::AxisAlignedBox2D* VectorBlock_VectorBlockMetaData::unsafe_arena_release_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.VectorBlockMetaData.bounds)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::AxisAlignedBox2D* temp = _impl_.bounds_;
  _impl_.bounds_ = nullptr;
  return temp;
}
inline ::open_vector_format::AxisAlignedBox2D* VectorBlock_VectorBlockMetaData::_internal_mutable_bounds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::AxisAlignedBox2D>(GetArenaForAllocation());
    _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(p);
  }
  return _impl_.bounds_;
}
inline ::open_vector_format::AxisAlignedBox2D* VectorBlock_VectorBlockMetaData::mutable_bounds() {
  ::open_vector_format::AxisAlignedBox2D* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.VectorBlockMetaData.bounds)
  return _msg;
}
inline void VectorBlock_VectorBlockMetaData::set_allocated_bounds(::open_vector_format::AxisAlignedBox2D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(_impl_.bounds_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bounds_ = reinterpret_cast<::open_vector_format::AxisAlignedBox2D*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.VectorBlockMetaData.bounds)
}

// int32 display_color = 7;
inline void VectorBlock_VectorBlockMetaData::clear_display_color() {
  _impl_.display_color_ = 0;
}
inline ::int32_t VectorBlock_VectorBlockMetaData::display_color() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.VectorBlockMetaData.display_color)
  return _internal_display_color();
}
inline void VectorBlock_VectorBlockMetaData::set_display_color(::int32_t value) {
  _internal_set_display_color(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.VectorBlockMetaData.display_color)
}
inline ::int32_t VectorBlock_VectorBlockMetaData::_internal_display_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_color_;
}
inline void VectorBlock_VectorBlockMetaData::_internal_set_display_color(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_color_ = value;
}

// -------------------------------------------------------------------

// VectorBlock_LPBFMetadata

// .open_vector_format.VectorBlock.PartArea part_area = 1;
inline void VectorBlock_LPBFMetadata::clear_part_area() {
  _impl_.part_area_ = 0;
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_LPBFMetadata::part_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.part_area)
  return _internal_part_area();
}
inline void VectorBlock_LPBFMetadata::set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  _internal_set_part_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.part_area)
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_LPBFMetadata::_internal_part_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_PartArea>(_impl_.part_area_);
}
inline void VectorBlock_LPBFMetadata::_internal_set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.part_area_ = value;
}

// .open_vector_format.VectorBlock.LPBFMetadata.SkinType skin_type = 2;
inline void VectorBlock_LPBFMetadata::clear_skin_type() {
  _impl_.skin_type_ = 0;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::skin_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.skin_type)
  return _internal_skin_type();
}
inline void VectorBlock_LPBFMetadata::set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value) {
  _internal_set_skin_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.skin_type)
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinType VectorBlock_LPBFMetadata::_internal_skin_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_LPBFMetadata_SkinType>(_impl_.skin_type_);
}
inline void VectorBlock_LPBFMetadata::_internal_set_skin_type(::open_vector_format::VectorBlock_LPBFMetadata_SkinType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.skin_type_ = value;
}

// .open_vector_format.VectorBlock.LPBFMetadata.SkinCoreStrategyArea skin_core_strategy_area = 3;
inline void VectorBlock_LPBFMetadata::clear_skin_core_strategy_area() {
  _impl_.skin_core_strategy_area_ = 0;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::skin_core_strategy_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.skin_core_strategy_area)
  return _internal_skin_core_strategy_area();
}
inline void VectorBlock_LPBFMetadata::set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value) {
  _internal_set_skin_core_strategy_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.skin_core_strategy_area)
}
inline ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea VectorBlock_LPBFMetadata::_internal_skin_core_strategy_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea>(_impl_.skin_core_strategy_area_);
}
inline void VectorBlock_LPBFMetadata::_internal_set_skin_core_strategy_area(::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.skin_core_strategy_area_ = value;
}

// .open_vector_format.VectorBlock.StructureType structure_type = 4;
inline void VectorBlock_LPBFMetadata::clear_structure_type() {
  _impl_.structure_type_ = 0;
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_LPBFMetadata::structure_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.structure_type)
  return _internal_structure_type();
}
inline void VectorBlock_LPBFMetadata::set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  _internal_set_structure_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.structure_type)
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_LPBFMetadata::_internal_structure_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_StructureType>(_impl_.structure_type_);
}
inline void VectorBlock_LPBFMetadata::_internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.structure_type_ = value;
}

// bool reexposure = 5;
inline void VectorBlock_LPBFMetadata::clear_reexposure() {
  _impl_.reexposure_ = false;
}
inline bool VectorBlock_LPBFMetadata::reexposure() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LPBFMetadata.reexposure)
  return _internal_reexposure();
}
inline void VectorBlock_LPBFMetadata::set_reexposure(bool value) {
  _internal_set_reexposure(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LPBFMetadata.reexposure)
}
inline bool VectorBlock_LPBFMetadata::_internal_reexposure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reexposure_;
}
inline void VectorBlock_LPBFMetadata::_internal_set_reexposure(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reexposure_ = value;
}

// -------------------------------------------------------------------

// VectorBlock_MicroStructuringMetadata

// .open_vector_format.VectorBlock.PartArea part_area = 1;
inline void VectorBlock_MicroStructuringMetadata::clear_part_area() {
  _impl_.part_area_ = 0;
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_MicroStructuringMetadata::part_area() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.MicroStructuringMetadata.part_area)
  return _internal_part_area();
}
inline void VectorBlock_MicroStructuringMetadata::set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  _internal_set_part_area(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.MicroStructuringMetadata.part_area)
}
inline ::open_vector_format::VectorBlock_PartArea VectorBlock_MicroStructuringMetadata::_internal_part_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_PartArea>(_impl_.part_area_);
}
inline void VectorBlock_MicroStructuringMetadata::_internal_set_part_area(::open_vector_format::VectorBlock_PartArea value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.part_area_ = value;
}

// .open_vector_format.VectorBlock.StructureType structure_type = 2;
inline void VectorBlock_MicroStructuringMetadata::clear_structure_type() {
  _impl_.structure_type_ = 0;
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_MicroStructuringMetadata::structure_type() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.MicroStructuringMetadata.structure_type)
  return _internal_structure_type();
}
inline void VectorBlock_MicroStructuringMetadata::set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  _internal_set_structure_type(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.MicroStructuringMetadata.structure_type)
}
inline ::open_vector_format::VectorBlock_StructureType VectorBlock_MicroStructuringMetadata::_internal_structure_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_StructureType>(_impl_.structure_type_);
}
inline void VectorBlock_MicroStructuringMetadata::_internal_set_structure_type(::open_vector_format::VectorBlock_StructureType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.structure_type_ = value;
}

// -------------------------------------------------------------------

// VectorBlock_PolishingMetadata

// -------------------------------------------------------------------

// VectorBlock_LineSequence

// repeated float points = 1;
inline int VectorBlock_LineSequence::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_LineSequence::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_LineSequence::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_LineSequence::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequence.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_LineSequence::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequence.points)
}
inline void VectorBlock_LineSequence::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequence.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequence::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequence.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequence::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequence.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequence::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequence::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_LineSequence3D

// repeated float points = 1;
inline int VectorBlock_LineSequence3D::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_LineSequence3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_LineSequence3D::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_LineSequence3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequence3D.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_LineSequence3D::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequence3D.points)
}
inline void VectorBlock_LineSequence3D::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequence3D.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequence3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequence3D.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequence3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequence3D.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequence3D::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequence3D::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_Hatches

// repeated float points = 1;
inline int VectorBlock_Hatches::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_Hatches::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_Hatches::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_Hatches::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Hatches.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_Hatches::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Hatches.points)
}
inline void VectorBlock_Hatches::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Hatches.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Hatches::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Hatches.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Hatches::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Hatches.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Hatches::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Hatches::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_Hatches3D

// repeated float points = 1;
inline int VectorBlock_Hatches3D::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_Hatches3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_Hatches3D::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_Hatches3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Hatches3D.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_Hatches3D::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Hatches3D.points)
}
inline void VectorBlock_Hatches3D::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Hatches3D.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Hatches3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Hatches3D.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Hatches3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Hatches3D.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Hatches3D::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Hatches3D::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_PointSequence

// repeated float points = 1;
inline int VectorBlock_PointSequence::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_PointSequence::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_PointSequence::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_PointSequence::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.PointSequence.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_PointSequence::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.PointSequence.points)
}
inline void VectorBlock_PointSequence::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.PointSequence.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_PointSequence::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.PointSequence.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_PointSequence::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.PointSequence.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_PointSequence::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_PointSequence::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_PointSequence3D

// repeated float points = 1;
inline int VectorBlock_PointSequence3D::_internal_points_size() const {
  return _internal_points().size();
}
inline int VectorBlock_PointSequence3D::points_size() const {
  return _internal_points_size();
}
inline void VectorBlock_PointSequence3D::clear_points() {
  _internal_mutable_points()->Clear();
}
inline float VectorBlock_PointSequence3D::points(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.PointSequence3D.points)
  return _internal_points().Get(index);
}
inline void VectorBlock_PointSequence3D::set_points(int index, float value) {
  _internal_mutable_points()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.PointSequence3D.points)
}
inline void VectorBlock_PointSequence3D::add_points(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.PointSequence3D.points)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_PointSequence3D::points() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.PointSequence3D.points)
  return _internal_points();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_PointSequence3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.PointSequence3D.points)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_PointSequence3D::_internal_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_PointSequence3D::_internal_mutable_points() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// VectorBlock_Arcs

// double angle = 1;
inline void VectorBlock_Arcs::clear_angle() {
  _impl_.angle_ = 0;
}
inline double VectorBlock_Arcs::angle() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.angle)
  return _internal_angle();
}
inline void VectorBlock_Arcs::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.angle)
}
inline double VectorBlock_Arcs::_internal_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angle_;
}
inline void VectorBlock_Arcs::_internal_set_angle(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angle_ = value;
}

// float start_dx = 2;
inline void VectorBlock_Arcs::clear_start_dx() {
  _impl_.start_dx_ = 0;
}
inline float VectorBlock_Arcs::start_dx() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.start_dx)
  return _internal_start_dx();
}
inline void VectorBlock_Arcs::set_start_dx(float value) {
  _internal_set_start_dx(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.start_dx)
}
inline float VectorBlock_Arcs::_internal_start_dx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_dx_;
}
inline void VectorBlock_Arcs::_internal_set_start_dx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_dx_ = value;
}

// float start_dy = 3;
inline void VectorBlock_Arcs::clear_start_dy() {
  _impl_.start_dy_ = 0;
}
inline float VectorBlock_Arcs::start_dy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.start_dy)
  return _internal_start_dy();
}
inline void VectorBlock_Arcs::set_start_dy(float value) {
  _internal_set_start_dy(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.start_dy)
}
inline float VectorBlock_Arcs::_internal_start_dy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_dy_;
}
inline void VectorBlock_Arcs::_internal_set_start_dy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_dy_ = value;
}

// repeated float centers = 4;
inline int VectorBlock_Arcs::_internal_centers_size() const {
  return _internal_centers().size();
}
inline int VectorBlock_Arcs::centers_size() const {
  return _internal_centers_size();
}
inline void VectorBlock_Arcs::clear_centers() {
  _internal_mutable_centers()->Clear();
}
inline float VectorBlock_Arcs::centers(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs.centers)
  return _internal_centers().Get(index);
}
inline void VectorBlock_Arcs::set_centers(int index, float value) {
  _internal_mutable_centers()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs.centers)
}
inline void VectorBlock_Arcs::add_centers(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_centers()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Arcs.centers)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Arcs::centers() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Arcs.centers)
  return _internal_centers();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Arcs::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Arcs.centers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_centers();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Arcs::_internal_centers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.centers_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Arcs::_internal_mutable_centers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.centers_;
}

// -------------------------------------------------------------------

// VectorBlock_Arcs3D

// double angle = 1;
inline void VectorBlock_Arcs3D::clear_angle() {
  _impl_.angle_ = 0;
}
inline double VectorBlock_Arcs3D::angle() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.angle)
  return _internal_angle();
}
inline void VectorBlock_Arcs3D::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.angle)
}
inline double VectorBlock_Arcs3D::_internal_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angle_;
}
inline void VectorBlock_Arcs3D::_internal_set_angle(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angle_ = value;
}

// float start_dx = 2;
inline void VectorBlock_Arcs3D::clear_start_dx() {
  _impl_.start_dx_ = 0;
}
inline float VectorBlock_Arcs3D::start_dx() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dx)
  return _internal_start_dx();
}
inline void VectorBlock_Arcs3D::set_start_dx(float value) {
  _internal_set_start_dx(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dx)
}
inline float VectorBlock_Arcs3D::_internal_start_dx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_dx_;
}
inline void VectorBlock_Arcs3D::_internal_set_start_dx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_dx_ = value;
}

// float start_dy = 3;
inline void VectorBlock_Arcs3D::clear_start_dy() {
  _impl_.start_dy_ = 0;
}
inline float VectorBlock_Arcs3D::start_dy() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dy)
  return _internal_start_dy();
}
inline void VectorBlock_Arcs3D::set_start_dy(float value) {
  _internal_set_start_dy(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dy)
}
inline float VectorBlock_Arcs3D::_internal_start_dy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_dy_;
}
inline void VectorBlock_Arcs3D::_internal_set_start_dy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_dy_ = value;
}

// float start_dz = 4;
inline void VectorBlock_Arcs3D::clear_start_dz() {
  _impl_.start_dz_ = 0;
}
inline float VectorBlock_Arcs3D::start_dz() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.start_dz)
  return _internal_start_dz();
}
inline void VectorBlock_Arcs3D::set_start_dz(float value) {
  _internal_set_start_dz(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.start_dz)
}
inline float VectorBlock_Arcs3D::_internal_start_dz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_dz_;
}
inline void VectorBlock_Arcs3D::_internal_set_start_dz(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_dz_ = value;
}

// repeated float centers = 5;
inline int VectorBlock_Arcs3D::_internal_centers_size() const {
  return _internal_centers().size();
}
inline int VectorBlock_Arcs3D::centers_size() const {
  return _internal_centers_size();
}
inline void VectorBlock_Arcs3D::clear_centers() {
  _internal_mutable_centers()->Clear();
}
inline float VectorBlock_Arcs3D::centers(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Arcs3D.centers)
  return _internal_centers().Get(index);
}
inline void VectorBlock_Arcs3D::set_centers(int index, float value) {
  _internal_mutable_centers()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Arcs3D.centers)
}
inline void VectorBlock_Arcs3D::add_centers(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_centers()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.Arcs3D.centers)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Arcs3D::centers() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.Arcs3D.centers)
  return _internal_centers();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Arcs3D::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.Arcs3D.centers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_centers();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_Arcs3D::_internal_centers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.centers_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_Arcs3D::_internal_mutable_centers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.centers_;
}

// -------------------------------------------------------------------

// VectorBlock_Ellipses

// float a = 1;
inline void VectorBlock_Ellipses::clear_a() {
  _impl_.a_ = 0;
}
inline float VectorBlock_Ellipses::a() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.a)
  return _internal_a();
}
inline void VectorBlock_Ellipses::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.a)
}
inline float VectorBlock_Ellipses::_internal_a() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.a_;
}
inline void VectorBlock_Ellipses::_internal_set_a(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.a_ = value;
}

// float b = 2;
inline void VectorBlock_Ellipses::clear_b() {
  _impl_.b_ = 0;
}
inline float VectorBlock_Ellipses::b() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.b)
  return _internal_b();
}
inline void VectorBlock_Ellipses::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.b)
}
inline float VectorBlock_Ellipses::_internal_b() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.b_;
}
inline void VectorBlock_Ellipses::_internal_set_b(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.b_ = value;
}

// double phi0 = 3;
inline void VectorBlock_Ellipses::clear_phi0() {
  _impl_.phi0_ = 0;
}
inline double VectorBlock_Ellipses::phi0() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.phi0)
  return _internal_phi0();
}
inline void VectorBlock_Ellipses::set_phi0(double value) {
  _internal_set_phi0(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.Ellipses.phi0)
}
inline double VectorBlock_Ellipses::_internal_phi0() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phi0_;
}
inline void VectorBlock_Ellipses::_internal_set_phi0(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.phi0_ = value;
}

// .open_vector_format.VectorBlock.Arcs ellipses_arcs = 4;
inline bool VectorBlock_Ellipses::has_ellipses_arcs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ellipses_arcs_ != nullptr);
  return value;
}
inline void VectorBlock_Ellipses::clear_ellipses_arcs() {
  if (_impl_.ellipses_arcs_ != nullptr) _impl_.ellipses_arcs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock_Ellipses::_internal_ellipses_arcs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::VectorBlock_Arcs* p = _impl_.ellipses_arcs_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_Arcs&>(::open_vector_format::_VectorBlock_Arcs_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock_Ellipses::ellipses_arcs() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
  return _internal_ellipses_arcs();
}
inline void VectorBlock_Ellipses::unsafe_arena_set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ellipses_arcs_);
  }
  _impl_.ellipses_arcs_ = reinterpret_cast<::open_vector_format::VectorBlock_Arcs*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::release_ellipses_arcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_Arcs* released = _impl_.ellipses_arcs_;
  _impl_.ellipses_arcs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::unsafe_arena_release_ellipses_arcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_Arcs* temp = _impl_.ellipses_arcs_;
  _impl_.ellipses_arcs_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::_internal_mutable_ellipses_arcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ellipses_arcs_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_Arcs>(GetArenaForAllocation());
    _impl_.ellipses_arcs_ = reinterpret_cast<::open_vector_format::VectorBlock_Arcs*>(p);
  }
  return _impl_.ellipses_arcs_;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock_Ellipses::mutable_ellipses_arcs() {
  ::open_vector_format::VectorBlock_Arcs* _msg = _internal_mutable_ellipses_arcs();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
  return _msg;
}
inline void VectorBlock_Ellipses::set_allocated_ellipses_arcs(::open_vector_format::VectorBlock_Arcs* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::VectorBlock_Arcs*>(_impl_.ellipses_arcs_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::VectorBlock_Arcs*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.ellipses_arcs_ = reinterpret_cast<::open_vector_format::VectorBlock_Arcs*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.Ellipses.ellipses_arcs)
}

// -------------------------------------------------------------------

// VectorBlock_ExposurePause

// uint64 pause_in_us = 1;
inline void VectorBlock_ExposurePause::clear_pause_in_us() {
  _impl_.pause_in_us_ = ::uint64_t{0u};
}
inline ::uint64_t VectorBlock_ExposurePause::pause_in_us() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.ExposurePause.pause_in_us)
  return _internal_pause_in_us();
}
inline void VectorBlock_ExposurePause::set_pause_in_us(::uint64_t value) {
  _internal_set_pause_in_us(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.ExposurePause.pause_in_us)
}
inline ::uint64_t VectorBlock_ExposurePause::_internal_pause_in_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pause_in_us_;
}
inline void VectorBlock_ExposurePause::_internal_set_pause_in_us(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pause_in_us_ = value;
}

// -------------------------------------------------------------------

// VectorBlock_LineSequenceParaAdapt

// repeated float points_with_paras = 1;
inline int VectorBlock_LineSequenceParaAdapt::_internal_points_with_paras_size() const {
  return _internal_points_with_paras().size();
}
inline int VectorBlock_LineSequenceParaAdapt::points_with_paras_size() const {
  return _internal_points_with_paras_size();
}
inline void VectorBlock_LineSequenceParaAdapt::clear_points_with_paras() {
  _internal_mutable_points_with_paras()->Clear();
}
inline float VectorBlock_LineSequenceParaAdapt::points_with_paras(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  return _internal_points_with_paras().Get(index);
}
inline void VectorBlock_LineSequenceParaAdapt::set_points_with_paras(int index, float value) {
  _internal_mutable_points_with_paras()->Set(index, value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
}
inline void VectorBlock_LineSequenceParaAdapt::add_points_with_paras(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_points_with_paras()->Add(value);
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
}
inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequenceParaAdapt::points_with_paras() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  return _internal_points_with_paras();
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequenceParaAdapt::mutable_points_with_paras() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.LineSequenceParaAdapt.points_with_paras)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_points_with_paras();
}

inline const ::google::protobuf::RepeatedField<float>& VectorBlock_LineSequenceParaAdapt::_internal_points_with_paras() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.points_with_paras_;
}
inline ::google::protobuf::RepeatedField<float>* VectorBlock_LineSequenceParaAdapt::_internal_mutable_points_with_paras() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.points_with_paras_;
}

// .open_vector_format.VectorBlock.LineSequenceParaAdapt.AdaptedParameter parameter = 2;
inline void VectorBlock_LineSequenceParaAdapt::clear_parameter() {
  _impl_.parameter_ = 0;
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::parameter() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.LineSequenceParaAdapt.parameter)
  return _internal_parameter();
}
inline void VectorBlock_LineSequenceParaAdapt::set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.LineSequenceParaAdapt.parameter)
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter VectorBlock_LineSequenceParaAdapt::_internal_parameter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter>(_impl_.parameter_);
}
inline void VectorBlock_LineSequenceParaAdapt::_internal_set_parameter(::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parameter_ = value;
}

// -------------------------------------------------------------------

// VectorBlock_HatchesParaAdapt

// repeated .open_vector_format.VectorBlock.LineSequenceParaAdapt hatchAsLinesequence = 1;
inline int VectorBlock_HatchesParaAdapt::_internal_hatchaslinesequence_size() const {
  return _internal_hatchaslinesequence().size();
}
inline int VectorBlock_HatchesParaAdapt::hatchaslinesequence_size() const {
  return _internal_hatchaslinesequence_size();
}
inline void VectorBlock_HatchesParaAdapt::clear_hatchaslinesequence() {
  _internal_mutable_hatchaslinesequence()->Clear();
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock_HatchesParaAdapt::mutable_hatchaslinesequence(int index) {
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return _internal_mutable_hatchaslinesequence()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >*
VectorBlock_HatchesParaAdapt::mutable_hatchaslinesequence() {
  // @@protoc_insertion_point(field_mutable_list:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_hatchaslinesequence();
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock_HatchesParaAdapt::hatchaslinesequence(int index) const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
    return _internal_hatchaslinesequence().Get(index);
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock_HatchesParaAdapt::add_hatchaslinesequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* _add = _internal_mutable_hatchaslinesequence()->Add();
  // @@protoc_insertion_point(field_add:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >&
VectorBlock_HatchesParaAdapt::hatchaslinesequence() const {
  // @@protoc_insertion_point(field_list:open_vector_format.VectorBlock.HatchesParaAdapt.hatchAsLinesequence)
  return _internal_hatchaslinesequence();
}
inline const ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LineSequenceParaAdapt>&
VectorBlock_HatchesParaAdapt::_internal_hatchaslinesequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hatchaslinesequence_;
}
inline ::google::protobuf::RepeatedPtrField<::open_vector_format::VectorBlock_LineSequenceParaAdapt>*
VectorBlock_HatchesParaAdapt::_internal_mutable_hatchaslinesequence() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.hatchaslinesequence_;
}

// -------------------------------------------------------------------

// VectorBlock

// .open_vector_format.VectorBlock.LineSequence line_sequence = 1;
inline bool VectorBlock::has_line_sequence() const {
  return vector_data_case() == kLineSequence;
}
inline bool VectorBlock::_internal_has_line_sequence() const {
  return vector_data_case() == kLineSequence;
}
inline void VectorBlock::set_has_line_sequence() {
  _impl_._oneof_case_[0] = kLineSequence;
}
inline void VectorBlock::clear_line_sequence() {
  if (vector_data_case() == kLineSequence) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.line_sequence_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::release_line_sequence() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence)
  if (vector_data_case() == kLineSequence) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence* temp = _impl_.vector_data_.line_sequence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.line_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequence& VectorBlock::_internal_line_sequence() const {
  return vector_data_case() == kLineSequence
      ? *_impl_.vector_data_.line_sequence_
      : reinterpret_cast<::open_vector_format::VectorBlock_LineSequence&>(::open_vector_format::_VectorBlock_LineSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence& VectorBlock::line_sequence() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence)
  return _internal_line_sequence();
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::unsafe_arena_release_line_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence)
  if (vector_data_case() == kLineSequence) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence* temp = _impl_.vector_data_.line_sequence_;
    _impl_.vector_data_.line_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence(::open_vector_format::VectorBlock_LineSequence* line_sequence) {
  clear_vector_data();
  if (line_sequence) {
    set_has_line_sequence();
    _impl_.vector_data_.line_sequence_ = line_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence)
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::_internal_mutable_line_sequence() {
  if (vector_data_case() != kLineSequence) {
    clear_vector_data();
    set_has_line_sequence();
    _impl_.vector_data_.line_sequence_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.line_sequence_;
}
inline ::open_vector_format::VectorBlock_LineSequence* VectorBlock::mutable_line_sequence() {
  ::open_vector_format::VectorBlock_LineSequence* _msg = _internal_mutable_line_sequence();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence)
  return _msg;
}

// .open_vector_format.VectorBlock.Hatches _hatches = 2;
inline bool VectorBlock::has__hatches() const {
  return vector_data_case() == kHatches;
}
inline bool VectorBlock::_internal_has__hatches() const {
  return vector_data_case() == kHatches;
}
inline void VectorBlock::set_has__hatches() {
  _impl_._oneof_case_[0] = kHatches;
}
inline void VectorBlock::clear__hatches() {
  if (vector_data_case() == kHatches) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_._hatches_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::release__hatches() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._hatches)
  if (vector_data_case() == kHatches) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches* temp = _impl_.vector_data_._hatches_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_._hatches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Hatches& VectorBlock::_internal__hatches() const {
  return vector_data_case() == kHatches
      ? *_impl_.vector_data_._hatches_
      : reinterpret_cast<::open_vector_format::VectorBlock_Hatches&>(::open_vector_format::_VectorBlock_Hatches_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Hatches& VectorBlock::_hatches() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._hatches)
  return _internal__hatches();
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::unsafe_arena_release__hatches() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._hatches)
  if (vector_data_case() == kHatches) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches* temp = _impl_.vector_data_._hatches_;
    _impl_.vector_data_._hatches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__hatches(::open_vector_format::VectorBlock_Hatches* _hatches) {
  clear_vector_data();
  if (_hatches) {
    set_has__hatches();
    _impl_.vector_data_._hatches_ = _hatches;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._hatches)
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::_internal_mutable__hatches() {
  if (vector_data_case() != kHatches) {
    clear_vector_data();
    set_has__hatches();
    _impl_.vector_data_._hatches_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches >(GetArenaForAllocation());
  }
  return _impl_.vector_data_._hatches_;
}
inline ::open_vector_format::VectorBlock_Hatches* VectorBlock::mutable__hatches() {
  ::open_vector_format::VectorBlock_Hatches* _msg = _internal_mutable__hatches();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._hatches)
  return _msg;
}

// .open_vector_format.VectorBlock.PointSequence point_sequence = 3;
inline bool VectorBlock::has_point_sequence() const {
  return vector_data_case() == kPointSequence;
}
inline bool VectorBlock::_internal_has_point_sequence() const {
  return vector_data_case() == kPointSequence;
}
inline void VectorBlock::set_has_point_sequence() {
  _impl_._oneof_case_[0] = kPointSequence;
}
inline void VectorBlock::clear_point_sequence() {
  if (vector_data_case() == kPointSequence) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.point_sequence_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::release_point_sequence() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.point_sequence)
  if (vector_data_case() == kPointSequence) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence* temp = _impl_.vector_data_.point_sequence_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.point_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PointSequence& VectorBlock::_internal_point_sequence() const {
  return vector_data_case() == kPointSequence
      ? *_impl_.vector_data_.point_sequence_
      : reinterpret_cast<::open_vector_format::VectorBlock_PointSequence&>(::open_vector_format::_VectorBlock_PointSequence_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PointSequence& VectorBlock::point_sequence() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.point_sequence)
  return _internal_point_sequence();
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::unsafe_arena_release_point_sequence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.point_sequence)
  if (vector_data_case() == kPointSequence) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence* temp = _impl_.vector_data_.point_sequence_;
    _impl_.vector_data_.point_sequence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_point_sequence(::open_vector_format::VectorBlock_PointSequence* point_sequence) {
  clear_vector_data();
  if (point_sequence) {
    set_has_point_sequence();
    _impl_.vector_data_.point_sequence_ = point_sequence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.point_sequence)
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::_internal_mutable_point_sequence() {
  if (vector_data_case() != kPointSequence) {
    clear_vector_data();
    set_has_point_sequence();
    _impl_.vector_data_.point_sequence_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.point_sequence_;
}
inline ::open_vector_format::VectorBlock_PointSequence* VectorBlock::mutable_point_sequence() {
  ::open_vector_format::VectorBlock_PointSequence* _msg = _internal_mutable_point_sequence();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.point_sequence)
  return _msg;
}

// .open_vector_format.VectorBlock.Arcs _arcs = 4;
inline bool VectorBlock::has__arcs() const {
  return vector_data_case() == kArcs;
}
inline bool VectorBlock::_internal_has__arcs() const {
  return vector_data_case() == kArcs;
}
inline void VectorBlock::set_has__arcs() {
  _impl_._oneof_case_[0] = kArcs;
}
inline void VectorBlock::clear__arcs() {
  if (vector_data_case() == kArcs) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_._arcs_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::release__arcs() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._arcs)
  if (vector_data_case() == kArcs) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs* temp = _impl_.vector_data_._arcs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_._arcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock::_internal__arcs() const {
  return vector_data_case() == kArcs
      ? *_impl_.vector_data_._arcs_
      : reinterpret_cast<::open_vector_format::VectorBlock_Arcs&>(::open_vector_format::_VectorBlock_Arcs_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs& VectorBlock::_arcs() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._arcs)
  return _internal__arcs();
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::unsafe_arena_release__arcs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._arcs)
  if (vector_data_case() == kArcs) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs* temp = _impl_.vector_data_._arcs_;
    _impl_.vector_data_._arcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__arcs(::open_vector_format::VectorBlock_Arcs* _arcs) {
  clear_vector_data();
  if (_arcs) {
    set_has__arcs();
    _impl_.vector_data_._arcs_ = _arcs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._arcs)
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::_internal_mutable__arcs() {
  if (vector_data_case() != kArcs) {
    clear_vector_data();
    set_has__arcs();
    _impl_.vector_data_._arcs_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs >(GetArenaForAllocation());
  }
  return _impl_.vector_data_._arcs_;
}
inline ::open_vector_format::VectorBlock_Arcs* VectorBlock::mutable__arcs() {
  ::open_vector_format::VectorBlock_Arcs* _msg = _internal_mutable__arcs();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._arcs)
  return _msg;
}

// .open_vector_format.VectorBlock.Ellipses ellipses = 5;
inline bool VectorBlock::has_ellipses() const {
  return vector_data_case() == kEllipses;
}
inline bool VectorBlock::_internal_has_ellipses() const {
  return vector_data_case() == kEllipses;
}
inline void VectorBlock::set_has_ellipses() {
  _impl_._oneof_case_[0] = kEllipses;
}
inline void VectorBlock::clear_ellipses() {
  if (vector_data_case() == kEllipses) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.ellipses_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::release_ellipses() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.ellipses)
  if (vector_data_case() == kEllipses) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Ellipses* temp = _impl_.vector_data_.ellipses_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.ellipses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Ellipses& VectorBlock::_internal_ellipses() const {
  return vector_data_case() == kEllipses
      ? *_impl_.vector_data_.ellipses_
      : reinterpret_cast<::open_vector_format::VectorBlock_Ellipses&>(::open_vector_format::_VectorBlock_Ellipses_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Ellipses& VectorBlock::ellipses() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.ellipses)
  return _internal_ellipses();
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::unsafe_arena_release_ellipses() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.ellipses)
  if (vector_data_case() == kEllipses) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Ellipses* temp = _impl_.vector_data_.ellipses_;
    _impl_.vector_data_.ellipses_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_ellipses(::open_vector_format::VectorBlock_Ellipses* ellipses) {
  clear_vector_data();
  if (ellipses) {
    set_has_ellipses();
    _impl_.vector_data_.ellipses_ = ellipses;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.ellipses)
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::_internal_mutable_ellipses() {
  if (vector_data_case() != kEllipses) {
    clear_vector_data();
    set_has_ellipses();
    _impl_.vector_data_.ellipses_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Ellipses >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.ellipses_;
}
inline ::open_vector_format::VectorBlock_Ellipses* VectorBlock::mutable_ellipses() {
  ::open_vector_format::VectorBlock_Ellipses* _msg = _internal_mutable_ellipses();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.ellipses)
  return _msg;
}

// .open_vector_format.VectorBlock.LineSequence3D line_sequence_3d = 6;
inline bool VectorBlock::has_line_sequence_3d() const {
  return vector_data_case() == kLineSequence3D;
}
inline bool VectorBlock::_internal_has_line_sequence_3d() const {
  return vector_data_case() == kLineSequence3D;
}
inline void VectorBlock::set_has_line_sequence_3d() {
  _impl_._oneof_case_[0] = kLineSequence3D;
}
inline void VectorBlock::clear_line_sequence_3d() {
  if (vector_data_case() == kLineSequence3D) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.line_sequence_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::release_line_sequence_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence_3d)
  if (vector_data_case() == kLineSequence3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence3D* temp = _impl_.vector_data_.line_sequence_3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.line_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequence3D& VectorBlock::_internal_line_sequence_3d() const {
  return vector_data_case() == kLineSequence3D
      ? *_impl_.vector_data_.line_sequence_3d_
      : reinterpret_cast<::open_vector_format::VectorBlock_LineSequence3D&>(::open_vector_format::_VectorBlock_LineSequence3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequence3D& VectorBlock::line_sequence_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence_3d)
  return _internal_line_sequence_3d();
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::unsafe_arena_release_line_sequence_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence_3d)
  if (vector_data_case() == kLineSequence3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequence3D* temp = _impl_.vector_data_.line_sequence_3d_;
    _impl_.vector_data_.line_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence_3d(::open_vector_format::VectorBlock_LineSequence3D* line_sequence_3d) {
  clear_vector_data();
  if (line_sequence_3d) {
    set_has_line_sequence_3d();
    _impl_.vector_data_.line_sequence_3d_ = line_sequence_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence_3d)
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::_internal_mutable_line_sequence_3d() {
  if (vector_data_case() != kLineSequence3D) {
    clear_vector_data();
    set_has_line_sequence_3d();
    _impl_.vector_data_.line_sequence_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequence3D >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.line_sequence_3d_;
}
inline ::open_vector_format::VectorBlock_LineSequence3D* VectorBlock::mutable_line_sequence_3d() {
  ::open_vector_format::VectorBlock_LineSequence3D* _msg = _internal_mutable_line_sequence_3d();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence_3d)
  return _msg;
}

// .open_vector_format.VectorBlock.Hatches3D hatches_3d = 7;
inline bool VectorBlock::has_hatches_3d() const {
  return vector_data_case() == kHatches3D;
}
inline bool VectorBlock::_internal_has_hatches_3d() const {
  return vector_data_case() == kHatches3D;
}
inline void VectorBlock::set_has_hatches_3d() {
  _impl_._oneof_case_[0] = kHatches3D;
}
inline void VectorBlock::clear_hatches_3d() {
  if (vector_data_case() == kHatches3D) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.hatches_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::release_hatches_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.hatches_3d)
  if (vector_data_case() == kHatches3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches3D* temp = _impl_.vector_data_.hatches_3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.hatches_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Hatches3D& VectorBlock::_internal_hatches_3d() const {
  return vector_data_case() == kHatches3D
      ? *_impl_.vector_data_.hatches_3d_
      : reinterpret_cast<::open_vector_format::VectorBlock_Hatches3D&>(::open_vector_format::_VectorBlock_Hatches3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Hatches3D& VectorBlock::hatches_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.hatches_3d)
  return _internal_hatches_3d();
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::unsafe_arena_release_hatches_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.hatches_3d)
  if (vector_data_case() == kHatches3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Hatches3D* temp = _impl_.vector_data_.hatches_3d_;
    _impl_.vector_data_.hatches_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_hatches_3d(::open_vector_format::VectorBlock_Hatches3D* hatches_3d) {
  clear_vector_data();
  if (hatches_3d) {
    set_has_hatches_3d();
    _impl_.vector_data_.hatches_3d_ = hatches_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.hatches_3d)
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::_internal_mutable_hatches_3d() {
  if (vector_data_case() != kHatches3D) {
    clear_vector_data();
    set_has_hatches_3d();
    _impl_.vector_data_.hatches_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Hatches3D >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.hatches_3d_;
}
inline ::open_vector_format::VectorBlock_Hatches3D* VectorBlock::mutable_hatches_3d() {
  ::open_vector_format::VectorBlock_Hatches3D* _msg = _internal_mutable_hatches_3d();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.hatches_3d)
  return _msg;
}

// .open_vector_format.VectorBlock.PointSequence3D point_sequence_3d = 8;
inline bool VectorBlock::has_point_sequence_3d() const {
  return vector_data_case() == kPointSequence3D;
}
inline bool VectorBlock::_internal_has_point_sequence_3d() const {
  return vector_data_case() == kPointSequence3D;
}
inline void VectorBlock::set_has_point_sequence_3d() {
  _impl_._oneof_case_[0] = kPointSequence3D;
}
inline void VectorBlock::clear_point_sequence_3d() {
  if (vector_data_case() == kPointSequence3D) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.point_sequence_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::release_point_sequence_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.point_sequence_3d)
  if (vector_data_case() == kPointSequence3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence3D* temp = _impl_.vector_data_.point_sequence_3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.point_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PointSequence3D& VectorBlock::_internal_point_sequence_3d() const {
  return vector_data_case() == kPointSequence3D
      ? *_impl_.vector_data_.point_sequence_3d_
      : reinterpret_cast<::open_vector_format::VectorBlock_PointSequence3D&>(::open_vector_format::_VectorBlock_PointSequence3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PointSequence3D& VectorBlock::point_sequence_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.point_sequence_3d)
  return _internal_point_sequence_3d();
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::unsafe_arena_release_point_sequence_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.point_sequence_3d)
  if (vector_data_case() == kPointSequence3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_PointSequence3D* temp = _impl_.vector_data_.point_sequence_3d_;
    _impl_.vector_data_.point_sequence_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_point_sequence_3d(::open_vector_format::VectorBlock_PointSequence3D* point_sequence_3d) {
  clear_vector_data();
  if (point_sequence_3d) {
    set_has_point_sequence_3d();
    _impl_.vector_data_.point_sequence_3d_ = point_sequence_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.point_sequence_3d)
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::_internal_mutable_point_sequence_3d() {
  if (vector_data_case() != kPointSequence3D) {
    clear_vector_data();
    set_has_point_sequence_3d();
    _impl_.vector_data_.point_sequence_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PointSequence3D >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.point_sequence_3d_;
}
inline ::open_vector_format::VectorBlock_PointSequence3D* VectorBlock::mutable_point_sequence_3d() {
  ::open_vector_format::VectorBlock_PointSequence3D* _msg = _internal_mutable_point_sequence_3d();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.point_sequence_3d)
  return _msg;
}

// .open_vector_format.VectorBlock.Arcs3D arcs_3d = 9;
inline bool VectorBlock::has_arcs_3d() const {
  return vector_data_case() == kArcs3D;
}
inline bool VectorBlock::_internal_has_arcs_3d() const {
  return vector_data_case() == kArcs3D;
}
inline void VectorBlock::set_has_arcs_3d() {
  _impl_._oneof_case_[0] = kArcs3D;
}
inline void VectorBlock::clear_arcs_3d() {
  if (vector_data_case() == kArcs3D) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.arcs_3d_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::release_arcs_3d() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.arcs_3d)
  if (vector_data_case() == kArcs3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs3D* temp = _impl_.vector_data_.arcs_3d_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.arcs_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_Arcs3D& VectorBlock::_internal_arcs_3d() const {
  return vector_data_case() == kArcs3D
      ? *_impl_.vector_data_.arcs_3d_
      : reinterpret_cast<::open_vector_format::VectorBlock_Arcs3D&>(::open_vector_format::_VectorBlock_Arcs3D_default_instance_);
}
inline const ::open_vector_format::VectorBlock_Arcs3D& VectorBlock::arcs_3d() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.arcs_3d)
  return _internal_arcs_3d();
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::unsafe_arena_release_arcs_3d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.arcs_3d)
  if (vector_data_case() == kArcs3D) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_Arcs3D* temp = _impl_.vector_data_.arcs_3d_;
    _impl_.vector_data_.arcs_3d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_arcs_3d(::open_vector_format::VectorBlock_Arcs3D* arcs_3d) {
  clear_vector_data();
  if (arcs_3d) {
    set_has_arcs_3d();
    _impl_.vector_data_.arcs_3d_ = arcs_3d;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.arcs_3d)
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::_internal_mutable_arcs_3d() {
  if (vector_data_case() != kArcs3D) {
    clear_vector_data();
    set_has_arcs_3d();
    _impl_.vector_data_.arcs_3d_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_Arcs3D >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.arcs_3d_;
}
inline ::open_vector_format::VectorBlock_Arcs3D* VectorBlock::mutable_arcs_3d() {
  ::open_vector_format::VectorBlock_Arcs3D* _msg = _internal_mutable_arcs_3d();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.arcs_3d)
  return _msg;
}

// .open_vector_format.VectorBlock.ExposurePause exposure_pause = 10;
inline bool VectorBlock::has_exposure_pause() const {
  return vector_data_case() == kExposurePause;
}
inline bool VectorBlock::_internal_has_exposure_pause() const {
  return vector_data_case() == kExposurePause;
}
inline void VectorBlock::set_has_exposure_pause() {
  _impl_._oneof_case_[0] = kExposurePause;
}
inline void VectorBlock::clear_exposure_pause() {
  if (vector_data_case() == kExposurePause) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.exposure_pause_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::release_exposure_pause() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.exposure_pause)
  if (vector_data_case() == kExposurePause) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_ExposurePause* temp = _impl_.vector_data_.exposure_pause_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.exposure_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_ExposurePause& VectorBlock::_internal_exposure_pause() const {
  return vector_data_case() == kExposurePause
      ? *_impl_.vector_data_.exposure_pause_
      : reinterpret_cast<::open_vector_format::VectorBlock_ExposurePause&>(::open_vector_format::_VectorBlock_ExposurePause_default_instance_);
}
inline const ::open_vector_format::VectorBlock_ExposurePause& VectorBlock::exposure_pause() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.exposure_pause)
  return _internal_exposure_pause();
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::unsafe_arena_release_exposure_pause() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.exposure_pause)
  if (vector_data_case() == kExposurePause) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_ExposurePause* temp = _impl_.vector_data_.exposure_pause_;
    _impl_.vector_data_.exposure_pause_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_exposure_pause(::open_vector_format::VectorBlock_ExposurePause* exposure_pause) {
  clear_vector_data();
  if (exposure_pause) {
    set_has_exposure_pause();
    _impl_.vector_data_.exposure_pause_ = exposure_pause;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.exposure_pause)
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::_internal_mutable_exposure_pause() {
  if (vector_data_case() != kExposurePause) {
    clear_vector_data();
    set_has_exposure_pause();
    _impl_.vector_data_.exposure_pause_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_ExposurePause >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.exposure_pause_;
}
inline ::open_vector_format::VectorBlock_ExposurePause* VectorBlock::mutable_exposure_pause() {
  ::open_vector_format::VectorBlock_ExposurePause* _msg = _internal_mutable_exposure_pause();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.exposure_pause)
  return _msg;
}

// .open_vector_format.VectorBlock.LineSequenceParaAdapt line_sequence_para_adapt = 11;
inline bool VectorBlock::has_line_sequence_para_adapt() const {
  return vector_data_case() == kLineSequenceParaAdapt;
}
inline bool VectorBlock::_internal_has_line_sequence_para_adapt() const {
  return vector_data_case() == kLineSequenceParaAdapt;
}
inline void VectorBlock::set_has_line_sequence_para_adapt() {
  _impl_._oneof_case_[0] = kLineSequenceParaAdapt;
}
inline void VectorBlock::clear_line_sequence_para_adapt() {
  if (vector_data_case() == kLineSequenceParaAdapt) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_.line_sequence_para_adapt_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::release_line_sequence_para_adapt() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.line_sequence_para_adapt)
  if (vector_data_case() == kLineSequenceParaAdapt) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequenceParaAdapt* temp = _impl_.vector_data_.line_sequence_para_adapt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_.line_sequence_para_adapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock::_internal_line_sequence_para_adapt() const {
  return vector_data_case() == kLineSequenceParaAdapt
      ? *_impl_.vector_data_.line_sequence_para_adapt_
      : reinterpret_cast<::open_vector_format::VectorBlock_LineSequenceParaAdapt&>(::open_vector_format::_VectorBlock_LineSequenceParaAdapt_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LineSequenceParaAdapt& VectorBlock::line_sequence_para_adapt() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.line_sequence_para_adapt)
  return _internal_line_sequence_para_adapt();
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::unsafe_arena_release_line_sequence_para_adapt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.line_sequence_para_adapt)
  if (vector_data_case() == kLineSequenceParaAdapt) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_LineSequenceParaAdapt* temp = _impl_.vector_data_.line_sequence_para_adapt_;
    _impl_.vector_data_.line_sequence_para_adapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_line_sequence_para_adapt(::open_vector_format::VectorBlock_LineSequenceParaAdapt* line_sequence_para_adapt) {
  clear_vector_data();
  if (line_sequence_para_adapt) {
    set_has_line_sequence_para_adapt();
    _impl_.vector_data_.line_sequence_para_adapt_ = line_sequence_para_adapt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.line_sequence_para_adapt)
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::_internal_mutable_line_sequence_para_adapt() {
  if (vector_data_case() != kLineSequenceParaAdapt) {
    clear_vector_data();
    set_has_line_sequence_para_adapt();
    _impl_.vector_data_.line_sequence_para_adapt_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LineSequenceParaAdapt >(GetArenaForAllocation());
  }
  return _impl_.vector_data_.line_sequence_para_adapt_;
}
inline ::open_vector_format::VectorBlock_LineSequenceParaAdapt* VectorBlock::mutable_line_sequence_para_adapt() {
  ::open_vector_format::VectorBlock_LineSequenceParaAdapt* _msg = _internal_mutable_line_sequence_para_adapt();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.line_sequence_para_adapt)
  return _msg;
}

// .open_vector_format.VectorBlock.HatchesParaAdapt _hatchParaAdapt = 12;
inline bool VectorBlock::has__hatchparaadapt() const {
  return vector_data_case() == kHatchParaAdapt;
}
inline bool VectorBlock::_internal_has__hatchparaadapt() const {
  return vector_data_case() == kHatchParaAdapt;
}
inline void VectorBlock::set_has__hatchparaadapt() {
  _impl_._oneof_case_[0] = kHatchParaAdapt;
}
inline void VectorBlock::clear__hatchparaadapt() {
  if (vector_data_case() == kHatchParaAdapt) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.vector_data_._hatchparaadapt_;
    }
    clear_has_vector_data();
  }
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::release__hatchparaadapt() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock._hatchParaAdapt)
  if (vector_data_case() == kHatchParaAdapt) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_HatchesParaAdapt* temp = _impl_.vector_data_._hatchparaadapt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.vector_data_._hatchparaadapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_HatchesParaAdapt& VectorBlock::_internal__hatchparaadapt() const {
  return vector_data_case() == kHatchParaAdapt
      ? *_impl_.vector_data_._hatchparaadapt_
      : reinterpret_cast<::open_vector_format::VectorBlock_HatchesParaAdapt&>(::open_vector_format::_VectorBlock_HatchesParaAdapt_default_instance_);
}
inline const ::open_vector_format::VectorBlock_HatchesParaAdapt& VectorBlock::_hatchparaadapt() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock._hatchParaAdapt)
  return _internal__hatchparaadapt();
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::unsafe_arena_release__hatchparaadapt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock._hatchParaAdapt)
  if (vector_data_case() == kHatchParaAdapt) {
    clear_has_vector_data();
    ::open_vector_format::VectorBlock_HatchesParaAdapt* temp = _impl_.vector_data_._hatchparaadapt_;
    _impl_.vector_data_._hatchparaadapt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated__hatchparaadapt(::open_vector_format::VectorBlock_HatchesParaAdapt* _hatchparaadapt) {
  clear_vector_data();
  if (_hatchparaadapt) {
    set_has__hatchparaadapt();
    _impl_.vector_data_._hatchparaadapt_ = _hatchparaadapt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock._hatchParaAdapt)
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::_internal_mutable__hatchparaadapt() {
  if (vector_data_case() != kHatchParaAdapt) {
    clear_vector_data();
    set_has__hatchparaadapt();
    _impl_.vector_data_._hatchparaadapt_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_HatchesParaAdapt >(GetArenaForAllocation());
  }
  return _impl_.vector_data_._hatchparaadapt_;
}
inline ::open_vector_format::VectorBlock_HatchesParaAdapt* VectorBlock::mutable__hatchparaadapt() {
  ::open_vector_format::VectorBlock_HatchesParaAdapt* _msg = _internal_mutable__hatchparaadapt();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock._hatchParaAdapt)
  return _msg;
}

// int32 marking_params_key = 50;
inline void VectorBlock::clear_marking_params_key() {
  _impl_.marking_params_key_ = 0;
}
inline ::int32_t VectorBlock::marking_params_key() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.marking_params_key)
  return _internal_marking_params_key();
}
inline void VectorBlock::set_marking_params_key(::int32_t value) {
  _internal_set_marking_params_key(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.marking_params_key)
}
inline ::int32_t VectorBlock::_internal_marking_params_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.marking_params_key_;
}
inline void VectorBlock::_internal_set_marking_params_key(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.marking_params_key_ = value;
}

// int32 laser_index = 53;
inline void VectorBlock::clear_laser_index() {
  _impl_.laser_index_ = 0;
}
inline ::int32_t VectorBlock::laser_index() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.laser_index)
  return _internal_laser_index();
}
inline void VectorBlock::set_laser_index(::int32_t value) {
  _internal_set_laser_index(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.laser_index)
}
inline ::int32_t VectorBlock::_internal_laser_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.laser_index_;
}
inline void VectorBlock::_internal_set_laser_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.laser_index_ = value;
}

// uint64 repeats = 54;
inline void VectorBlock::clear_repeats() {
  _impl_.repeats_ = ::uint64_t{0u};
}
inline ::uint64_t VectorBlock::repeats() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.repeats)
  return _internal_repeats();
}
inline void VectorBlock::set_repeats(::uint64_t value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:open_vector_format.VectorBlock.repeats)
}
inline ::uint64_t VectorBlock::_internal_repeats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repeats_;
}
inline void VectorBlock::_internal_set_repeats(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repeats_ = value;
}

// .open_vector_format.VectorBlock.VectorBlockMetaData meta_data = 100;
inline bool VectorBlock::has_meta_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.meta_data_ != nullptr);
  return value;
}
inline void VectorBlock::clear_meta_data() {
  if (_impl_.meta_data_ != nullptr) _impl_.meta_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::open_vector_format::VectorBlock_VectorBlockMetaData& VectorBlock::_internal_meta_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::open_vector_format::VectorBlock_VectorBlockMetaData* p = _impl_.meta_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::open_vector_format::VectorBlock_VectorBlockMetaData&>(::open_vector_format::_VectorBlock_VectorBlockMetaData_default_instance_);
}
inline const ::open_vector_format::VectorBlock_VectorBlockMetaData& VectorBlock::meta_data() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.meta_data)
  return _internal_meta_data();
}
inline void VectorBlock::unsafe_arena_set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.meta_data_);
  }
  _impl_.meta_data_ = reinterpret_cast<::open_vector_format::VectorBlock_VectorBlockMetaData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.meta_data)
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::release_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* released = _impl_.meta_data_;
  _impl_.meta_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::unsafe_arena_release_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.meta_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::open_vector_format::VectorBlock_VectorBlockMetaData* temp = _impl_.meta_data_;
  _impl_.meta_data_ = nullptr;
  return temp;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::_internal_mutable_meta_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.meta_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::open_vector_format::VectorBlock_VectorBlockMetaData>(GetArenaForAllocation());
    _impl_.meta_data_ = reinterpret_cast<::open_vector_format::VectorBlock_VectorBlockMetaData*>(p);
  }
  return _impl_.meta_data_;
}
inline ::open_vector_format::VectorBlock_VectorBlockMetaData* VectorBlock::mutable_meta_data() {
  ::open_vector_format::VectorBlock_VectorBlockMetaData* _msg = _internal_mutable_meta_data();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.meta_data)
  return _msg;
}
inline void VectorBlock::set_allocated_meta_data(::open_vector_format::VectorBlock_VectorBlockMetaData* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::open_vector_format::VectorBlock_VectorBlockMetaData*>(_impl_.meta_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::open_vector_format::VectorBlock_VectorBlockMetaData*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.meta_data_ = reinterpret_cast<::open_vector_format::VectorBlock_VectorBlockMetaData*>(value);
  // @@protoc_insertion_point(field_set_allocated:open_vector_format.VectorBlock.meta_data)
}

// .open_vector_format.VectorBlock.LPBFMetadata lpbf_metadata = 101;
inline bool VectorBlock::has_lpbf_metadata() const {
  return process_meta_data_case() == kLpbfMetadata;
}
inline bool VectorBlock::_internal_has_lpbf_metadata() const {
  return process_meta_data_case() == kLpbfMetadata;
}
inline void VectorBlock::set_has_lpbf_metadata() {
  _impl_._oneof_case_[1] = kLpbfMetadata;
}
inline void VectorBlock::clear_lpbf_metadata() {
  if (process_meta_data_case() == kLpbfMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.process_meta_data_.lpbf_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::release_lpbf_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.lpbf_metadata)
  if (process_meta_data_case() == kLpbfMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_LPBFMetadata* temp = _impl_.process_meta_data_.lpbf_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.process_meta_data_.lpbf_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_LPBFMetadata& VectorBlock::_internal_lpbf_metadata() const {
  return process_meta_data_case() == kLpbfMetadata
      ? *_impl_.process_meta_data_.lpbf_metadata_
      : reinterpret_cast<::open_vector_format::VectorBlock_LPBFMetadata&>(::open_vector_format::_VectorBlock_LPBFMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_LPBFMetadata& VectorBlock::lpbf_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.lpbf_metadata)
  return _internal_lpbf_metadata();
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::unsafe_arena_release_lpbf_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.lpbf_metadata)
  if (process_meta_data_case() == kLpbfMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_LPBFMetadata* temp = _impl_.process_meta_data_.lpbf_metadata_;
    _impl_.process_meta_data_.lpbf_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_lpbf_metadata(::open_vector_format::VectorBlock_LPBFMetadata* lpbf_metadata) {
  clear_process_meta_data();
  if (lpbf_metadata) {
    set_has_lpbf_metadata();
    _impl_.process_meta_data_.lpbf_metadata_ = lpbf_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.lpbf_metadata)
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::_internal_mutable_lpbf_metadata() {
  if (process_meta_data_case() != kLpbfMetadata) {
    clear_process_meta_data();
    set_has_lpbf_metadata();
    _impl_.process_meta_data_.lpbf_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_LPBFMetadata >(GetArenaForAllocation());
  }
  return _impl_.process_meta_data_.lpbf_metadata_;
}
inline ::open_vector_format::VectorBlock_LPBFMetadata* VectorBlock::mutable_lpbf_metadata() {
  ::open_vector_format::VectorBlock_LPBFMetadata* _msg = _internal_mutable_lpbf_metadata();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.lpbf_metadata)
  return _msg;
}

// .open_vector_format.VectorBlock.MicroStructuringMetadata micro_structuring_metadata = 102;
inline bool VectorBlock::has_micro_structuring_metadata() const {
  return process_meta_data_case() == kMicroStructuringMetadata;
}
inline bool VectorBlock::_internal_has_micro_structuring_metadata() const {
  return process_meta_data_case() == kMicroStructuringMetadata;
}
inline void VectorBlock::set_has_micro_structuring_metadata() {
  _impl_._oneof_case_[1] = kMicroStructuringMetadata;
}
inline void VectorBlock::clear_micro_structuring_metadata() {
  if (process_meta_data_case() == kMicroStructuringMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.process_meta_data_.micro_structuring_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::release_micro_structuring_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.micro_structuring_metadata)
  if (process_meta_data_case() == kMicroStructuringMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_MicroStructuringMetadata* temp = _impl_.process_meta_data_.micro_structuring_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.process_meta_data_.micro_structuring_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_MicroStructuringMetadata& VectorBlock::_internal_micro_structuring_metadata() const {
  return process_meta_data_case() == kMicroStructuringMetadata
      ? *_impl_.process_meta_data_.micro_structuring_metadata_
      : reinterpret_cast<::open_vector_format::VectorBlock_MicroStructuringMetadata&>(::open_vector_format::_VectorBlock_MicroStructuringMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_MicroStructuringMetadata& VectorBlock::micro_structuring_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.micro_structuring_metadata)
  return _internal_micro_structuring_metadata();
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::unsafe_arena_release_micro_structuring_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.micro_structuring_metadata)
  if (process_meta_data_case() == kMicroStructuringMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_MicroStructuringMetadata* temp = _impl_.process_meta_data_.micro_structuring_metadata_;
    _impl_.process_meta_data_.micro_structuring_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_micro_structuring_metadata(::open_vector_format::VectorBlock_MicroStructuringMetadata* micro_structuring_metadata) {
  clear_process_meta_data();
  if (micro_structuring_metadata) {
    set_has_micro_structuring_metadata();
    _impl_.process_meta_data_.micro_structuring_metadata_ = micro_structuring_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.micro_structuring_metadata)
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::_internal_mutable_micro_structuring_metadata() {
  if (process_meta_data_case() != kMicroStructuringMetadata) {
    clear_process_meta_data();
    set_has_micro_structuring_metadata();
    _impl_.process_meta_data_.micro_structuring_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_MicroStructuringMetadata >(GetArenaForAllocation());
  }
  return _impl_.process_meta_data_.micro_structuring_metadata_;
}
inline ::open_vector_format::VectorBlock_MicroStructuringMetadata* VectorBlock::mutable_micro_structuring_metadata() {
  ::open_vector_format::VectorBlock_MicroStructuringMetadata* _msg = _internal_mutable_micro_structuring_metadata();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.micro_structuring_metadata)
  return _msg;
}

// .open_vector_format.VectorBlock.PolishingMetadata polishing_metadata = 103;
inline bool VectorBlock::has_polishing_metadata() const {
  return process_meta_data_case() == kPolishingMetadata;
}
inline bool VectorBlock::_internal_has_polishing_metadata() const {
  return process_meta_data_case() == kPolishingMetadata;
}
inline void VectorBlock::set_has_polishing_metadata() {
  _impl_._oneof_case_[1] = kPolishingMetadata;
}
inline void VectorBlock::clear_polishing_metadata() {
  if (process_meta_data_case() == kPolishingMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.process_meta_data_.polishing_metadata_;
    }
    clear_has_process_meta_data();
  }
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::release_polishing_metadata() {
  // @@protoc_insertion_point(field_release:open_vector_format.VectorBlock.polishing_metadata)
  if (process_meta_data_case() == kPolishingMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_PolishingMetadata* temp = _impl_.process_meta_data_.polishing_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.process_meta_data_.polishing_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::open_vector_format::VectorBlock_PolishingMetadata& VectorBlock::_internal_polishing_metadata() const {
  return process_meta_data_case() == kPolishingMetadata
      ? *_impl_.process_meta_data_.polishing_metadata_
      : reinterpret_cast<::open_vector_format::VectorBlock_PolishingMetadata&>(::open_vector_format::_VectorBlock_PolishingMetadata_default_instance_);
}
inline const ::open_vector_format::VectorBlock_PolishingMetadata& VectorBlock::polishing_metadata() const {
  // @@protoc_insertion_point(field_get:open_vector_format.VectorBlock.polishing_metadata)
  return _internal_polishing_metadata();
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::unsafe_arena_release_polishing_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:open_vector_format.VectorBlock.polishing_metadata)
  if (process_meta_data_case() == kPolishingMetadata) {
    clear_has_process_meta_data();
    ::open_vector_format::VectorBlock_PolishingMetadata* temp = _impl_.process_meta_data_.polishing_metadata_;
    _impl_.process_meta_data_.polishing_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VectorBlock::unsafe_arena_set_allocated_polishing_metadata(::open_vector_format::VectorBlock_PolishingMetadata* polishing_metadata) {
  clear_process_meta_data();
  if (polishing_metadata) {
    set_has_polishing_metadata();
    _impl_.process_meta_data_.polishing_metadata_ = polishing_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:open_vector_format.VectorBlock.polishing_metadata)
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::_internal_mutable_polishing_metadata() {
  if (process_meta_data_case() != kPolishingMetadata) {
    clear_process_meta_data();
    set_has_polishing_metadata();
    _impl_.process_meta_data_.polishing_metadata_ = CreateMaybeMessage< ::open_vector_format::VectorBlock_PolishingMetadata >(GetArenaForAllocation());
  }
  return _impl_.process_meta_data_.polishing_metadata_;
}
inline ::open_vector_format::VectorBlock_PolishingMetadata* VectorBlock::mutable_polishing_metadata() {
  ::open_vector_format::VectorBlock_PolishingMetadata* _msg = _internal_mutable_polishing_metadata();
  // @@protoc_insertion_point(field_mutable:open_vector_format.VectorBlock.polishing_metadata)
  return _msg;
}

inline bool VectorBlock::has_vector_data() const {
  return vector_data_case() != VECTOR_DATA_NOT_SET;
}
inline void VectorBlock::clear_has_vector_data() {
  _impl_._oneof_case_[0] = VECTOR_DATA_NOT_SET;
}
inline bool VectorBlock::has_process_meta_data() const {
  return process_meta_data_case() != PROCESS_META_DATA_NOT_SET;
}
inline void VectorBlock::clear_has_process_meta_data() {
  _impl_._oneof_case_[1] = PROCESS_META_DATA_NOT_SET;
}
inline VectorBlock::VectorDataCase VectorBlock::vector_data_case() const {
  return VectorBlock::VectorDataCase(_impl_._oneof_case_[0]);
}
inline VectorBlock::ProcessMetaDataCase VectorBlock::process_meta_data_case() const {
  return VectorBlock::ProcessMetaDataCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// AxisAlignedBox2D

// float x_min = 1;
inline void AxisAlignedBox2D::clear_x_min() {
  _impl_.x_min_ = 0;
}
inline float AxisAlignedBox2D::x_min() const {
  // @@protoc_insertion_point(field_get:open_vector_format.AxisAlignedBox2D.x_min)
  return _internal_x_min();
}
inline void AxisAlignedBox2D::set_x_min(float value) {
  _internal_set_x_min(value);
  // @@protoc_insertion_point(field_set:open_vector_format.AxisAlignedBox2D.x_min)
}
inline float AxisAlignedBox2D::_internal_x_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_min_;
}
inline void AxisAlignedBox2D::_internal_set_x_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_min_ = value;
}

// float y_min = 2;
inline void AxisAlignedBox2D::clear_y_min() {
  _impl_.y_min_ = 0;
}
inline float AxisAlignedBox2D::y_min() const {
  // @@protoc_insertion_point(field_get:open_vector_format.AxisAlignedBox2D.y_min)
  return _internal_y_min();
}
inline void AxisAlignedBox2D::set_y_min(float value) {
  _internal_set_y_min(value);
  // @@protoc_insertion_point(field_set:open_vector_format.AxisAlignedBox2D.y_min)
}
inline float AxisAlignedBox2D::_internal_y_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_min_;
}
inline void AxisAlignedBox2D::_internal_set_y_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_min_ = value;
}

// float x_max = 3;
inline void AxisAlignedBox2D::clear_x_max() {
  _impl_.x_max_ = 0;
}
inline float AxisAlignedBox2D::x_max() const {
  // @@protoc_insertion_point(field_get:open_vector_format.AxisAlignedBox2D.x_max)
  return _internal_x_max();
}
inline void AxisAlignedBox2D::set_x_max(float value) {
  _internal_set_x_max(value);
  // @@protoc_insertion_point(field_set:open_vector_format.AxisAlignedBox2D.x_max)
}
inline float AxisAlignedBox2D::_internal_x_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_max_;
}
inline void AxisAlignedBox2D::_internal_set_x_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_max_ = value;
}

// float y_max = 4;
inline void AxisAlignedBox2D::clear_y_max() {
  _impl_.y_max_ = 0;
}
inline float AxisAlignedBox2D::y_max() const {
  // @@protoc_insertion_point(field_get:open_vector_format.AxisAlignedBox2D.y_max)
  return _internal_y_max();
}
inline void AxisAlignedBox2D::set_y_max(float value) {
  _internal_set_y_max(value);
  // @@protoc_insertion_point(field_set:open_vector_format.AxisAlignedBox2D.y_max)
}
inline float AxisAlignedBox2D::_internal_y_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_max_;
}
inline void AxisAlignedBox2D::_internal_set_y_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_max_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace open_vector_format


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::open_vector_format::MarkingParams_MarkingMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::MarkingParams_MarkingMode>() {
  return ::open_vector_format::MarkingParams_MarkingMode_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::MarkingParams_WobbleMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::MarkingParams_WobbleMode>() {
  return ::open_vector_format::MarkingParams_WobbleMode_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::Part_ProcessStrategy_HatchingPattern> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::Part_ProcessStrategy_HatchingPattern>() {
  return ::open_vector_format::Part_ProcessStrategy_HatchingPattern_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType>() {
  return ::open_vector_format::WorkPlane_WorkPlaneMetaData_closedContour_ContourType_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::VectorBlock_LPBFMetadata_SkinType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::VectorBlock_LPBFMetadata_SkinType>() {
  return ::open_vector_format::VectorBlock_LPBFMetadata_SkinType_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea>() {
  return ::open_vector_format::VectorBlock_LPBFMetadata_SkinCoreStrategyArea_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter>() {
  return ::open_vector_format::VectorBlock_LineSequenceParaAdapt_AdaptedParameter_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::VectorBlock_PartArea> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::VectorBlock_PartArea>() {
  return ::open_vector_format::VectorBlock_PartArea_descriptor();
}
template <>
struct is_proto_enum<::open_vector_format::VectorBlock_StructureType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::open_vector_format::VectorBlock_StructureType>() {
  return ::open_vector_format::VectorBlock_StructureType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_open_5fvector_5fformat_2eproto_2epb_2eh
