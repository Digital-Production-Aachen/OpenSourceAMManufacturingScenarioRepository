// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: open_vector_format.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenVectorFormat {

  /// <summary>Holder for reflection information generated from open_vector_format.proto</summary>
  public static partial class OpenVectorFormatReflection {

    #region Descriptor
    /// <summary>File descriptor for open_vector_format.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpenVectorFormatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhvcGVuX3ZlY3Rvcl9mb3JtYXQucHJvdG8SEm9wZW5fdmVjdG9yX2Zvcm1h",
            "dCKeBQoDSm9iEjIKC3dvcmtfcGxhbmVzGAEgAygLMh0ub3Blbl92ZWN0b3Jf",
            "Zm9ybWF0LldvcmtQbGFuZRI6Cg1qb2JfbWV0YV9kYXRhGAIgASgLMiMub3Bl",
            "bl92ZWN0b3JfZm9ybWF0LkpvYi5Kb2JNZXRhRGF0YRJJChJtYXJraW5nX3Bh",
            "cmFtc19tYXAYAyADKAsyLS5vcGVuX3ZlY3Rvcl9mb3JtYXQuSm9iLk1hcmtp",
            "bmdQYXJhbXNNYXBFbnRyeRI4CglwYXJ0c19tYXAYBCADKAsyJS5vcGVuX3Zl",
            "Y3Rvcl9mb3JtYXQuSm9iLlBhcnRzTWFwRW50cnkSOQoOam9iX3BhcmFtZXRl",
            "cnMYBSABKAsyIS5vcGVuX3ZlY3Rvcl9mb3JtYXQuSm9iUGFyYW1ldGVycxIX",
            "Cg9udW1fd29ya19wbGFuZXMYBiABKAUaWgoVTWFya2luZ1BhcmFtc01hcEVu",
            "dHJ5EgsKA2tleRgBIAEoBRIwCgV2YWx1ZRgCIAEoCzIhLm9wZW5fdmVjdG9y",
            "X2Zvcm1hdC5NYXJraW5nUGFyYW1zOgI4ARpJCg1QYXJ0c01hcEVudHJ5EgsK",
            "A2tleRgBIAEoBRInCgV2YWx1ZRgCIAEoCzIYLm9wZW5fdmVjdG9yX2Zvcm1h",
            "dC5QYXJ0OgI4ARqmAQoLSm9iTWV0YURhdGESGQoRam9iX2NyZWF0aW9uX3Rp",
            "bWUYASABKAMSDwoHdmVyc2lvbhgCIAEoBBIQCghqb2JfbmFtZRgDIAEoCRIO",
            "CgZhdXRob3IYBCABKAkSEwoLZGVzY3JpcHRpb24YBSABKAkSNAoGYm91bmRz",
            "GAYgASgLMiQub3Blbl92ZWN0b3JfZm9ybWF0LkF4aXNBbGlnbmVkQm94MkQi",
            "egoNSm9iUGFyYW1ldGVycxIlCh1wcmVoZWF0aW5nX3RlbXBlcmF0dXJfaW5f",
            "ZGdfYxgBIAEoARIgChhzaGllbGRpbmdfZ2FzX2RpcmVjdGlvbnMYAiADKAES",
            "IAoYbWF0ZXJpYWxfZmVlZF9kaXJlY3Rpb25zGAMgAygBIoUICg1NYXJraW5n",
            "UGFyYW1zEhgKEGxhc2VyX3Bvd2VyX2luX3cYASABKAISHwoXbGFzZXJfc3Bl",
            "ZWRfaW5fbW1fcGVyX3MYAiABKAISHwoXbGFzZXJfZm9jdXNfc2hpZnRfaW5f",
            "bW0YAyABKAISIQoZcG9pbnRfZXhwb3N1cmVfdGltZV9pbl91cxgEIAEoAhIa",
            "ChJqdW1wX3NwZWVkX2luX21tX3MYBSABKAISIgoacG9pbnRfZXhwb3N1cmVf",
            "cmVwZXRpdGlvbnMYBiABKAISHQoVcmVwZXRpdGlvbl9yYXRlX2luX2h6GAcg",
            "ASgEEh4KFmxhc2VyX3B1bHNlc19wZXJfYnVyc3QYCCABKAQSIwobcHVsc2VE",
            "dXJhdGlvbkluRmVtdG9zZWNvbmRzGAkgASgEEkMKDG1hcmtpbmdfbW9kZRgK",
            "IAEoDjItLm9wZW5fdmVjdG9yX2Zvcm1hdC5NYXJraW5nUGFyYW1zLk1hcmtp",
            "bmdNb2RlEhgKEGp1bXBfZGVsYXlfaW5fdXMYCyABKAISHQoVbGFzZXJfb2Zm",
            "X2RlbGF5X2luX3VzGAwgASgCEhwKFGxhc2VyX29uX2RlbGF5X2luX3VzGA0g",
            "ASgCEhgKEG1hcmtfZGVsYXlfaW5fdXMYDiABKAISGwoTcG9seWdvbl9kZWxh",
            "eV9pbl91cxgPIAEoAhIWCg50aW1lX2xhZ19pbl91cxgQIAEoAhIcChRsYXNl",
            "cl9vbl9zaGlmdF9pbl91cxgRIAEoAhINCgVsaW1pdBgSIAEoAhIUCgxuX3By",
            "ZXZfaW5fdXMYEyABKAISFAoMbl9wb3N0X2luX3VzGBQgASgCEhsKE3dvYl9m",
            "cmVxdWVuY3lfaW5faHoYFSABKAISGgoSd29iX2FtcF9sb25nX2luX21tGBYg",
            "ASgCEhsKE3dvYl9hbXBfdHJhbnNfaW5fbW0YFyABKAISQQoLd29iYmxlX21v",
            "ZGUYGCABKA4yLC5vcGVuX3ZlY3Rvcl9mb3JtYXQuTWFya2luZ1BhcmFtcy5X",
            "b2JibGVNb2RlEj4KDXBvd2VyR3JhZGllbnQYGSABKAsyJy5vcGVuX3ZlY3Rv",
            "cl9mb3JtYXQuUG93ZXJHcmFkaWVudFBhcmFtcxIMCgRuYW1lGBogASgJIjoK",
            "C01hcmtpbmdNb2RlEgoKBk5PX1NLWRAAEgkKBVNLWV8xEAESCQoFU0tZXzIQ",
            "AhIJCgVTS1lfMxADImIKCldvYmJsZU1vZGUSDQoJTk9fV09CQkxFEAASEgoO",
            "RUxMSVBTRV9XT0JCTEUQARIZChVTVEFORElOR19FSUdIVF9XT0JCTEUQAhIW",
            "ChJMWUlOR19FSUdIVF9XT0JCTEUQA0oGCIABEKUBIkMKE1Bvd2VyR3JhZGll",
            "bnRQYXJhbXMSEwoLbWluUG93ZXJJblcYASABKAISFwoPZ3JhZGllbnRJbldQ",
            "ZXJTGAIgASgCIoULCgRQYXJ0EgwKBG5hbWUYASABKAkSPAoNZ2VvbWV0cnlf",
            "aW5mbxgCIAEoCzIlLm9wZW5fdmVjdG9yX2Zvcm1hdC5QYXJ0Lkdlb21ldHJ5",
            "SW5mbxIzCghtYXRlcmlhbBgDIAEoCzIhLm9wZW5fdmVjdG9yX2Zvcm1hdC5Q",
            "YXJ0Lk1hdGVyaWFsEkIKEHByb2Nlc3Nfc3RyYXRlZ3kYBCABKAsyKC5vcGVu",
            "X3ZlY3Rvcl9mb3JtYXQuUGFydC5Qcm9jZXNzU3RyYXRlZ3kSSgoYdXBfc2tp",
            "bl9wcm9jZXNzX3N0cmF0ZWd5GAUgASgLMigub3Blbl92ZWN0b3JfZm9ybWF0",
            "LlBhcnQuUHJvY2Vzc1N0cmF0ZWd5EkwKGmRvd25fc2tpbl9wcm9jZXNzX3N0",
            "cmF0ZWd5GAYgASgLMigub3Blbl92ZWN0b3JfZm9ybWF0LlBhcnQuUHJvY2Vz",
            "c1N0cmF0ZWd5EkQKDmV4cG9zdXJlX29yZGVyGAcgAygLMiwub3Blbl92ZWN0",
            "b3JfZm9ybWF0LlZlY3RvckJsb2NrLkxQQkZNZXRhZGF0YRIYChBwYXJlbnRf",
            "cGFydF9uYW1lGAggASgJGp8BCgxHZW9tZXRyeUluZm8SFQoNdm9sdW1lX2lu",
            "X21tMxgBIAEoARIdChVzdXBwb3J0X3ZvbHVtZV9pbl9tbTMYAiABKAESGgoS",
            "YnVpbGRfaGVpZ2h0X2luX21tGAMgASgBEhsKE3N1cmZhY2VfYXJlYV9pbl9t",
            "bTIYBCABKAESIAoYcHJvamVjdGVkX3N1cmZhY2VfaW5fbW0yGAUgASgBGiQK",
            "CE1hdGVyaWFsEgoKAmlkGAEgASgEEgwKBG5hbWUYAiABKAka9QUKD1Byb2Nl",
            "c3NTdHJhdGVneRIYChByb3RfYW5nbGVfaW5fZGVnGAEgASgCEh4KFmluY3Jl",
            "bWVudF9hbmdsZV9pbl9kZWcYAiABKAISEwoLc2hpZnRfaW5fbW0YAyABKAIS",
            "GQoRZXh0ZW5kX2ludG9faW5fbW0YBCABKAISIgoacGF0dGVybl9oYXRjaF9s",
            "ZW5ndGhfaW5fbW0YDSABKAISUgoQaGF0Y2hpbmdfcGF0dGVybhgMIAEoDjI4",
            "Lm9wZW5fdmVjdG9yX2Zvcm1hdC5QYXJ0LlByb2Nlc3NTdHJhdGVneS5IYXRj",
            "aGluZ1BhdHRlcm4SHQoVbGF5ZXJfdGhpY2tuZXNzX2luX21tGAUgASgCEhwK",
            "FGhhdGNoX2Rpc3RhbmNlX2luX21tGAYgASgCEiQKHGhhdGNoX2NvbnRvdXJf",
            "ZGlzdGFuY2VfaW5fbW0YByABKAISHQoVb3ZlcmhhbmdfYW5nbGVfaW5fZGVn",
            "GAggASgCEhwKFGNvbnRvdXJfb2Zmc2V0X2luX21tGAkgASgCEhoKEm51bWJl",
            "cl9vZl9jb250b3VycxgKIAEoBRIeChZjb250b3VyX2Rpc3RhbmNlX2luX21t",
            "GAsgASgCEgwKBG5hbWUYWiABKAkSWAoVYWRkaXRpb25hbF9wYXJhbWV0ZXJz",
            "GGQgAygLMjkub3Blbl92ZWN0b3JfZm9ybWF0LlBhcnQuUHJvY2Vzc1N0cmF0",
            "ZWd5LlByb3ByaWV0YXJ5UGFyYW0aVgoQUHJvcHJpZXRhcnlQYXJhbRISCgpw",
            "YXJhbV9uYW1lGAEgASgJEhMKC3BhcmFtX3ZhbHVlGAIgASgBEhkKEXBhcmFt",
            "X2Rlc2NyaXB0aW9uGAMgASgJImQKD0hhdGNoaW5nUGF0dGVybhISCg5VTklE",
            "SVJFQ1RJT05BTBAAEhEKDUJJRElSRUNUSU9OQUwQARIQCgxDSEVDS0VSQk9B",
            "UkQQAhILCgdTVFJJUEVTEAMSCwoHSEVYQUdPThAEIvIJCglXb3JrUGxhbmUS",
            "NgoNdmVjdG9yX2Jsb2NrcxgBIAMoCzIfLm9wZW5fdmVjdG9yX2Zvcm1hdC5W",
            "ZWN0b3JCbG9jaxITCgt4X3Bvc19pbl9tbRgCIAEoAhITCgt5X3Bvc19pbl9t",
            "bRgDIAEoAhITCgt6X3Bvc19pbl9tbRgEIAEoAhIUCgx4X3JvdF9pbl9kZWcY",
            "BSABKAISFAoMeV9yb3RfaW5fZGVnGAYgASgCEhQKDHpfcm90X2luX2RlZxgH",
            "IAEoAhISCgpudW1fYmxvY2tzGAggASgFEg8KB3JlcGVhdHMYCSABKA0SGQoR",
            "d29ya19wbGFuZV9udW1iZXIYCiABKAUSFAoMbWFjaGluZV90eXBlGAsgASgJ",
            "EiEKGWFkZGl0aW9uYWxfYXhpc19wb3NpdGlvbnMYDCADKAISQgoJbWV0YV9k",
            "YXRhGA0gASgLMi8ub3Blbl92ZWN0b3JfZm9ybWF0LldvcmtQbGFuZS5Xb3Jr",
            "UGxhbmVNZXRhRGF0YRr4BQoRV29ya1BsYW5lTWV0YURhdGESIQoZdG90YWxf",
            "c2Nhbl9kaXN0YW5jZV9pbl9tbRgBIAEoARIhChl0b3RhbF9qdW1wX2Rpc3Rh",
            "bmNlX2luX21tGAIgASgBElQKC3BhdGNoZXNfbWFwGAMgAygLMj8ub3Blbl92",
            "ZWN0b3JfZm9ybWF0LldvcmtQbGFuZS5Xb3JrUGxhbmVNZXRhRGF0YS5QYXRj",
            "aGVzTWFwRW50cnkSEAoIbWF4UG93ZXIYBCABKAISEAoIbWluUG93ZXIYBSAB",
            "KAISTwoIY29udG91cnMYBiADKAsyPS5vcGVuX3ZlY3Rvcl9mb3JtYXQuV29y",
            "a1BsYW5lLldvcmtQbGFuZU1ldGFEYXRhLmNsb3NlZENvbnRvdXISNAoGQm91",
            "bmRzGAcgASgLMiQub3Blbl92ZWN0b3JfZm9ybWF0LkF4aXNBbGlnbmVkQm94",
            "MkQaVgoPUGF0Y2hlc01hcEVudHJ5EgsKA2tleRgBIAEoBRIyCgV2YWx1ZRgC",
            "IAEoCzIjLm9wZW5fdmVjdG9yX2Zvcm1hdC5Xb3JrUGxhbmUuUGF0Y2g6AjgB",
            "GsMCCg1jbG9zZWRDb250b3VyEiwKJGNvbnRvdXJfc2VjdGlvbl92ZWN0b3Jf",
            "YmxvY2tfaW5kaWNlcxgBIAMoBRIUCgxhcmVhX2luX21tXzIYAiABKAISFAoM",
            "bGVuZ3RoX2luX21tGAMgASgCEhQKDHBhcmVudF9pbmRleBgFIAEoBRIWCg53",
            "aW5kaW5nX251bWJlchgGIAEoBRJXCgR0eXBlGAcgASgOMkkub3Blbl92ZWN0",
            "b3JfZm9ybWF0LldvcmtQbGFuZS5Xb3JrUGxhbmVNZXRhRGF0YS5jbG9zZWRD",
            "b250b3VyLkNvbnRvdXJUeXBlIlEKC0NvbnRvdXJUeXBlEhYKElBBUlRfT1VU",
            "RVJfQ09OVE9VUhAAEhYKElBBUlRfSU5ORVJfQ09OVE9VUhABEhIKDk9GRlNF",
            "VF9DT05UT1VSEAIadAoFUGF0Y2gSQwoNb3V0ZXJfY29udG91chgBIAEoCzIs",
            "Lm9wZW5fdmVjdG9yX2Zvcm1hdC5WZWN0b3JCbG9jay5MaW5lU2VxdWVuY2US",
            "CQoBdRgCIAEoAhIJCgF2GAMgASgCEhAKCGxheWVyX2lkGAQgASgFIu8YCgtW",
            "ZWN0b3JCbG9jaxJFCg1saW5lX3NlcXVlbmNlGAEgASgLMiwub3Blbl92ZWN0",
            "b3JfZm9ybWF0LlZlY3RvckJsb2NrLkxpbmVTZXF1ZW5jZUgAEjsKCF9oYXRj",
            "aGVzGAIgASgLMicub3Blbl92ZWN0b3JfZm9ybWF0LlZlY3RvckJsb2NrLkhh",
            "dGNoZXNIABJHCg5wb2ludF9zZXF1ZW5jZRgDIAEoCzItLm9wZW5fdmVjdG9y",
            "X2Zvcm1hdC5WZWN0b3JCbG9jay5Qb2ludFNlcXVlbmNlSAASNQoFX2FyY3MY",
            "BCABKAsyJC5vcGVuX3ZlY3Rvcl9mb3JtYXQuVmVjdG9yQmxvY2suQXJjc0gA",
            "EjwKCGVsbGlwc2VzGAUgASgLMigub3Blbl92ZWN0b3JfZm9ybWF0LlZlY3Rv",
            "ckJsb2NrLkVsbGlwc2VzSAASSgoQbGluZV9zZXF1ZW5jZV8zZBgGIAEoCzIu",
            "Lm9wZW5fdmVjdG9yX2Zvcm1hdC5WZWN0b3JCbG9jay5MaW5lU2VxdWVuY2Uz",
            "REgAEj8KCmhhdGNoZXNfM2QYByABKAsyKS5vcGVuX3ZlY3Rvcl9mb3JtYXQu",
            "VmVjdG9yQmxvY2suSGF0Y2hlczNESAASTAoRcG9pbnRfc2VxdWVuY2VfM2QY",
            "CCABKAsyLy5vcGVuX3ZlY3Rvcl9mb3JtYXQuVmVjdG9yQmxvY2suUG9pbnRT",
            "ZXF1ZW5jZTNESAASOQoHYXJjc18zZBgJIAEoCzImLm9wZW5fdmVjdG9yX2Zv",
            "cm1hdC5WZWN0b3JCbG9jay5BcmNzM0RIABJHCg5leHBvc3VyZV9wYXVzZRgK",
            "IAEoCzItLm9wZW5fdmVjdG9yX2Zvcm1hdC5WZWN0b3JCbG9jay5FeHBvc3Vy",
            "ZVBhdXNlSAASWQoYbGluZV9zZXF1ZW5jZV9wYXJhX2FkYXB0GAsgASgLMjUu",
            "b3Blbl92ZWN0b3JfZm9ybWF0LlZlY3RvckJsb2NrLkxpbmVTZXF1ZW5jZVBh",
            "cmFBZGFwdEgAEksKD19oYXRjaFBhcmFBZGFwdBgMIAEoCzIwLm9wZW5fdmVj",
            "dG9yX2Zvcm1hdC5WZWN0b3JCbG9jay5IYXRjaGVzUGFyYUFkYXB0SAASGgoS",
            "bWFya2luZ19wYXJhbXNfa2V5GDIgASgFEhMKC2xhc2VyX2luZGV4GDUgASgF",
            "Eg8KB3JlcGVhdHMYNiABKAQSRgoJbWV0YV9kYXRhGGQgASgLMjMub3Blbl92",
            "ZWN0b3JfZm9ybWF0LlZlY3RvckJsb2NrLlZlY3RvckJsb2NrTWV0YURhdGES",
            "RQoNbHBiZl9tZXRhZGF0YRhlIAEoCzIsLm9wZW5fdmVjdG9yX2Zvcm1hdC5W",
            "ZWN0b3JCbG9jay5MUEJGTWV0YWRhdGFIARJeChptaWNyb19zdHJ1Y3R1cmlu",
            "Z19tZXRhZGF0YRhmIAEoCzI4Lm9wZW5fdmVjdG9yX2Zvcm1hdC5WZWN0b3JC",
            "bG9jay5NaWNyb1N0cnVjdHVyaW5nTWV0YWRhdGFIARJPChJwb2xpc2hpbmdf",
            "bWV0YWRhdGEYZyABKAsyMS5vcGVuX3ZlY3Rvcl9mb3JtYXQuVmVjdG9yQmxv",
            "Y2suUG9saXNoaW5nTWV0YWRhdGFIARrkAQoTVmVjdG9yQmxvY2tNZXRhRGF0",
            "YRIhChl0b3RhbF9zY2FuX2Rpc3RhbmNlX2luX21tGAEgASgBEiEKGXRvdGFs",
            "X2p1bXBfZGlzdGFuY2VfaW5fbW0YAiABKAESEAoIcGFydF9rZXkYAyABKAUS",
            "EQoJcGF0Y2hfa2V5GAQgASgFEhUKDWNvbnRvdXJfaW5kZXgYBSABKAUSNAoG",
            "Ym91bmRzGAYgASgLMiQub3Blbl92ZWN0b3JfZm9ybWF0LkF4aXNBbGlnbmVk",
            "Qm94MkQSFQoNZGlzcGxheV9jb2xvchgHIAEoBRrPAwoMTFBCRk1ldGFkYXRh",
            "EjsKCXBhcnRfYXJlYRgBIAEoDjIoLm9wZW5fdmVjdG9yX2Zvcm1hdC5WZWN0",
            "b3JCbG9jay5QYXJ0QXJlYRJICglza2luX3R5cGUYAiABKA4yNS5vcGVuX3Zl",
            "Y3Rvcl9mb3JtYXQuVmVjdG9yQmxvY2suTFBCRk1ldGFkYXRhLlNraW5UeXBl",
            "EmIKF3NraW5fY29yZV9zdHJhdGVneV9hcmVhGAMgASgOMkEub3Blbl92ZWN0",
            "b3JfZm9ybWF0LlZlY3RvckJsb2NrLkxQQkZNZXRhZGF0YS5Ta2luQ29yZVN0",
            "cmF0ZWd5QXJlYRJFCg5zdHJ1Y3R1cmVfdHlwZRgEIAEoDjItLm9wZW5fdmVj",
            "dG9yX2Zvcm1hdC5WZWN0b3JCbG9jay5TdHJ1Y3R1cmVUeXBlEhIKCnJlZXhw",
            "b3N1cmUYBSABKAgiMwoIU2tpblR5cGUSCwoHSU5fU0tJThAAEg0KCURPV05f",
            "U0tJThABEgsKB1VQX1NLSU4QAiJEChRTa2luQ29yZVN0cmF0ZWd5QXJlYRIO",
            "CgpPVVRFUl9IVUxMEAASCAoEQ09SRRABEhIKDklOQkVUV0VFTl9IVUxMEAIa",
            "ngEKGE1pY3JvU3RydWN0dXJpbmdNZXRhZGF0YRI7CglwYXJ0X2FyZWEYASAB",
            "KA4yKC5vcGVuX3ZlY3Rvcl9mb3JtYXQuVmVjdG9yQmxvY2suUGFydEFyZWES",
            "RQoOc3RydWN0dXJlX3R5cGUYAiABKA4yLS5vcGVuX3ZlY3Rvcl9mb3JtYXQu",
            "VmVjdG9yQmxvY2suU3RydWN0dXJlVHlwZRoTChFQb2xpc2hpbmdNZXRhZGF0",
            "YRoeCgxMaW5lU2VxdWVuY2USDgoGcG9pbnRzGAEgAygCGiAKDkxpbmVTZXF1",
            "ZW5jZTNEEg4KBnBvaW50cxgBIAMoAhoZCgdIYXRjaGVzEg4KBnBvaW50cxgB",
            "IAMoAhobCglIYXRjaGVzM0QSDgoGcG9pbnRzGAEgAygCGh8KDVBvaW50U2Vx",
            "dWVuY2USDgoGcG9pbnRzGAEgAygCGiEKD1BvaW50U2VxdWVuY2UzRBIOCgZw",
            "b2ludHMYASADKAIaSgoEQXJjcxINCgVhbmdsZRgBIAEoARIQCghzdGFydF9k",
            "eBgCIAEoAhIQCghzdGFydF9keRgDIAEoAhIPCgdjZW50ZXJzGAQgAygCGl4K",
            "BkFyY3MzRBINCgVhbmdsZRgBIAEoARIQCghzdGFydF9keBgCIAEoAhIQCghz",
            "dGFydF9keRgDIAEoAhIQCghzdGFydF9kehgEIAEoAhIPCgdjZW50ZXJzGAUg",
            "AygCGmsKCEVsbGlwc2VzEgkKAWEYASABKAISCQoBYhgCIAEoAhIMCgRwaGkw",
            "GAMgASgBEjsKDWVsbGlwc2VzX2FyY3MYBCABKAsyJC5vcGVuX3ZlY3Rvcl9m",
            "b3JtYXQuVmVjdG9yQmxvY2suQXJjcxokCg1FeHBvc3VyZVBhdXNlEhMKC3Bh",
            "dXNlX2luX3VzGAEgASgEGpgCChVMaW5lU2VxdWVuY2VQYXJhQWRhcHQSGQoR",
            "cG9pbnRzX3dpdGhfcGFyYXMYASADKAISWQoJcGFyYW1ldGVyGAIgASgOMkYu",
            "b3Blbl92ZWN0b3JfZm9ybWF0LlZlY3RvckJsb2NrLkxpbmVTZXF1ZW5jZVBh",
            "cmFBZGFwdC5BZGFwdGVkUGFyYW1ldGVyIogBChBBZGFwdGVkUGFyYW1ldGVy",
            "EhQKEExBU0VSX1BPV0VSX0lOX1cQABIbChdMQVNFUl9GT0NVU19TSElGVF9J",
            "Tl9NTRABEhwKGExBU0VSX1BVTFNFX0xFTkdUSF9JTl9VUxACEiMKH0xBU0VS",
            "X1BVTFNFX1JFUElUSU9OX1JBVEVfSU5fSFoQAxpmChBIYXRjaGVzUGFyYUFk",
            "YXB0ElIKE2hhdGNoQXNMaW5lc2VxdWVuY2UYASADKAsyNS5vcGVuX3ZlY3Rv",
            "cl9mb3JtYXQuVmVjdG9yQmxvY2suTGluZVNlcXVlbmNlUGFyYUFkYXB0IjsK",
            "CFBhcnRBcmVhEgoKBlZPTFVNRRAAEgsKB0NPTlRPVVIQARIWChJUUkFOU0lU",
            "SU9OX0NPTlRPVVIQAiJFCg1TdHJ1Y3R1cmVUeXBlEggKBFBBUlQQABILCgdT",
            "VVBQT1JUEAESEQoNV0lSRVNUUlVDVFVSRRACEgoKBlBPSU5UUxADQg0KC3Zl",
            "Y3Rvcl9kYXRhQhMKEXByb2Nlc3NfbWV0YV9kYXRhIk4KEEF4aXNBbGlnbmVk",
            "Qm94MkQSDQoFeF9taW4YASABKAISDQoFeV9taW4YAiABKAISDQoFeF9tYXgY",
            "AyABKAISDQoFeV9tYXgYBCABKAJCPVo7Z2l0aHViLmNvbS9kaWdpdGFsLXBy",
            "b2R1Y3Rpb24tYWFjaGVuL29wZW52ZWN0b3Jmb3JtYXQvcHJvdG9iBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Job), global::OpenVectorFormat.Job.Parser, new[]{ "WorkPlanes", "JobMetaData", "MarkingParamsMap", "PartsMap", "JobParameters", "NumWorkPlanes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Job.Types.JobMetaData), global::OpenVectorFormat.Job.Types.JobMetaData.Parser, new[]{ "JobCreationTime", "Version", "JobName", "Author", "Description", "Bounds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.JobParameters), global::OpenVectorFormat.JobParameters.Parser, new[]{ "PreheatingTemperaturInDgC", "ShieldingGasDirections", "MaterialFeedDirections" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.MarkingParams), global::OpenVectorFormat.MarkingParams.Parser, new[]{ "LaserPowerInW", "LaserSpeedInMmPerS", "LaserFocusShiftInMm", "PointExposureTimeInUs", "JumpSpeedInMmS", "PointExposureRepetitions", "RepetitionRateInHz", "LaserPulsesPerBurst", "PulseDurationInFemtoseconds", "MarkingMode", "JumpDelayInUs", "LaserOffDelayInUs", "LaserOnDelayInUs", "MarkDelayInUs", "PolygonDelayInUs", "TimeLagInUs", "LaserOnShiftInUs", "Limit", "NPrevInUs", "NPostInUs", "WobFrequencyInHz", "WobAmpLongInMm", "WobAmpTransInMm", "WobbleMode", "PowerGradient", "Name" }, null, new[]{ typeof(global::OpenVectorFormat.MarkingParams.Types.MarkingMode), typeof(global::OpenVectorFormat.MarkingParams.Types.WobbleMode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.PowerGradientParams), global::OpenVectorFormat.PowerGradientParams.Parser, new[]{ "MinPowerInW", "GradientInWPerS" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Part), global::OpenVectorFormat.Part.Parser, new[]{ "Name", "GeometryInfo", "Material", "ProcessStrategy", "UpSkinProcessStrategy", "DownSkinProcessStrategy", "ExposureOrder", "ParentPartName" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Part.Types.GeometryInfo), global::OpenVectorFormat.Part.Types.GeometryInfo.Parser, new[]{ "VolumeInMm3", "SupportVolumeInMm3", "BuildHeightInMm", "SurfaceAreaInMm2", "ProjectedSurfaceInMm2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Part.Types.Material), global::OpenVectorFormat.Part.Types.Material.Parser, new[]{ "Id", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Part.Types.ProcessStrategy), global::OpenVectorFormat.Part.Types.ProcessStrategy.Parser, new[]{ "RotAngleInDeg", "IncrementAngleInDeg", "ShiftInMm", "ExtendIntoInMm", "PatternHatchLengthInMm", "HatchingPattern", "LayerThicknessInMm", "HatchDistanceInMm", "HatchContourDistanceInMm", "OverhangAngleInDeg", "ContourOffsetInMm", "NumberOfContours", "ContourDistanceInMm", "Name", "AdditionalParameters" }, null, new[]{ typeof(global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam), global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam.Parser, new[]{ "ParamName", "ParamValue", "ParamDescription" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.WorkPlane), global::OpenVectorFormat.WorkPlane.Parser, new[]{ "VectorBlocks", "XPosInMm", "YPosInMm", "ZPosInMm", "XRotInDeg", "YRotInDeg", "ZRotInDeg", "NumBlocks", "Repeats", "WorkPlaneNumber", "MachineType", "AdditionalAxisPositions", "MetaData" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData), global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Parser, new[]{ "TotalScanDistanceInMm", "TotalJumpDistanceInMm", "PatchesMap", "MaxPower", "MinPower", "Contours", "Bounds" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour), global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Parser, new[]{ "ContourSectionVectorBlockIndices", "AreaInMm2", "LengthInMm", "ParentIndex", "WindingNumber", "Type" }, null, new[]{ typeof(global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.WorkPlane.Types.Patch), global::OpenVectorFormat.WorkPlane.Types.Patch.Parser, new[]{ "OuterContour", "U", "V", "LayerId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock), global::OpenVectorFormat.VectorBlock.Parser, new[]{ "LineSequence", "Hatches", "PointSequence", "Arcs", "Ellipses", "LineSequence3D", "Hatches3D", "PointSequence3D", "Arcs3D", "ExposurePause", "LineSequenceParaAdapt", "HatchParaAdapt", "MarkingParamsKey", "LaserIndex", "Repeats", "MetaData", "LpbfMetadata", "MicroStructuringMetadata", "PolishingMetadata" }, new[]{ "VectorData", "ProcessMetaData" }, new[]{ typeof(global::OpenVectorFormat.VectorBlock.Types.PartArea), typeof(global::OpenVectorFormat.VectorBlock.Types.StructureType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData), global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData.Parser, new[]{ "TotalScanDistanceInMm", "TotalJumpDistanceInMm", "PartKey", "PatchKey", "ContourIndex", "Bounds", "DisplayColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata), global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Parser, new[]{ "PartArea", "SkinType", "SkinCoreStrategyArea", "StructureType", "Reexposure" }, null, new[]{ typeof(global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType), typeof(global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata), global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata.Parser, new[]{ "PartArea", "StructureType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata), global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.LineSequence), global::OpenVectorFormat.VectorBlock.Types.LineSequence.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.LineSequence3D), global::OpenVectorFormat.VectorBlock.Types.LineSequence3D.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.Hatches), global::OpenVectorFormat.VectorBlock.Types.Hatches.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.Hatches3D), global::OpenVectorFormat.VectorBlock.Types.Hatches3D.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.PointSequence), global::OpenVectorFormat.VectorBlock.Types.PointSequence.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.PointSequence3D), global::OpenVectorFormat.VectorBlock.Types.PointSequence3D.Parser, new[]{ "Points" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.Arcs), global::OpenVectorFormat.VectorBlock.Types.Arcs.Parser, new[]{ "Angle", "StartDx", "StartDy", "Centers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.Arcs3D), global::OpenVectorFormat.VectorBlock.Types.Arcs3D.Parser, new[]{ "Angle", "StartDx", "StartDy", "StartDz", "Centers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.Ellipses), global::OpenVectorFormat.VectorBlock.Types.Ellipses.Parser, new[]{ "A", "B", "Phi0", "EllipsesArcs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.ExposurePause), global::OpenVectorFormat.VectorBlock.Types.ExposurePause.Parser, new[]{ "PauseInUs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt), global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Parser, new[]{ "PointsWithParas", "Parameter" }, null, new[]{ typeof(global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt), global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt.Parser, new[]{ "HatchAsLinesequence" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVectorFormat.AxisAlignedBox2D), global::OpenVectorFormat.AxisAlignedBox2D.Parser, new[]{ "XMin", "YMin", "XMax", "YMax" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Represents one single production job. May be used as a central (very) large object containing
  ///all information, or as a "shell" with no or incomplete WorkPlane information to break down object size.
  /// </summary>
  public sealed partial class Job : pb::IMessage<Job>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Job> _parser = new pb::MessageParser<Job>(() => new Job());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Job> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Job() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Job(Job other) : this() {
      workPlanes_ = other.workPlanes_.Clone();
      jobMetaData_ = other.jobMetaData_ != null ? other.jobMetaData_.Clone() : null;
      markingParamsMap_ = other.markingParamsMap_.Clone();
      partsMap_ = other.partsMap_.Clone();
      jobParameters_ = other.jobParameters_ != null ? other.jobParameters_.Clone() : null;
      numWorkPlanes_ = other.numWorkPlanes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Job Clone() {
      return new Job(this);
    }

    /// <summary>Field number for the "work_planes" field.</summary>
    public const int WorkPlanesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenVectorFormat.WorkPlane> _repeated_workPlanes_codec
        = pb::FieldCodec.ForMessage(10, global::OpenVectorFormat.WorkPlane.Parser);
    private readonly pbc::RepeatedField<global::OpenVectorFormat.WorkPlane> workPlanes_ = new pbc::RepeatedField<global::OpenVectorFormat.WorkPlane>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenVectorFormat.WorkPlane> WorkPlanes {
      get { return workPlanes_; }
    }

    /// <summary>Field number for the "job_meta_data" field.</summary>
    public const int JobMetaDataFieldNumber = 2;
    private global::OpenVectorFormat.Job.Types.JobMetaData jobMetaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Job.Types.JobMetaData JobMetaData {
      get { return jobMetaData_; }
      set {
        jobMetaData_ = value;
      }
    }

    /// <summary>Field number for the "marking_params_map" field.</summary>
    public const int MarkingParamsMapFieldNumber = 3;
    private static readonly pbc::MapField<int, global::OpenVectorFormat.MarkingParams>.Codec _map_markingParamsMap_codec
        = new pbc::MapField<int, global::OpenVectorFormat.MarkingParams>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::OpenVectorFormat.MarkingParams.Parser), 26);
    private readonly pbc::MapField<int, global::OpenVectorFormat.MarkingParams> markingParamsMap_ = new pbc::MapField<int, global::OpenVectorFormat.MarkingParams>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::OpenVectorFormat.MarkingParams> MarkingParamsMap {
      get { return markingParamsMap_; }
    }

    /// <summary>Field number for the "parts_map" field.</summary>
    public const int PartsMapFieldNumber = 4;
    private static readonly pbc::MapField<int, global::OpenVectorFormat.Part>.Codec _map_partsMap_codec
        = new pbc::MapField<int, global::OpenVectorFormat.Part>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::OpenVectorFormat.Part.Parser), 34);
    private readonly pbc::MapField<int, global::OpenVectorFormat.Part> partsMap_ = new pbc::MapField<int, global::OpenVectorFormat.Part>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::OpenVectorFormat.Part> PartsMap {
      get { return partsMap_; }
    }

    /// <summary>Field number for the "job_parameters" field.</summary>
    public const int JobParametersFieldNumber = 5;
    private global::OpenVectorFormat.JobParameters jobParameters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.JobParameters JobParameters {
      get { return jobParameters_; }
      set {
        jobParameters_ = value;
      }
    }

    /// <summary>Field number for the "num_work_planes" field.</summary>
    public const int NumWorkPlanesFieldNumber = 6;
    private int numWorkPlanes_;
    /// <summary>
    ///Number of Layer (LPBF) /3DPatches (Structuring)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumWorkPlanes {
      get { return numWorkPlanes_; }
      set {
        numWorkPlanes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Job);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Job other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!workPlanes_.Equals(other.workPlanes_)) return false;
      if (!object.Equals(JobMetaData, other.JobMetaData)) return false;
      if (!MarkingParamsMap.Equals(other.MarkingParamsMap)) return false;
      if (!PartsMap.Equals(other.PartsMap)) return false;
      if (!object.Equals(JobParameters, other.JobParameters)) return false;
      if (NumWorkPlanes != other.NumWorkPlanes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= workPlanes_.GetHashCode();
      if (jobMetaData_ != null) hash ^= JobMetaData.GetHashCode();
      hash ^= MarkingParamsMap.GetHashCode();
      hash ^= PartsMap.GetHashCode();
      if (jobParameters_ != null) hash ^= JobParameters.GetHashCode();
      if (NumWorkPlanes != 0) hash ^= NumWorkPlanes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      workPlanes_.WriteTo(output, _repeated_workPlanes_codec);
      if (jobMetaData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobMetaData);
      }
      markingParamsMap_.WriteTo(output, _map_markingParamsMap_codec);
      partsMap_.WriteTo(output, _map_partsMap_codec);
      if (jobParameters_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(JobParameters);
      }
      if (NumWorkPlanes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumWorkPlanes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      workPlanes_.WriteTo(ref output, _repeated_workPlanes_codec);
      if (jobMetaData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(JobMetaData);
      }
      markingParamsMap_.WriteTo(ref output, _map_markingParamsMap_codec);
      partsMap_.WriteTo(ref output, _map_partsMap_codec);
      if (jobParameters_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(JobParameters);
      }
      if (NumWorkPlanes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumWorkPlanes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += workPlanes_.CalculateSize(_repeated_workPlanes_codec);
      if (jobMetaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobMetaData);
      }
      size += markingParamsMap_.CalculateSize(_map_markingParamsMap_codec);
      size += partsMap_.CalculateSize(_map_partsMap_codec);
      if (jobParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JobParameters);
      }
      if (NumWorkPlanes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumWorkPlanes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Job other) {
      if (other == null) {
        return;
      }
      workPlanes_.Add(other.workPlanes_);
      if (other.jobMetaData_ != null) {
        if (jobMetaData_ == null) {
          JobMetaData = new global::OpenVectorFormat.Job.Types.JobMetaData();
        }
        JobMetaData.MergeFrom(other.JobMetaData);
      }
      markingParamsMap_.MergeFrom(other.markingParamsMap_);
      partsMap_.MergeFrom(other.partsMap_);
      if (other.jobParameters_ != null) {
        if (jobParameters_ == null) {
          JobParameters = new global::OpenVectorFormat.JobParameters();
        }
        JobParameters.MergeFrom(other.JobParameters);
      }
      if (other.NumWorkPlanes != 0) {
        NumWorkPlanes = other.NumWorkPlanes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            workPlanes_.AddEntriesFrom(input, _repeated_workPlanes_codec);
            break;
          }
          case 18: {
            if (jobMetaData_ == null) {
              JobMetaData = new global::OpenVectorFormat.Job.Types.JobMetaData();
            }
            input.ReadMessage(JobMetaData);
            break;
          }
          case 26: {
            markingParamsMap_.AddEntriesFrom(input, _map_markingParamsMap_codec);
            break;
          }
          case 34: {
            partsMap_.AddEntriesFrom(input, _map_partsMap_codec);
            break;
          }
          case 42: {
            if (jobParameters_ == null) {
              JobParameters = new global::OpenVectorFormat.JobParameters();
            }
            input.ReadMessage(JobParameters);
            break;
          }
          case 48: {
            NumWorkPlanes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            workPlanes_.AddEntriesFrom(ref input, _repeated_workPlanes_codec);
            break;
          }
          case 18: {
            if (jobMetaData_ == null) {
              JobMetaData = new global::OpenVectorFormat.Job.Types.JobMetaData();
            }
            input.ReadMessage(JobMetaData);
            break;
          }
          case 26: {
            markingParamsMap_.AddEntriesFrom(ref input, _map_markingParamsMap_codec);
            break;
          }
          case 34: {
            partsMap_.AddEntriesFrom(ref input, _map_partsMap_codec);
            break;
          }
          case 42: {
            if (jobParameters_ == null) {
              JobParameters = new global::OpenVectorFormat.JobParameters();
            }
            input.ReadMessage(JobParameters);
            break;
          }
          case 48: {
            NumWorkPlanes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Job message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///Metadata: Represents metadata related to the job object itself
      /// </summary>
      public sealed partial class JobMetaData : pb::IMessage<JobMetaData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<JobMetaData> _parser = new pb::MessageParser<JobMetaData>(() => new JobMetaData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<JobMetaData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.Job.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public JobMetaData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public JobMetaData(JobMetaData other) : this() {
          jobCreationTime_ = other.jobCreationTime_;
          version_ = other.version_;
          jobName_ = other.jobName_;
          author_ = other.author_;
          description_ = other.description_;
          bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public JobMetaData Clone() {
          return new JobMetaData(this);
        }

        /// <summary>Field number for the "job_creation_time" field.</summary>
        public const int JobCreationTimeFieldNumber = 1;
        private long jobCreationTime_;
        /// <summary>
        ///jobCreationTime in UNIX time (number of seconds since January 1, 1970 12:00am UTC)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long JobCreationTime {
          get { return jobCreationTime_; }
          set {
            jobCreationTime_ = value;
          }
        }

        /// <summary>Field number for the "version" field.</summary>
        public const int VersionFieldNumber = 2;
        private ulong version_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong Version {
          get { return version_; }
          set {
            version_ = value;
          }
        }

        /// <summary>Field number for the "job_name" field.</summary>
        public const int JobNameFieldNumber = 3;
        private string jobName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string JobName {
          get { return jobName_; }
          set {
            jobName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "author" field.</summary>
        public const int AuthorFieldNumber = 4;
        private string author_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Author {
          get { return author_; }
          set {
            author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 5;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bounds" field.</summary>
        public const int BoundsFieldNumber = 6;
        private global::OpenVectorFormat.AxisAlignedBox2D bounds_;
        /// <summary>
        ///2D axis aligned bounding box of all workplanes vector block coordinates
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.AxisAlignedBox2D Bounds {
          get { return bounds_; }
          set {
            bounds_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as JobMetaData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(JobMetaData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (JobCreationTime != other.JobCreationTime) return false;
          if (Version != other.Version) return false;
          if (JobName != other.JobName) return false;
          if (Author != other.Author) return false;
          if (Description != other.Description) return false;
          if (!object.Equals(Bounds, other.Bounds)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (JobCreationTime != 0L) hash ^= JobCreationTime.GetHashCode();
          if (Version != 0UL) hash ^= Version.GetHashCode();
          if (JobName.Length != 0) hash ^= JobName.GetHashCode();
          if (Author.Length != 0) hash ^= Author.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (bounds_ != null) hash ^= Bounds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (JobCreationTime != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(JobCreationTime);
          }
          if (Version != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Version);
          }
          if (JobName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(JobName);
          }
          if (Author.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Author);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Description);
          }
          if (bounds_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Bounds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (JobCreationTime != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(JobCreationTime);
          }
          if (Version != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Version);
          }
          if (JobName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(JobName);
          }
          if (Author.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Author);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(Description);
          }
          if (bounds_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Bounds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (JobCreationTime != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(JobCreationTime);
          }
          if (Version != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
          }
          if (JobName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(JobName);
          }
          if (Author.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (bounds_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(JobMetaData other) {
          if (other == null) {
            return;
          }
          if (other.JobCreationTime != 0L) {
            JobCreationTime = other.JobCreationTime;
          }
          if (other.Version != 0UL) {
            Version = other.Version;
          }
          if (other.JobName.Length != 0) {
            JobName = other.JobName;
          }
          if (other.Author.Length != 0) {
            Author = other.Author;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.bounds_ != null) {
            if (bounds_ == null) {
              Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
            }
            Bounds.MergeFrom(other.Bounds);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                JobCreationTime = input.ReadInt64();
                break;
              }
              case 16: {
                Version = input.ReadUInt64();
                break;
              }
              case 26: {
                JobName = input.ReadString();
                break;
              }
              case 34: {
                Author = input.ReadString();
                break;
              }
              case 42: {
                Description = input.ReadString();
                break;
              }
              case 50: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                JobCreationTime = input.ReadInt64();
                break;
              }
              case 16: {
                Version = input.ReadUInt64();
                break;
              }
              case 26: {
                JobName = input.ReadString();
                break;
              }
              case 34: {
                Author = input.ReadString();
                break;
              }
              case 42: {
                Description = input.ReadString();
                break;
              }
              case 50: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///Process parameters applying to the job as a whole
  /// </summary>
  public sealed partial class JobParameters : pb::IMessage<JobParameters>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JobParameters> _parser = new pb::MessageParser<JobParameters>(() => new JobParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JobParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JobParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JobParameters(JobParameters other) : this() {
      preheatingTemperaturInDgC_ = other.preheatingTemperaturInDgC_;
      shieldingGasDirections_ = other.shieldingGasDirections_.Clone();
      materialFeedDirections_ = other.materialFeedDirections_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JobParameters Clone() {
      return new JobParameters(this);
    }

    /// <summary>Field number for the "preheating_temperatur_in_dg_c" field.</summary>
    public const int PreheatingTemperaturInDgCFieldNumber = 1;
    private double preheatingTemperaturInDgC_;
    /// <summary>
    ///setpoint temperature of a globally effective heating system (e.g. build chamber/substrate plate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PreheatingTemperaturInDgC {
      get { return preheatingTemperaturInDgC_; }
      set {
        preheatingTemperaturInDgC_ = value;
      }
    }

    /// <summary>Field number for the "shielding_gas_directions" field.</summary>
    public const int ShieldingGasDirectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_shieldingGasDirections_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> shieldingGasDirections_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///vector of main direction of a shielding gas flow (xy or xyz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> ShieldingGasDirections {
      get { return shieldingGasDirections_; }
    }

    /// <summary>Field number for the "material_feed_directions" field.</summary>
    public const int MaterialFeedDirectionsFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_materialFeedDirections_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> materialFeedDirections_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///vector of main direction of a material feed (e.g. powder coater, powder feed, extrusion nozzle) (xy or xyz)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> MaterialFeedDirections {
      get { return materialFeedDirections_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JobParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JobParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PreheatingTemperaturInDgC, other.PreheatingTemperaturInDgC)) return false;
      if(!shieldingGasDirections_.Equals(other.shieldingGasDirections_)) return false;
      if(!materialFeedDirections_.Equals(other.materialFeedDirections_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PreheatingTemperaturInDgC != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PreheatingTemperaturInDgC);
      hash ^= shieldingGasDirections_.GetHashCode();
      hash ^= materialFeedDirections_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PreheatingTemperaturInDgC != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PreheatingTemperaturInDgC);
      }
      shieldingGasDirections_.WriteTo(output, _repeated_shieldingGasDirections_codec);
      materialFeedDirections_.WriteTo(output, _repeated_materialFeedDirections_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PreheatingTemperaturInDgC != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(PreheatingTemperaturInDgC);
      }
      shieldingGasDirections_.WriteTo(ref output, _repeated_shieldingGasDirections_codec);
      materialFeedDirections_.WriteTo(ref output, _repeated_materialFeedDirections_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PreheatingTemperaturInDgC != 0D) {
        size += 1 + 8;
      }
      size += shieldingGasDirections_.CalculateSize(_repeated_shieldingGasDirections_codec);
      size += materialFeedDirections_.CalculateSize(_repeated_materialFeedDirections_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JobParameters other) {
      if (other == null) {
        return;
      }
      if (other.PreheatingTemperaturInDgC != 0D) {
        PreheatingTemperaturInDgC = other.PreheatingTemperaturInDgC;
      }
      shieldingGasDirections_.Add(other.shieldingGasDirections_);
      materialFeedDirections_.Add(other.materialFeedDirections_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            PreheatingTemperaturInDgC = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            shieldingGasDirections_.AddEntriesFrom(input, _repeated_shieldingGasDirections_codec);
            break;
          }
          case 26:
          case 25: {
            materialFeedDirections_.AddEntriesFrom(input, _repeated_materialFeedDirections_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            PreheatingTemperaturInDgC = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            shieldingGasDirections_.AddEntriesFrom(ref input, _repeated_shieldingGasDirections_codec);
            break;
          }
          case 26:
          case 25: {
            materialFeedDirections_.AddEntriesFrom(ref input, _repeated_materialFeedDirections_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Parameters controlling the tool (e.g. laser beam) behaviour
  /// </summary>
  public sealed partial class MarkingParams : pb::IMessage<MarkingParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MarkingParams> _parser = new pb::MessageParser<MarkingParams>(() => new MarkingParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MarkingParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarkingParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarkingParams(MarkingParams other) : this() {
      laserPowerInW_ = other.laserPowerInW_;
      laserSpeedInMmPerS_ = other.laserSpeedInMmPerS_;
      laserFocusShiftInMm_ = other.laserFocusShiftInMm_;
      pointExposureTimeInUs_ = other.pointExposureTimeInUs_;
      jumpSpeedInMmS_ = other.jumpSpeedInMmS_;
      pointExposureRepetitions_ = other.pointExposureRepetitions_;
      repetitionRateInHz_ = other.repetitionRateInHz_;
      laserPulsesPerBurst_ = other.laserPulsesPerBurst_;
      pulseDurationInFemtoseconds_ = other.pulseDurationInFemtoseconds_;
      markingMode_ = other.markingMode_;
      jumpDelayInUs_ = other.jumpDelayInUs_;
      laserOffDelayInUs_ = other.laserOffDelayInUs_;
      laserOnDelayInUs_ = other.laserOnDelayInUs_;
      markDelayInUs_ = other.markDelayInUs_;
      polygonDelayInUs_ = other.polygonDelayInUs_;
      timeLagInUs_ = other.timeLagInUs_;
      laserOnShiftInUs_ = other.laserOnShiftInUs_;
      limit_ = other.limit_;
      nPrevInUs_ = other.nPrevInUs_;
      nPostInUs_ = other.nPostInUs_;
      wobFrequencyInHz_ = other.wobFrequencyInHz_;
      wobAmpLongInMm_ = other.wobAmpLongInMm_;
      wobAmpTransInMm_ = other.wobAmpTransInMm_;
      wobbleMode_ = other.wobbleMode_;
      powerGradient_ = other.powerGradient_ != null ? other.powerGradient_.Clone() : null;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MarkingParams Clone() {
      return new MarkingParams(this);
    }

    /// <summary>Field number for the "laser_power_in_w" field.</summary>
    public const int LaserPowerInWFieldNumber = 1;
    private float laserPowerInW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserPowerInW {
      get { return laserPowerInW_; }
      set {
        laserPowerInW_ = value;
      }
    }

    /// <summary>Field number for the "laser_speed_in_mm_per_s" field.</summary>
    public const int LaserSpeedInMmPerSFieldNumber = 2;
    private float laserSpeedInMmPerS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserSpeedInMmPerS {
      get { return laserSpeedInMmPerS_; }
      set {
        laserSpeedInMmPerS_ = value;
      }
    }

    /// <summary>Field number for the "laser_focus_shift_in_mm" field.</summary>
    public const int LaserFocusShiftInMmFieldNumber = 3;
    private float laserFocusShiftInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserFocusShiftInMm {
      get { return laserFocusShiftInMm_; }
      set {
        laserFocusShiftInMm_ = value;
      }
    }

    /// <summary>Field number for the "point_exposure_time_in_us" field.</summary>
    public const int PointExposureTimeInUsFieldNumber = 4;
    private float pointExposureTimeInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointExposureTimeInUs {
      get { return pointExposureTimeInUs_; }
      set {
        pointExposureTimeInUs_ = value;
      }
    }

    /// <summary>Field number for the "jump_speed_in_mm_s" field.</summary>
    public const int JumpSpeedInMmSFieldNumber = 5;
    private float jumpSpeedInMmS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float JumpSpeedInMmS {
      get { return jumpSpeedInMmS_; }
      set {
        jumpSpeedInMmS_ = value;
      }
    }

    /// <summary>Field number for the "point_exposure_repetitions" field.</summary>
    public const int PointExposureRepetitionsFieldNumber = 6;
    private float pointExposureRepetitions_;
    /// <summary>
    ///gives the number of exposure cycles executed
    ///applies for points only, for movement distance and speed implicitly define this
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointExposureRepetitions {
      get { return pointExposureRepetitions_; }
      set {
        pointExposureRepetitions_ = value;
      }
    }

    /// <summary>Field number for the "repetition_rate_in_hz" field.</summary>
    public const int RepetitionRateInHzFieldNumber = 7;
    private ulong repetitionRateInHz_;
    /// <summary>
    ///repition rate of the exposure cycle, e.g. pulses/bursts etc. per second
    ///0 Hz is defined as continous wave (cw)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RepetitionRateInHz {
      get { return repetitionRateInHz_; }
      set {
        repetitionRateInHz_ = value;
      }
    }

    /// <summary>Field number for the "laser_pulses_per_burst" field.</summary>
    public const int LaserPulsesPerBurstFieldNumber = 8;
    private ulong laserPulsesPerBurst_;
    /// <summary>
    ///for burst mode, number of pulses per burst
    ///0 is defined as no burst mode
    ///pulses in the burst are reapeated with oscillator frequency, pulseDurationInFemtoseconds applies to each pulse
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LaserPulsesPerBurst {
      get { return laserPulsesPerBurst_; }
      set {
        laserPulsesPerBurst_ = value;
      }
    }

    /// <summary>Field number for the "pulseDurationInFemtoseconds" field.</summary>
    public const int PulseDurationInFemtosecondsFieldNumber = 9;
    private ulong pulseDurationInFemtoseconds_;
    /// <summary>
    ///length of one pulse, defines the duty cycle together with repetitionRateInHz and laserPowerInW
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PulseDurationInFemtoseconds {
      get { return pulseDurationInFemtoseconds_; }
      set {
        pulseDurationInFemtoseconds_ = value;
      }
    }

    /// <summary>Field number for the "marking_mode" field.</summary>
    public const int MarkingModeFieldNumber = 10;
    private global::OpenVectorFormat.MarkingParams.Types.MarkingMode markingMode_ = global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky;
    /// <summary>
    ///marking mode switches between normal marking and skywriting modes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.MarkingParams.Types.MarkingMode MarkingMode {
      get { return markingMode_; }
      set {
        markingMode_ = value;
      }
    }

    /// <summary>Field number for the "jump_delay_in_us" field.</summary>
    public const int JumpDelayInUsFieldNumber = 11;
    private float jumpDelayInUs_;
    /// <summary>
    ///Parameters for marking without Skywriting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float JumpDelayInUs {
      get { return jumpDelayInUs_; }
      set {
        jumpDelayInUs_ = value;
      }
    }

    /// <summary>Field number for the "laser_off_delay_in_us" field.</summary>
    public const int LaserOffDelayInUsFieldNumber = 12;
    private float laserOffDelayInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserOffDelayInUs {
      get { return laserOffDelayInUs_; }
      set {
        laserOffDelayInUs_ = value;
      }
    }

    /// <summary>Field number for the "laser_on_delay_in_us" field.</summary>
    public const int LaserOnDelayInUsFieldNumber = 13;
    private float laserOnDelayInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserOnDelayInUs {
      get { return laserOnDelayInUs_; }
      set {
        laserOnDelayInUs_ = value;
      }
    }

    /// <summary>Field number for the "mark_delay_in_us" field.</summary>
    public const int MarkDelayInUsFieldNumber = 14;
    private float markDelayInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarkDelayInUs {
      get { return markDelayInUs_; }
      set {
        markDelayInUs_ = value;
      }
    }

    /// <summary>Field number for the "polygon_delay_in_us" field.</summary>
    public const int PolygonDelayInUsFieldNumber = 15;
    private float polygonDelayInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PolygonDelayInUs {
      get { return polygonDelayInUs_; }
      set {
        polygonDelayInUs_ = value;
      }
    }

    /// <summary>Field number for the "time_lag_in_us" field.</summary>
    public const int TimeLagInUsFieldNumber = 16;
    private float timeLagInUs_;
    /// <summary>
    ///Parameters for marking with Skywriting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TimeLagInUs {
      get { return timeLagInUs_; }
      set {
        timeLagInUs_ = value;
      }
    }

    /// <summary>Field number for the "laser_on_shift_in_us" field.</summary>
    public const int LaserOnShiftInUsFieldNumber = 17;
    private float laserOnShiftInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LaserOnShiftInUs {
      get { return laserOnShiftInUs_; }
      set {
        laserOnShiftInUs_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 18;
    private float limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "n_prev_in_us" field.</summary>
    public const int NPrevInUsFieldNumber = 19;
    private float nPrevInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NPrevInUs {
      get { return nPrevInUs_; }
      set {
        nPrevInUs_ = value;
      }
    }

    /// <summary>Field number for the "n_post_in_us" field.</summary>
    public const int NPostInUsFieldNumber = 20;
    private float nPostInUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NPostInUs {
      get { return nPostInUs_; }
      set {
        nPostInUs_ = value;
      }
    }

    /// <summary>Field number for the "wob_frequency_in_hz" field.</summary>
    public const int WobFrequencyInHzFieldNumber = 21;
    private float wobFrequencyInHz_;
    /// <summary>
    ///Parameters for marking with Wobble
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WobFrequencyInHz {
      get { return wobFrequencyInHz_; }
      set {
        wobFrequencyInHz_ = value;
      }
    }

    /// <summary>Field number for the "wob_amp_long_in_mm" field.</summary>
    public const int WobAmpLongInMmFieldNumber = 22;
    private float wobAmpLongInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WobAmpLongInMm {
      get { return wobAmpLongInMm_; }
      set {
        wobAmpLongInMm_ = value;
      }
    }

    /// <summary>Field number for the "wob_amp_trans_in_mm" field.</summary>
    public const int WobAmpTransInMmFieldNumber = 23;
    private float wobAmpTransInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WobAmpTransInMm {
      get { return wobAmpTransInMm_; }
      set {
        wobAmpTransInMm_ = value;
      }
    }

    /// <summary>Field number for the "wobble_mode" field.</summary>
    public const int WobbleModeFieldNumber = 24;
    private global::OpenVectorFormat.MarkingParams.Types.WobbleMode wobbleMode_ = global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.MarkingParams.Types.WobbleMode WobbleMode {
      get { return wobbleMode_; }
      set {
        wobbleMode_ = value;
      }
    }

    /// <summary>Field number for the "powerGradient" field.</summary>
    public const int PowerGradientFieldNumber = 25;
    private global::OpenVectorFormat.PowerGradientParams powerGradient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.PowerGradientParams PowerGradient {
      get { return powerGradient_; }
      set {
        powerGradient_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 26;
    private string name_ = "";
    /// <summary>
    ///meta data: custom, human readable name of this marking parameter set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MarkingParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MarkingParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserPowerInW, other.LaserPowerInW)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserSpeedInMmPerS, other.LaserSpeedInMmPerS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserFocusShiftInMm, other.LaserFocusShiftInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointExposureTimeInUs, other.PointExposureTimeInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpSpeedInMmS, other.JumpSpeedInMmS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointExposureRepetitions, other.PointExposureRepetitions)) return false;
      if (RepetitionRateInHz != other.RepetitionRateInHz) return false;
      if (LaserPulsesPerBurst != other.LaserPulsesPerBurst) return false;
      if (PulseDurationInFemtoseconds != other.PulseDurationInFemtoseconds) return false;
      if (MarkingMode != other.MarkingMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(JumpDelayInUs, other.JumpDelayInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserOffDelayInUs, other.LaserOffDelayInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserOnDelayInUs, other.LaserOnDelayInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkDelayInUs, other.MarkDelayInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PolygonDelayInUs, other.PolygonDelayInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeLagInUs, other.TimeLagInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LaserOnShiftInUs, other.LaserOnShiftInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Limit, other.Limit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NPrevInUs, other.NPrevInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NPostInUs, other.NPostInUs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WobFrequencyInHz, other.WobFrequencyInHz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WobAmpLongInMm, other.WobAmpLongInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WobAmpTransInMm, other.WobAmpTransInMm)) return false;
      if (WobbleMode != other.WobbleMode) return false;
      if (!object.Equals(PowerGradient, other.PowerGradient)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LaserPowerInW != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserPowerInW);
      if (LaserSpeedInMmPerS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserSpeedInMmPerS);
      if (LaserFocusShiftInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserFocusShiftInMm);
      if (PointExposureTimeInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointExposureTimeInUs);
      if (JumpSpeedInMmS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpSpeedInMmS);
      if (PointExposureRepetitions != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointExposureRepetitions);
      if (RepetitionRateInHz != 0UL) hash ^= RepetitionRateInHz.GetHashCode();
      if (LaserPulsesPerBurst != 0UL) hash ^= LaserPulsesPerBurst.GetHashCode();
      if (PulseDurationInFemtoseconds != 0UL) hash ^= PulseDurationInFemtoseconds.GetHashCode();
      if (MarkingMode != global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky) hash ^= MarkingMode.GetHashCode();
      if (JumpDelayInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(JumpDelayInUs);
      if (LaserOffDelayInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserOffDelayInUs);
      if (LaserOnDelayInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserOnDelayInUs);
      if (MarkDelayInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkDelayInUs);
      if (PolygonDelayInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PolygonDelayInUs);
      if (TimeLagInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeLagInUs);
      if (LaserOnShiftInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LaserOnShiftInUs);
      if (Limit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Limit);
      if (NPrevInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NPrevInUs);
      if (NPostInUs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NPostInUs);
      if (WobFrequencyInHz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WobFrequencyInHz);
      if (WobAmpLongInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WobAmpLongInMm);
      if (WobAmpTransInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WobAmpTransInMm);
      if (WobbleMode != global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble) hash ^= WobbleMode.GetHashCode();
      if (powerGradient_ != null) hash ^= PowerGradient.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LaserPowerInW != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LaserPowerInW);
      }
      if (LaserSpeedInMmPerS != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LaserSpeedInMmPerS);
      }
      if (LaserFocusShiftInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LaserFocusShiftInMm);
      }
      if (PointExposureTimeInUs != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PointExposureTimeInUs);
      }
      if (JumpSpeedInMmS != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(JumpSpeedInMmS);
      }
      if (PointExposureRepetitions != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PointExposureRepetitions);
      }
      if (RepetitionRateInHz != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(RepetitionRateInHz);
      }
      if (LaserPulsesPerBurst != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(LaserPulsesPerBurst);
      }
      if (PulseDurationInFemtoseconds != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PulseDurationInFemtoseconds);
      }
      if (MarkingMode != global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MarkingMode);
      }
      if (JumpDelayInUs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(JumpDelayInUs);
      }
      if (LaserOffDelayInUs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LaserOffDelayInUs);
      }
      if (LaserOnDelayInUs != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(LaserOnDelayInUs);
      }
      if (MarkDelayInUs != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MarkDelayInUs);
      }
      if (PolygonDelayInUs != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PolygonDelayInUs);
      }
      if (TimeLagInUs != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(TimeLagInUs);
      }
      if (LaserOnShiftInUs != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(LaserOnShiftInUs);
      }
      if (Limit != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Limit);
      }
      if (NPrevInUs != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(NPrevInUs);
      }
      if (NPostInUs != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(NPostInUs);
      }
      if (WobFrequencyInHz != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(WobFrequencyInHz);
      }
      if (WobAmpLongInMm != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(WobAmpLongInMm);
      }
      if (WobAmpTransInMm != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(WobAmpTransInMm);
      }
      if (WobbleMode != global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WobbleMode);
      }
      if (powerGradient_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PowerGradient);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LaserPowerInW != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LaserPowerInW);
      }
      if (LaserSpeedInMmPerS != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LaserSpeedInMmPerS);
      }
      if (LaserFocusShiftInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LaserFocusShiftInMm);
      }
      if (PointExposureTimeInUs != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PointExposureTimeInUs);
      }
      if (JumpSpeedInMmS != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(JumpSpeedInMmS);
      }
      if (PointExposureRepetitions != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PointExposureRepetitions);
      }
      if (RepetitionRateInHz != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(RepetitionRateInHz);
      }
      if (LaserPulsesPerBurst != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(LaserPulsesPerBurst);
      }
      if (PulseDurationInFemtoseconds != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PulseDurationInFemtoseconds);
      }
      if (MarkingMode != global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky) {
        output.WriteRawTag(80);
        output.WriteEnum((int) MarkingMode);
      }
      if (JumpDelayInUs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(JumpDelayInUs);
      }
      if (LaserOffDelayInUs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LaserOffDelayInUs);
      }
      if (LaserOnDelayInUs != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(LaserOnDelayInUs);
      }
      if (MarkDelayInUs != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(MarkDelayInUs);
      }
      if (PolygonDelayInUs != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PolygonDelayInUs);
      }
      if (TimeLagInUs != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(TimeLagInUs);
      }
      if (LaserOnShiftInUs != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(LaserOnShiftInUs);
      }
      if (Limit != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Limit);
      }
      if (NPrevInUs != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(NPrevInUs);
      }
      if (NPostInUs != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(NPostInUs);
      }
      if (WobFrequencyInHz != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(WobFrequencyInHz);
      }
      if (WobAmpLongInMm != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(WobAmpLongInMm);
      }
      if (WobAmpTransInMm != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(WobAmpTransInMm);
      }
      if (WobbleMode != global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) WobbleMode);
      }
      if (powerGradient_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(PowerGradient);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LaserPowerInW != 0F) {
        size += 1 + 4;
      }
      if (LaserSpeedInMmPerS != 0F) {
        size += 1 + 4;
      }
      if (LaserFocusShiftInMm != 0F) {
        size += 1 + 4;
      }
      if (PointExposureTimeInUs != 0F) {
        size += 1 + 4;
      }
      if (JumpSpeedInMmS != 0F) {
        size += 1 + 4;
      }
      if (PointExposureRepetitions != 0F) {
        size += 1 + 4;
      }
      if (RepetitionRateInHz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RepetitionRateInHz);
      }
      if (LaserPulsesPerBurst != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LaserPulsesPerBurst);
      }
      if (PulseDurationInFemtoseconds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PulseDurationInFemtoseconds);
      }
      if (MarkingMode != global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarkingMode);
      }
      if (JumpDelayInUs != 0F) {
        size += 1 + 4;
      }
      if (LaserOffDelayInUs != 0F) {
        size += 1 + 4;
      }
      if (LaserOnDelayInUs != 0F) {
        size += 1 + 4;
      }
      if (MarkDelayInUs != 0F) {
        size += 1 + 4;
      }
      if (PolygonDelayInUs != 0F) {
        size += 1 + 4;
      }
      if (TimeLagInUs != 0F) {
        size += 2 + 4;
      }
      if (LaserOnShiftInUs != 0F) {
        size += 2 + 4;
      }
      if (Limit != 0F) {
        size += 2 + 4;
      }
      if (NPrevInUs != 0F) {
        size += 2 + 4;
      }
      if (NPostInUs != 0F) {
        size += 2 + 4;
      }
      if (WobFrequencyInHz != 0F) {
        size += 2 + 4;
      }
      if (WobAmpLongInMm != 0F) {
        size += 2 + 4;
      }
      if (WobAmpTransInMm != 0F) {
        size += 2 + 4;
      }
      if (WobbleMode != global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WobbleMode);
      }
      if (powerGradient_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerGradient);
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MarkingParams other) {
      if (other == null) {
        return;
      }
      if (other.LaserPowerInW != 0F) {
        LaserPowerInW = other.LaserPowerInW;
      }
      if (other.LaserSpeedInMmPerS != 0F) {
        LaserSpeedInMmPerS = other.LaserSpeedInMmPerS;
      }
      if (other.LaserFocusShiftInMm != 0F) {
        LaserFocusShiftInMm = other.LaserFocusShiftInMm;
      }
      if (other.PointExposureTimeInUs != 0F) {
        PointExposureTimeInUs = other.PointExposureTimeInUs;
      }
      if (other.JumpSpeedInMmS != 0F) {
        JumpSpeedInMmS = other.JumpSpeedInMmS;
      }
      if (other.PointExposureRepetitions != 0F) {
        PointExposureRepetitions = other.PointExposureRepetitions;
      }
      if (other.RepetitionRateInHz != 0UL) {
        RepetitionRateInHz = other.RepetitionRateInHz;
      }
      if (other.LaserPulsesPerBurst != 0UL) {
        LaserPulsesPerBurst = other.LaserPulsesPerBurst;
      }
      if (other.PulseDurationInFemtoseconds != 0UL) {
        PulseDurationInFemtoseconds = other.PulseDurationInFemtoseconds;
      }
      if (other.MarkingMode != global::OpenVectorFormat.MarkingParams.Types.MarkingMode.NoSky) {
        MarkingMode = other.MarkingMode;
      }
      if (other.JumpDelayInUs != 0F) {
        JumpDelayInUs = other.JumpDelayInUs;
      }
      if (other.LaserOffDelayInUs != 0F) {
        LaserOffDelayInUs = other.LaserOffDelayInUs;
      }
      if (other.LaserOnDelayInUs != 0F) {
        LaserOnDelayInUs = other.LaserOnDelayInUs;
      }
      if (other.MarkDelayInUs != 0F) {
        MarkDelayInUs = other.MarkDelayInUs;
      }
      if (other.PolygonDelayInUs != 0F) {
        PolygonDelayInUs = other.PolygonDelayInUs;
      }
      if (other.TimeLagInUs != 0F) {
        TimeLagInUs = other.TimeLagInUs;
      }
      if (other.LaserOnShiftInUs != 0F) {
        LaserOnShiftInUs = other.LaserOnShiftInUs;
      }
      if (other.Limit != 0F) {
        Limit = other.Limit;
      }
      if (other.NPrevInUs != 0F) {
        NPrevInUs = other.NPrevInUs;
      }
      if (other.NPostInUs != 0F) {
        NPostInUs = other.NPostInUs;
      }
      if (other.WobFrequencyInHz != 0F) {
        WobFrequencyInHz = other.WobFrequencyInHz;
      }
      if (other.WobAmpLongInMm != 0F) {
        WobAmpLongInMm = other.WobAmpLongInMm;
      }
      if (other.WobAmpTransInMm != 0F) {
        WobAmpTransInMm = other.WobAmpTransInMm;
      }
      if (other.WobbleMode != global::OpenVectorFormat.MarkingParams.Types.WobbleMode.NoWobble) {
        WobbleMode = other.WobbleMode;
      }
      if (other.powerGradient_ != null) {
        if (powerGradient_ == null) {
          PowerGradient = new global::OpenVectorFormat.PowerGradientParams();
        }
        PowerGradient.MergeFrom(other.PowerGradient);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LaserPowerInW = input.ReadFloat();
            break;
          }
          case 21: {
            LaserSpeedInMmPerS = input.ReadFloat();
            break;
          }
          case 29: {
            LaserFocusShiftInMm = input.ReadFloat();
            break;
          }
          case 37: {
            PointExposureTimeInUs = input.ReadFloat();
            break;
          }
          case 45: {
            JumpSpeedInMmS = input.ReadFloat();
            break;
          }
          case 53: {
            PointExposureRepetitions = input.ReadFloat();
            break;
          }
          case 56: {
            RepetitionRateInHz = input.ReadUInt64();
            break;
          }
          case 64: {
            LaserPulsesPerBurst = input.ReadUInt64();
            break;
          }
          case 72: {
            PulseDurationInFemtoseconds = input.ReadUInt64();
            break;
          }
          case 80: {
            MarkingMode = (global::OpenVectorFormat.MarkingParams.Types.MarkingMode) input.ReadEnum();
            break;
          }
          case 93: {
            JumpDelayInUs = input.ReadFloat();
            break;
          }
          case 101: {
            LaserOffDelayInUs = input.ReadFloat();
            break;
          }
          case 109: {
            LaserOnDelayInUs = input.ReadFloat();
            break;
          }
          case 117: {
            MarkDelayInUs = input.ReadFloat();
            break;
          }
          case 125: {
            PolygonDelayInUs = input.ReadFloat();
            break;
          }
          case 133: {
            TimeLagInUs = input.ReadFloat();
            break;
          }
          case 141: {
            LaserOnShiftInUs = input.ReadFloat();
            break;
          }
          case 149: {
            Limit = input.ReadFloat();
            break;
          }
          case 157: {
            NPrevInUs = input.ReadFloat();
            break;
          }
          case 165: {
            NPostInUs = input.ReadFloat();
            break;
          }
          case 173: {
            WobFrequencyInHz = input.ReadFloat();
            break;
          }
          case 181: {
            WobAmpLongInMm = input.ReadFloat();
            break;
          }
          case 189: {
            WobAmpTransInMm = input.ReadFloat();
            break;
          }
          case 192: {
            WobbleMode = (global::OpenVectorFormat.MarkingParams.Types.WobbleMode) input.ReadEnum();
            break;
          }
          case 202: {
            if (powerGradient_ == null) {
              PowerGradient = new global::OpenVectorFormat.PowerGradientParams();
            }
            input.ReadMessage(PowerGradient);
            break;
          }
          case 210: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            LaserPowerInW = input.ReadFloat();
            break;
          }
          case 21: {
            LaserSpeedInMmPerS = input.ReadFloat();
            break;
          }
          case 29: {
            LaserFocusShiftInMm = input.ReadFloat();
            break;
          }
          case 37: {
            PointExposureTimeInUs = input.ReadFloat();
            break;
          }
          case 45: {
            JumpSpeedInMmS = input.ReadFloat();
            break;
          }
          case 53: {
            PointExposureRepetitions = input.ReadFloat();
            break;
          }
          case 56: {
            RepetitionRateInHz = input.ReadUInt64();
            break;
          }
          case 64: {
            LaserPulsesPerBurst = input.ReadUInt64();
            break;
          }
          case 72: {
            PulseDurationInFemtoseconds = input.ReadUInt64();
            break;
          }
          case 80: {
            MarkingMode = (global::OpenVectorFormat.MarkingParams.Types.MarkingMode) input.ReadEnum();
            break;
          }
          case 93: {
            JumpDelayInUs = input.ReadFloat();
            break;
          }
          case 101: {
            LaserOffDelayInUs = input.ReadFloat();
            break;
          }
          case 109: {
            LaserOnDelayInUs = input.ReadFloat();
            break;
          }
          case 117: {
            MarkDelayInUs = input.ReadFloat();
            break;
          }
          case 125: {
            PolygonDelayInUs = input.ReadFloat();
            break;
          }
          case 133: {
            TimeLagInUs = input.ReadFloat();
            break;
          }
          case 141: {
            LaserOnShiftInUs = input.ReadFloat();
            break;
          }
          case 149: {
            Limit = input.ReadFloat();
            break;
          }
          case 157: {
            NPrevInUs = input.ReadFloat();
            break;
          }
          case 165: {
            NPostInUs = input.ReadFloat();
            break;
          }
          case 173: {
            WobFrequencyInHz = input.ReadFloat();
            break;
          }
          case 181: {
            WobAmpLongInMm = input.ReadFloat();
            break;
          }
          case 189: {
            WobAmpTransInMm = input.ReadFloat();
            break;
          }
          case 192: {
            WobbleMode = (global::OpenVectorFormat.MarkingParams.Types.WobbleMode) input.ReadEnum();
            break;
          }
          case 202: {
            if (powerGradient_ == null) {
              PowerGradient = new global::OpenVectorFormat.PowerGradientParams();
            }
            input.ReadMessage(PowerGradient);
            break;
          }
          case 210: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MarkingParams message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum MarkingMode {
        [pbr::OriginalName("NO_SKY")] NoSky = 0,
        /// <summary>
        ///Skywriting modes 1-3
        /// </summary>
        [pbr::OriginalName("SKY_1")] Sky1 = 1,
        [pbr::OriginalName("SKY_2")] Sky2 = 2,
        [pbr::OriginalName("SKY_3")] Sky3 = 3,
      }

      public enum WobbleMode {
        [pbr::OriginalName("NO_WOBBLE")] NoWobble = 0,
        /// <summary>
        ///ellipse-shape wobble movement perpendicular to the current movement direction
        /// </summary>
        [pbr::OriginalName("ELLIPSE_WOBBLE")] EllipseWobble = 1,
        /// <summary>
        ///8-shape wobble movement perpendicular to the current movement direction
        /// </summary>
        [pbr::OriginalName("STANDING_EIGHT_WOBBLE")] StandingEightWobble = 2,
        /// <summary>
        ///8-shape wobble movement parallel to the current movement direction
        /// </summary>
        [pbr::OriginalName("LYING_EIGHT_WOBBLE")] LyingEightWobble = 3,
      }

    }
    #endregion

  }

  public sealed partial class PowerGradientParams : pb::IMessage<PowerGradientParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PowerGradientParams> _parser = new pb::MessageParser<PowerGradientParams>(() => new PowerGradientParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PowerGradientParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerGradientParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerGradientParams(PowerGradientParams other) : this() {
      minPowerInW_ = other.minPowerInW_;
      gradientInWPerS_ = other.gradientInWPerS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PowerGradientParams Clone() {
      return new PowerGradientParams(this);
    }

    /// <summary>Field number for the "minPowerInW" field.</summary>
    public const int MinPowerInWFieldNumber = 1;
    private float minPowerInW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinPowerInW {
      get { return minPowerInW_; }
      set {
        minPowerInW_ = value;
      }
    }

    /// <summary>Field number for the "gradientInWPerS" field.</summary>
    public const int GradientInWPerSFieldNumber = 2;
    private float gradientInWPerS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float GradientInWPerS {
      get { return gradientInWPerS_; }
      set {
        gradientInWPerS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PowerGradientParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PowerGradientParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPowerInW, other.MinPowerInW)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GradientInWPerS, other.GradientInWPerS)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MinPowerInW != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPowerInW);
      if (GradientInWPerS != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GradientInWPerS);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinPowerInW != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MinPowerInW);
      }
      if (GradientInWPerS != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GradientInWPerS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinPowerInW != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(MinPowerInW);
      }
      if (GradientInWPerS != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GradientInWPerS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MinPowerInW != 0F) {
        size += 1 + 4;
      }
      if (GradientInWPerS != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PowerGradientParams other) {
      if (other == null) {
        return;
      }
      if (other.MinPowerInW != 0F) {
        MinPowerInW = other.MinPowerInW;
      }
      if (other.GradientInWPerS != 0F) {
        GradientInWPerS = other.GradientInWPerS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            MinPowerInW = input.ReadFloat();
            break;
          }
          case 21: {
            GradientInWPerS = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            MinPowerInW = input.ReadFloat();
            break;
          }
          case 21: {
            GradientInWPerS = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Part is a reference to a CAD 3D model instance in this Job.
  ///Instances in a job may differ in their position, orientation, process strategy, marking parameters or support structures,
  ///even if they are derived from the same parent part.
  ///Common parent parts of instances can be identified using the parent_part_name, if set.
  /// </summary>
  public sealed partial class Part : pb::IMessage<Part>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Part> _parser = new pb::MessageParser<Part>(() => new Part());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Part> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Part() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Part(Part other) : this() {
      name_ = other.name_;
      geometryInfo_ = other.geometryInfo_ != null ? other.geometryInfo_.Clone() : null;
      material_ = other.material_ != null ? other.material_.Clone() : null;
      processStrategy_ = other.processStrategy_ != null ? other.processStrategy_.Clone() : null;
      upSkinProcessStrategy_ = other.upSkinProcessStrategy_ != null ? other.upSkinProcessStrategy_.Clone() : null;
      downSkinProcessStrategy_ = other.downSkinProcessStrategy_ != null ? other.downSkinProcessStrategy_.Clone() : null;
      exposureOrder_ = other.exposureOrder_.Clone();
      parentPartName_ = other.parentPartName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Part Clone() {
      return new Part(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geometry_info" field.</summary>
    public const int GeometryInfoFieldNumber = 2;
    private global::OpenVectorFormat.Part.Types.GeometryInfo geometryInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Part.Types.GeometryInfo GeometryInfo {
      get { return geometryInfo_; }
      set {
        geometryInfo_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 3;
    private global::OpenVectorFormat.Part.Types.Material material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Part.Types.Material Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "process_strategy" field.</summary>
    public const int ProcessStrategyFieldNumber = 4;
    private global::OpenVectorFormat.Part.Types.ProcessStrategy processStrategy_;
    /// <summary>
    ///process strategy used for the in skin (volume) of the part
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Part.Types.ProcessStrategy ProcessStrategy {
      get { return processStrategy_; }
      set {
        processStrategy_ = value;
      }
    }

    /// <summary>Field number for the "up_skin_process_strategy" field.</summary>
    public const int UpSkinProcessStrategyFieldNumber = 5;
    private global::OpenVectorFormat.Part.Types.ProcessStrategy upSkinProcessStrategy_;
    /// <summary>
    ///process strategy used for the down skin of the part, if differing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Part.Types.ProcessStrategy UpSkinProcessStrategy {
      get { return upSkinProcessStrategy_; }
      set {
        upSkinProcessStrategy_ = value;
      }
    }

    /// <summary>Field number for the "down_skin_process_strategy" field.</summary>
    public const int DownSkinProcessStrategyFieldNumber = 6;
    private global::OpenVectorFormat.Part.Types.ProcessStrategy downSkinProcessStrategy_;
    /// <summary>
    ///process strategy used for the up skin of the part, if differing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.Part.Types.ProcessStrategy DownSkinProcessStrategy {
      get { return downSkinProcessStrategy_; }
      set {
        downSkinProcessStrategy_ = value;
      }
    }

    /// <summary>Field number for the "exposure_order" field.</summary>
    public const int ExposureOrderFieldNumber = 7;
    private static readonly pb::FieldCodec<global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata> _repeated_exposureOrder_codec
        = pb::FieldCodec.ForMessage(58, global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Parser);
    private readonly pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata> exposureOrder_ = new pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata>();
    /// <summary>
    ///meta data defining the exposure order that was used to order the vector blocks of this part
    ///the first item gets exposed first, e.g. exposure starts with downskin hatches, followed by inskin hatches
    ///two LPBFMetadata objects are added with PartArea set to VOLUME in both, SkinType set to DOWN_SKIN in first and IN_SKIN in second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata> ExposureOrder {
      get { return exposureOrder_; }
    }

    /// <summary>Field number for the "parent_part_name" field.</summary>
    public const int ParentPartNameFieldNumber = 8;
    private string parentPartName_ = "";
    /// <summary>
    ///reference to the original CAD 3D model this instance was created from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ParentPartName {
      get { return parentPartName_; }
      set {
        parentPartName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Part);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Part other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(GeometryInfo, other.GeometryInfo)) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (!object.Equals(ProcessStrategy, other.ProcessStrategy)) return false;
      if (!object.Equals(UpSkinProcessStrategy, other.UpSkinProcessStrategy)) return false;
      if (!object.Equals(DownSkinProcessStrategy, other.DownSkinProcessStrategy)) return false;
      if(!exposureOrder_.Equals(other.exposureOrder_)) return false;
      if (ParentPartName != other.ParentPartName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (geometryInfo_ != null) hash ^= GeometryInfo.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (processStrategy_ != null) hash ^= ProcessStrategy.GetHashCode();
      if (upSkinProcessStrategy_ != null) hash ^= UpSkinProcessStrategy.GetHashCode();
      if (downSkinProcessStrategy_ != null) hash ^= DownSkinProcessStrategy.GetHashCode();
      hash ^= exposureOrder_.GetHashCode();
      if (ParentPartName.Length != 0) hash ^= ParentPartName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (geometryInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GeometryInfo);
      }
      if (material_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Material);
      }
      if (processStrategy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ProcessStrategy);
      }
      if (upSkinProcessStrategy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpSkinProcessStrategy);
      }
      if (downSkinProcessStrategy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DownSkinProcessStrategy);
      }
      exposureOrder_.WriteTo(output, _repeated_exposureOrder_codec);
      if (ParentPartName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ParentPartName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (geometryInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GeometryInfo);
      }
      if (material_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Material);
      }
      if (processStrategy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ProcessStrategy);
      }
      if (upSkinProcessStrategy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UpSkinProcessStrategy);
      }
      if (downSkinProcessStrategy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DownSkinProcessStrategy);
      }
      exposureOrder_.WriteTo(ref output, _repeated_exposureOrder_codec);
      if (ParentPartName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ParentPartName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (geometryInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GeometryInfo);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (processStrategy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProcessStrategy);
      }
      if (upSkinProcessStrategy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpSkinProcessStrategy);
      }
      if (downSkinProcessStrategy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DownSkinProcessStrategy);
      }
      size += exposureOrder_.CalculateSize(_repeated_exposureOrder_codec);
      if (ParentPartName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentPartName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Part other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.geometryInfo_ != null) {
        if (geometryInfo_ == null) {
          GeometryInfo = new global::OpenVectorFormat.Part.Types.GeometryInfo();
        }
        GeometryInfo.MergeFrom(other.GeometryInfo);
      }
      if (other.material_ != null) {
        if (material_ == null) {
          Material = new global::OpenVectorFormat.Part.Types.Material();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.processStrategy_ != null) {
        if (processStrategy_ == null) {
          ProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
        }
        ProcessStrategy.MergeFrom(other.ProcessStrategy);
      }
      if (other.upSkinProcessStrategy_ != null) {
        if (upSkinProcessStrategy_ == null) {
          UpSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
        }
        UpSkinProcessStrategy.MergeFrom(other.UpSkinProcessStrategy);
      }
      if (other.downSkinProcessStrategy_ != null) {
        if (downSkinProcessStrategy_ == null) {
          DownSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
        }
        DownSkinProcessStrategy.MergeFrom(other.DownSkinProcessStrategy);
      }
      exposureOrder_.Add(other.exposureOrder_);
      if (other.ParentPartName.Length != 0) {
        ParentPartName = other.ParentPartName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (geometryInfo_ == null) {
              GeometryInfo = new global::OpenVectorFormat.Part.Types.GeometryInfo();
            }
            input.ReadMessage(GeometryInfo);
            break;
          }
          case 26: {
            if (material_ == null) {
              Material = new global::OpenVectorFormat.Part.Types.Material();
            }
            input.ReadMessage(Material);
            break;
          }
          case 34: {
            if (processStrategy_ == null) {
              ProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(ProcessStrategy);
            break;
          }
          case 42: {
            if (upSkinProcessStrategy_ == null) {
              UpSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(UpSkinProcessStrategy);
            break;
          }
          case 50: {
            if (downSkinProcessStrategy_ == null) {
              DownSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(DownSkinProcessStrategy);
            break;
          }
          case 58: {
            exposureOrder_.AddEntriesFrom(input, _repeated_exposureOrder_codec);
            break;
          }
          case 66: {
            ParentPartName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (geometryInfo_ == null) {
              GeometryInfo = new global::OpenVectorFormat.Part.Types.GeometryInfo();
            }
            input.ReadMessage(GeometryInfo);
            break;
          }
          case 26: {
            if (material_ == null) {
              Material = new global::OpenVectorFormat.Part.Types.Material();
            }
            input.ReadMessage(Material);
            break;
          }
          case 34: {
            if (processStrategy_ == null) {
              ProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(ProcessStrategy);
            break;
          }
          case 42: {
            if (upSkinProcessStrategy_ == null) {
              UpSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(UpSkinProcessStrategy);
            break;
          }
          case 50: {
            if (downSkinProcessStrategy_ == null) {
              DownSkinProcessStrategy = new global::OpenVectorFormat.Part.Types.ProcessStrategy();
            }
            input.ReadMessage(DownSkinProcessStrategy);
            break;
          }
          case 58: {
            exposureOrder_.AddEntriesFrom(ref input, _repeated_exposureOrder_codec);
            break;
          }
          case 66: {
            ParentPartName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Part message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///Metadata related to the geometry of the part
      /// </summary>
      public sealed partial class GeometryInfo : pb::IMessage<GeometryInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GeometryInfo> _parser = new pb::MessageParser<GeometryInfo>(() => new GeometryInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<GeometryInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.Part.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeometryInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeometryInfo(GeometryInfo other) : this() {
          volumeInMm3_ = other.volumeInMm3_;
          supportVolumeInMm3_ = other.supportVolumeInMm3_;
          buildHeightInMm_ = other.buildHeightInMm_;
          surfaceAreaInMm2_ = other.surfaceAreaInMm2_;
          projectedSurfaceInMm2_ = other.projectedSurfaceInMm2_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeometryInfo Clone() {
          return new GeometryInfo(this);
        }

        /// <summary>Field number for the "volume_in_mm3" field.</summary>
        public const int VolumeInMm3FieldNumber = 1;
        private double volumeInMm3_;
        /// <summary>
        ///part volume in cubic millimeters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double VolumeInMm3 {
          get { return volumeInMm3_; }
          set {
            volumeInMm3_ = value;
          }
        }

        /// <summary>Field number for the "support_volume_in_mm3" field.</summary>
        public const int SupportVolumeInMm3FieldNumber = 2;
        private double supportVolumeInMm3_;
        /// <summary>
        ///support volume in cubic millimeters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double SupportVolumeInMm3 {
          get { return supportVolumeInMm3_; }
          set {
            supportVolumeInMm3_ = value;
          }
        }

        /// <summary>Field number for the "build_height_in_mm" field.</summary>
        public const int BuildHeightInMmFieldNumber = 3;
        private double buildHeightInMm_;
        /// <summary>
        ///height (layer) of the top slice in millimeters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double BuildHeightInMm {
          get { return buildHeightInMm_; }
          set {
            buildHeightInMm_ = value;
          }
        }

        /// <summary>Field number for the "surface_area_in_mm2" field.</summary>
        public const int SurfaceAreaInMm2FieldNumber = 4;
        private double surfaceAreaInMm2_;
        /// <summary>
        ///surface area of the 3D model in square millimeters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double SurfaceAreaInMm2 {
          get { return surfaceAreaInMm2_; }
          set {
            surfaceAreaInMm2_ = value;
          }
        }

        /// <summary>Field number for the "projected_surface_in_mm2" field.</summary>
        public const int ProjectedSurfaceInMm2FieldNumber = 5;
        private double projectedSurfaceInMm2_;
        /// <summary>
        ///surface area projected on the biuld plate in square millimeters
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double ProjectedSurfaceInMm2 {
          get { return projectedSurfaceInMm2_; }
          set {
            projectedSurfaceInMm2_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as GeometryInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(GeometryInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolumeInMm3, other.VolumeInMm3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SupportVolumeInMm3, other.SupportVolumeInMm3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BuildHeightInMm, other.BuildHeightInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SurfaceAreaInMm2, other.SurfaceAreaInMm2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProjectedSurfaceInMm2, other.ProjectedSurfaceInMm2)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (VolumeInMm3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolumeInMm3);
          if (SupportVolumeInMm3 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SupportVolumeInMm3);
          if (BuildHeightInMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BuildHeightInMm);
          if (SurfaceAreaInMm2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SurfaceAreaInMm2);
          if (ProjectedSurfaceInMm2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProjectedSurfaceInMm2);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (VolumeInMm3 != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(VolumeInMm3);
          }
          if (SupportVolumeInMm3 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(SupportVolumeInMm3);
          }
          if (BuildHeightInMm != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BuildHeightInMm);
          }
          if (SurfaceAreaInMm2 != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(SurfaceAreaInMm2);
          }
          if (ProjectedSurfaceInMm2 != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(ProjectedSurfaceInMm2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (VolumeInMm3 != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(VolumeInMm3);
          }
          if (SupportVolumeInMm3 != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(SupportVolumeInMm3);
          }
          if (BuildHeightInMm != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(BuildHeightInMm);
          }
          if (SurfaceAreaInMm2 != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(SurfaceAreaInMm2);
          }
          if (ProjectedSurfaceInMm2 != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(ProjectedSurfaceInMm2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (VolumeInMm3 != 0D) {
            size += 1 + 8;
          }
          if (SupportVolumeInMm3 != 0D) {
            size += 1 + 8;
          }
          if (BuildHeightInMm != 0D) {
            size += 1 + 8;
          }
          if (SurfaceAreaInMm2 != 0D) {
            size += 1 + 8;
          }
          if (ProjectedSurfaceInMm2 != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(GeometryInfo other) {
          if (other == null) {
            return;
          }
          if (other.VolumeInMm3 != 0D) {
            VolumeInMm3 = other.VolumeInMm3;
          }
          if (other.SupportVolumeInMm3 != 0D) {
            SupportVolumeInMm3 = other.SupportVolumeInMm3;
          }
          if (other.BuildHeightInMm != 0D) {
            BuildHeightInMm = other.BuildHeightInMm;
          }
          if (other.SurfaceAreaInMm2 != 0D) {
            SurfaceAreaInMm2 = other.SurfaceAreaInMm2;
          }
          if (other.ProjectedSurfaceInMm2 != 0D) {
            ProjectedSurfaceInMm2 = other.ProjectedSurfaceInMm2;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                VolumeInMm3 = input.ReadDouble();
                break;
              }
              case 17: {
                SupportVolumeInMm3 = input.ReadDouble();
                break;
              }
              case 25: {
                BuildHeightInMm = input.ReadDouble();
                break;
              }
              case 33: {
                SurfaceAreaInMm2 = input.ReadDouble();
                break;
              }
              case 41: {
                ProjectedSurfaceInMm2 = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                VolumeInMm3 = input.ReadDouble();
                break;
              }
              case 17: {
                SupportVolumeInMm3 = input.ReadDouble();
                break;
              }
              case 25: {
                BuildHeightInMm = input.ReadDouble();
                break;
              }
              case 33: {
                SurfaceAreaInMm2 = input.ReadDouble();
                break;
              }
              case 41: {
                ProjectedSurfaceInMm2 = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Material : pb::IMessage<Material>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Material> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.Part.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Material() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Material(Material other) : this() {
          id_ = other.id_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Material Clone() {
          return new Material(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Material);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Material other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0UL) hash ^= Id.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Material other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0UL) {
            Id = other.Id;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///Metadata: parameters the job preprocessing program (e.g. Slicer, CAM) used to create the vector data
      /// </summary>
      public sealed partial class ProcessStrategy : pb::IMessage<ProcessStrategy>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ProcessStrategy> _parser = new pb::MessageParser<ProcessStrategy>(() => new ProcessStrategy());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ProcessStrategy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.Part.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ProcessStrategy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ProcessStrategy(ProcessStrategy other) : this() {
          rotAngleInDeg_ = other.rotAngleInDeg_;
          incrementAngleInDeg_ = other.incrementAngleInDeg_;
          shiftInMm_ = other.shiftInMm_;
          extendIntoInMm_ = other.extendIntoInMm_;
          patternHatchLengthInMm_ = other.patternHatchLengthInMm_;
          hatchingPattern_ = other.hatchingPattern_;
          layerThicknessInMm_ = other.layerThicknessInMm_;
          hatchDistanceInMm_ = other.hatchDistanceInMm_;
          hatchContourDistanceInMm_ = other.hatchContourDistanceInMm_;
          overhangAngleInDeg_ = other.overhangAngleInDeg_;
          contourOffsetInMm_ = other.contourOffsetInMm_;
          numberOfContours_ = other.numberOfContours_;
          contourDistanceInMm_ = other.contourDistanceInMm_;
          name_ = other.name_;
          additionalParameters_ = other.additionalParameters_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ProcessStrategy Clone() {
          return new ProcessStrategy(this);
        }

        /// <summary>Field number for the "rot_angle_in_deg" field.</summary>
        public const int RotAngleInDegFieldNumber = 1;
        private float rotAngleInDeg_;
        /// <summary>
        ///start rotation angle of scan patches or layers
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RotAngleInDeg {
          get { return rotAngleInDeg_; }
          set {
            rotAngleInDeg_ = value;
          }
        }

        /// <summary>Field number for the "increment_angle_in_deg" field.</summary>
        public const int IncrementAngleInDegFieldNumber = 2;
        private float incrementAngleInDeg_;
        /// <summary>
        ///Angle increment of scan patches from layer to layer
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float IncrementAngleInDeg {
          get { return incrementAngleInDeg_; }
          set {
            incrementAngleInDeg_ = value;
          }
        }

        /// <summary>Field number for the "shift_in_mm" field.</summary>
        public const int ShiftInMmFieldNumber = 3;
        private float shiftInMm_;
        /// <summary>
        ///Shift of patches in the pattern from layer to layer
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ShiftInMm {
          get { return shiftInMm_; }
          set {
            shiftInMm_ = value;
          }
        }

        /// <summary>Field number for the "extend_into_in_mm" field.</summary>
        public const int ExtendIntoInMmFieldNumber = 4;
        private float extendIntoInMm_;
        /// <summary>
        ///Extension of patches in to each other. Synonym: overlap distance
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ExtendIntoInMm {
          get { return extendIntoInMm_; }
          set {
            extendIntoInMm_ = value;
          }
        }

        /// <summary>Field number for the "pattern_hatch_length_in_mm" field.</summary>
        public const int PatternHatchLengthInMmFieldNumber = 13;
        private float patternHatchLengthInMm_;
        /// <summary>
        ///maximum length of hatches when applying a pattern. Values &lt;= 0 result in no limitation.
        ///for stripes and checkerboard this controls the size of the groups/patches
        ///for single tracks (uni- or bidirectional) this does not apply
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float PatternHatchLengthInMm {
          get { return patternHatchLengthInMm_; }
          set {
            patternHatchLengthInMm_ = value;
          }
        }

        /// <summary>Field number for the "hatching_pattern" field.</summary>
        public const int HatchingPatternFieldNumber = 12;
        private global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern hatchingPattern_ = global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional;
        /// <summary>
        ///pattern type of the hatches that fill the contours
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern HatchingPattern {
          get { return hatchingPattern_; }
          set {
            hatchingPattern_ = value;
          }
        }

        /// <summary>Field number for the "layer_thickness_in_mm" field.</summary>
        public const int LayerThicknessInMmFieldNumber = 5;
        private float layerThicknessInMm_;
        /// <summary>
        ///thickness of a layer/workplane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float LayerThicknessInMm {
          get { return layerThicknessInMm_; }
          set {
            layerThicknessInMm_ = value;
          }
        }

        /// <summary>Field number for the "hatch_distance_in_mm" field.</summary>
        public const int HatchDistanceInMmFieldNumber = 6;
        private float hatchDistanceInMm_;
        /// <summary>
        ///distance between single material tracks
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float HatchDistanceInMm {
          get { return hatchDistanceInMm_; }
          set {
            hatchDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "hatch_contour_distance_in_mm" field.</summary>
        public const int HatchContourDistanceInMmFieldNumber = 7;
        private float hatchContourDistanceInMm_;
        /// <summary>
        ///distance between contour and filling
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float HatchContourDistanceInMm {
          get { return hatchContourDistanceInMm_; }
          set {
            hatchContourDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "overhang_angle_in_deg" field.</summary>
        public const int OverhangAngleInDegFieldNumber = 8;
        private float overhangAngleInDeg_;
        /// <summary>
        ///critical angle that is considered as overhang
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float OverhangAngleInDeg {
          get { return overhangAngleInDeg_; }
          set {
            overhangAngleInDeg_ = value;
          }
        }

        /// <summary>Field number for the "contour_offset_in_mm" field.</summary>
        public const int ContourOffsetInMmFieldNumber = 9;
        private float contourOffsetInMm_;
        /// <summary>
        ///offset of the first contour relative to the computed contour of the geometry.
        ///often reffered to as "beam compensation" as well
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ContourOffsetInMm {
          get { return contourOffsetInMm_; }
          set {
            contourOffsetInMm_ = value;
          }
        }

        /// <summary>Field number for the "number_of_contours" field.</summary>
        public const int NumberOfContoursFieldNumber = 10;
        private int numberOfContours_;
        /// <summary>
        ///number of generated contours. If &lt;= 0, there will only be hatches.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NumberOfContours {
          get { return numberOfContours_; }
          set {
            numberOfContours_ = value;
          }
        }

        /// <summary>Field number for the "contour_distance_in_mm" field.</summary>
        public const int ContourDistanceInMmFieldNumber = 11;
        private float contourDistanceInMm_;
        /// <summary>
        ///distance inbetween multiple contour lines. Only takes effect if number_of_contours > 1.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ContourDistanceInMm {
          get { return contourDistanceInMm_; }
          set {
            contourDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 90;
        private string name_ = "";
        /// <summary>
        ///meta data: custom, human readable name of this process strategy
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "additional_parameters" field.</summary>
        public const int AdditionalParametersFieldNumber = 100;
        private static readonly pb::FieldCodec<global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam> _repeated_additionalParameters_codec
            = pb::FieldCodec.ForMessage(802, global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam.Parser);
        private readonly pbc::RepeatedField<global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam> additionalParameters_ = new pbc::RepeatedField<global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.ProprietaryParam> AdditionalParameters {
          get { return additionalParameters_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ProcessStrategy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ProcessStrategy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotAngleInDeg, other.RotAngleInDeg)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IncrementAngleInDeg, other.IncrementAngleInDeg)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShiftInMm, other.ShiftInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExtendIntoInMm, other.ExtendIntoInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PatternHatchLengthInMm, other.PatternHatchLengthInMm)) return false;
          if (HatchingPattern != other.HatchingPattern) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LayerThicknessInMm, other.LayerThicknessInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HatchDistanceInMm, other.HatchDistanceInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HatchContourDistanceInMm, other.HatchContourDistanceInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OverhangAngleInDeg, other.OverhangAngleInDeg)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContourOffsetInMm, other.ContourOffsetInMm)) return false;
          if (NumberOfContours != other.NumberOfContours) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ContourDistanceInMm, other.ContourDistanceInMm)) return false;
          if (Name != other.Name) return false;
          if(!additionalParameters_.Equals(other.additionalParameters_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (RotAngleInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotAngleInDeg);
          if (IncrementAngleInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IncrementAngleInDeg);
          if (ShiftInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShiftInMm);
          if (ExtendIntoInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExtendIntoInMm);
          if (PatternHatchLengthInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PatternHatchLengthInMm);
          if (HatchingPattern != global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional) hash ^= HatchingPattern.GetHashCode();
          if (LayerThicknessInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LayerThicknessInMm);
          if (HatchDistanceInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HatchDistanceInMm);
          if (HatchContourDistanceInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HatchContourDistanceInMm);
          if (OverhangAngleInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OverhangAngleInDeg);
          if (ContourOffsetInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContourOffsetInMm);
          if (NumberOfContours != 0) hash ^= NumberOfContours.GetHashCode();
          if (ContourDistanceInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ContourDistanceInMm);
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= additionalParameters_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (RotAngleInDeg != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(RotAngleInDeg);
          }
          if (IncrementAngleInDeg != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(IncrementAngleInDeg);
          }
          if (ShiftInMm != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ShiftInMm);
          }
          if (ExtendIntoInMm != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(ExtendIntoInMm);
          }
          if (LayerThicknessInMm != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(LayerThicknessInMm);
          }
          if (HatchDistanceInMm != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(HatchDistanceInMm);
          }
          if (HatchContourDistanceInMm != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(HatchContourDistanceInMm);
          }
          if (OverhangAngleInDeg != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(OverhangAngleInDeg);
          }
          if (ContourOffsetInMm != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(ContourOffsetInMm);
          }
          if (NumberOfContours != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(NumberOfContours);
          }
          if (ContourDistanceInMm != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(ContourDistanceInMm);
          }
          if (HatchingPattern != global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional) {
            output.WriteRawTag(96);
            output.WriteEnum((int) HatchingPattern);
          }
          if (PatternHatchLengthInMm != 0F) {
            output.WriteRawTag(109);
            output.WriteFloat(PatternHatchLengthInMm);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(210, 5);
            output.WriteString(Name);
          }
          additionalParameters_.WriteTo(output, _repeated_additionalParameters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (RotAngleInDeg != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(RotAngleInDeg);
          }
          if (IncrementAngleInDeg != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(IncrementAngleInDeg);
          }
          if (ShiftInMm != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ShiftInMm);
          }
          if (ExtendIntoInMm != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(ExtendIntoInMm);
          }
          if (LayerThicknessInMm != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(LayerThicknessInMm);
          }
          if (HatchDistanceInMm != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(HatchDistanceInMm);
          }
          if (HatchContourDistanceInMm != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(HatchContourDistanceInMm);
          }
          if (OverhangAngleInDeg != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(OverhangAngleInDeg);
          }
          if (ContourOffsetInMm != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(ContourOffsetInMm);
          }
          if (NumberOfContours != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(NumberOfContours);
          }
          if (ContourDistanceInMm != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(ContourDistanceInMm);
          }
          if (HatchingPattern != global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional) {
            output.WriteRawTag(96);
            output.WriteEnum((int) HatchingPattern);
          }
          if (PatternHatchLengthInMm != 0F) {
            output.WriteRawTag(109);
            output.WriteFloat(PatternHatchLengthInMm);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(210, 5);
            output.WriteString(Name);
          }
          additionalParameters_.WriteTo(ref output, _repeated_additionalParameters_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (RotAngleInDeg != 0F) {
            size += 1 + 4;
          }
          if (IncrementAngleInDeg != 0F) {
            size += 1 + 4;
          }
          if (ShiftInMm != 0F) {
            size += 1 + 4;
          }
          if (ExtendIntoInMm != 0F) {
            size += 1 + 4;
          }
          if (PatternHatchLengthInMm != 0F) {
            size += 1 + 4;
          }
          if (HatchingPattern != global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HatchingPattern);
          }
          if (LayerThicknessInMm != 0F) {
            size += 1 + 4;
          }
          if (HatchDistanceInMm != 0F) {
            size += 1 + 4;
          }
          if (HatchContourDistanceInMm != 0F) {
            size += 1 + 4;
          }
          if (OverhangAngleInDeg != 0F) {
            size += 1 + 4;
          }
          if (ContourOffsetInMm != 0F) {
            size += 1 + 4;
          }
          if (NumberOfContours != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfContours);
          }
          if (ContourDistanceInMm != 0F) {
            size += 1 + 4;
          }
          if (Name.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += additionalParameters_.CalculateSize(_repeated_additionalParameters_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ProcessStrategy other) {
          if (other == null) {
            return;
          }
          if (other.RotAngleInDeg != 0F) {
            RotAngleInDeg = other.RotAngleInDeg;
          }
          if (other.IncrementAngleInDeg != 0F) {
            IncrementAngleInDeg = other.IncrementAngleInDeg;
          }
          if (other.ShiftInMm != 0F) {
            ShiftInMm = other.ShiftInMm;
          }
          if (other.ExtendIntoInMm != 0F) {
            ExtendIntoInMm = other.ExtendIntoInMm;
          }
          if (other.PatternHatchLengthInMm != 0F) {
            PatternHatchLengthInMm = other.PatternHatchLengthInMm;
          }
          if (other.HatchingPattern != global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern.Unidirectional) {
            HatchingPattern = other.HatchingPattern;
          }
          if (other.LayerThicknessInMm != 0F) {
            LayerThicknessInMm = other.LayerThicknessInMm;
          }
          if (other.HatchDistanceInMm != 0F) {
            HatchDistanceInMm = other.HatchDistanceInMm;
          }
          if (other.HatchContourDistanceInMm != 0F) {
            HatchContourDistanceInMm = other.HatchContourDistanceInMm;
          }
          if (other.OverhangAngleInDeg != 0F) {
            OverhangAngleInDeg = other.OverhangAngleInDeg;
          }
          if (other.ContourOffsetInMm != 0F) {
            ContourOffsetInMm = other.ContourOffsetInMm;
          }
          if (other.NumberOfContours != 0) {
            NumberOfContours = other.NumberOfContours;
          }
          if (other.ContourDistanceInMm != 0F) {
            ContourDistanceInMm = other.ContourDistanceInMm;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          additionalParameters_.Add(other.additionalParameters_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                RotAngleInDeg = input.ReadFloat();
                break;
              }
              case 21: {
                IncrementAngleInDeg = input.ReadFloat();
                break;
              }
              case 29: {
                ShiftInMm = input.ReadFloat();
                break;
              }
              case 37: {
                ExtendIntoInMm = input.ReadFloat();
                break;
              }
              case 45: {
                LayerThicknessInMm = input.ReadFloat();
                break;
              }
              case 53: {
                HatchDistanceInMm = input.ReadFloat();
                break;
              }
              case 61: {
                HatchContourDistanceInMm = input.ReadFloat();
                break;
              }
              case 69: {
                OverhangAngleInDeg = input.ReadFloat();
                break;
              }
              case 77: {
                ContourOffsetInMm = input.ReadFloat();
                break;
              }
              case 80: {
                NumberOfContours = input.ReadInt32();
                break;
              }
              case 93: {
                ContourDistanceInMm = input.ReadFloat();
                break;
              }
              case 96: {
                HatchingPattern = (global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern) input.ReadEnum();
                break;
              }
              case 109: {
                PatternHatchLengthInMm = input.ReadFloat();
                break;
              }
              case 722: {
                Name = input.ReadString();
                break;
              }
              case 802: {
                additionalParameters_.AddEntriesFrom(input, _repeated_additionalParameters_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                RotAngleInDeg = input.ReadFloat();
                break;
              }
              case 21: {
                IncrementAngleInDeg = input.ReadFloat();
                break;
              }
              case 29: {
                ShiftInMm = input.ReadFloat();
                break;
              }
              case 37: {
                ExtendIntoInMm = input.ReadFloat();
                break;
              }
              case 45: {
                LayerThicknessInMm = input.ReadFloat();
                break;
              }
              case 53: {
                HatchDistanceInMm = input.ReadFloat();
                break;
              }
              case 61: {
                HatchContourDistanceInMm = input.ReadFloat();
                break;
              }
              case 69: {
                OverhangAngleInDeg = input.ReadFloat();
                break;
              }
              case 77: {
                ContourOffsetInMm = input.ReadFloat();
                break;
              }
              case 80: {
                NumberOfContours = input.ReadInt32();
                break;
              }
              case 93: {
                ContourDistanceInMm = input.ReadFloat();
                break;
              }
              case 96: {
                HatchingPattern = (global::OpenVectorFormat.Part.Types.ProcessStrategy.Types.HatchingPattern) input.ReadEnum();
                break;
              }
              case 109: {
                PatternHatchLengthInMm = input.ReadFloat();
                break;
              }
              case 722: {
                Name = input.ReadString();
                break;
              }
              case 802: {
                additionalParameters_.AddEntriesFrom(ref input, _repeated_additionalParameters_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ProcessStrategy message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum HatchingPattern {
            /// <summary>
            ///single hatch lines that follow the same direction. Long jumps are executed back to the start after each line.
            /// </summary>
            [pbr::OriginalName("UNIDIRECTIONAL")] Unidirectional = 0,
            /// <summary>
            ///single hatch lines that alternate directions with short jumps in between
            /// </summary>
            [pbr::OriginalName("BIDIRECTIONAL")] Bidirectional = 1,
            /// <summary>
            ///hatches are seperated into patches with perpendicular direction following a checkerboard pattern
            ///size of each patch is quadratic pattern_hatch_length_in_mm times pattern_hatch_length_in_mm
            ///patch overlap (size of area with two patches) is of size extend_into_in_mm
            /// </summary>
            [pbr::OriginalName("CHECKERBOARD")] Checkerboard = 2,
            /// <summary>
            ///hatches are seperated into patches ("stripes"), but opposed to checkerboard only in one direction perpendicular to the marking direction
            ///size of each patch is pattern_hatch_length_in_mm in marking direction, unrestricted perpendicular to the marking direction
            ///patch overlap (size of area with two patches) is of size extend_into_in_mm
            /// </summary>
            [pbr::OriginalName("STRIPES")] Stripes = 3,
            /// <summary>
            ///hatches are seperated into patches ("hexagon")
            ///size of each sidelength is pattern_hatch_length_in_mm and the long and short diagonal is calculated from it
            ///patch overlap (size of area with two patches) is of size extend_into_in_mm
            /// </summary>
            [pbr::OriginalName("HEXAGON")] Hexagon = 4,
          }

          /// <summary>
          ///generic definition of proprietary parameters descriptor
          /// </summary>
          public sealed partial class ProprietaryParam : pb::IMessage<ProprietaryParam>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<ProprietaryParam> _parser = new pb::MessageParser<ProprietaryParam>(() => new ProprietaryParam());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<ProprietaryParam> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::OpenVectorFormat.Part.Types.ProcessStrategy.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public ProprietaryParam() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public ProprietaryParam(ProprietaryParam other) : this() {
              paramName_ = other.paramName_;
              paramValue_ = other.paramValue_;
              paramDescription_ = other.paramDescription_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public ProprietaryParam Clone() {
              return new ProprietaryParam(this);
            }

            /// <summary>Field number for the "param_name" field.</summary>
            public const int ParamNameFieldNumber = 1;
            private string paramName_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string ParamName {
              get { return paramName_; }
              set {
                paramName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "param_value" field.</summary>
            public const int ParamValueFieldNumber = 2;
            private double paramValue_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public double ParamValue {
              get { return paramValue_; }
              set {
                paramValue_ = value;
              }
            }

            /// <summary>Field number for the "param_description" field.</summary>
            public const int ParamDescriptionFieldNumber = 3;
            private string paramDescription_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string ParamDescription {
              get { return paramDescription_; }
              set {
                paramDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as ProprietaryParam);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(ProprietaryParam other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ParamName != other.ParamName) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ParamValue, other.ParamValue)) return false;
              if (ParamDescription != other.ParamDescription) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (ParamName.Length != 0) hash ^= ParamName.GetHashCode();
              if (ParamValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ParamValue);
              if (ParamDescription.Length != 0) hash ^= ParamDescription.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (ParamName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ParamName);
              }
              if (ParamValue != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(ParamValue);
              }
              if (ParamDescription.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(ParamDescription);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (ParamName.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(ParamName);
              }
              if (ParamValue != 0D) {
                output.WriteRawTag(17);
                output.WriteDouble(ParamValue);
              }
              if (ParamDescription.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(ParamDescription);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (ParamName.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamName);
              }
              if (ParamValue != 0D) {
                size += 1 + 8;
              }
              if (ParamDescription.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamDescription);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(ProprietaryParam other) {
              if (other == null) {
                return;
              }
              if (other.ParamName.Length != 0) {
                ParamName = other.ParamName;
              }
              if (other.ParamValue != 0D) {
                ParamValue = other.ParamValue;
              }
              if (other.ParamDescription.Length != 0) {
                ParamDescription = other.ParamDescription;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ParamName = input.ReadString();
                    break;
                  }
                  case 17: {
                    ParamValue = input.ReadDouble();
                    break;
                  }
                  case 26: {
                    ParamDescription = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    ParamName = input.ReadString();
                    break;
                  }
                  case 17: {
                    ParamValue = input.ReadDouble();
                    break;
                  }
                  case 26: {
                    ParamDescription = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///A WorkingPlane is a 2D working plane of the tool (e.g. laser scanfield, electron beam scan field)
  ///in the global 3D coordinate system that is set by moving one or more physical axis relative to the workpiece.
  ///It follows the same concept as a sketch plane in CAD applications.
  ///Any axis movement that changes the work plane position will require a new WorkingPlane message.
  ///synonyms: Layer (LPBF) / 3DPatches (Structuring) / Scanfields (MultiBeam)
  /// </summary>
  public sealed partial class WorkPlane : pb::IMessage<WorkPlane>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WorkPlane> _parser = new pb::MessageParser<WorkPlane>(() => new WorkPlane());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WorkPlane> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WorkPlane() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WorkPlane(WorkPlane other) : this() {
      vectorBlocks_ = other.vectorBlocks_.Clone();
      xPosInMm_ = other.xPosInMm_;
      yPosInMm_ = other.yPosInMm_;
      zPosInMm_ = other.zPosInMm_;
      xRotInDeg_ = other.xRotInDeg_;
      yRotInDeg_ = other.yRotInDeg_;
      zRotInDeg_ = other.zRotInDeg_;
      numBlocks_ = other.numBlocks_;
      repeats_ = other.repeats_;
      workPlaneNumber_ = other.workPlaneNumber_;
      machineType_ = other.machineType_;
      additionalAxisPositions_ = other.additionalAxisPositions_.Clone();
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WorkPlane Clone() {
      return new WorkPlane(this);
    }

    /// <summary>Field number for the "vector_blocks" field.</summary>
    public const int VectorBlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::OpenVectorFormat.VectorBlock> _repeated_vectorBlocks_codec
        = pb::FieldCodec.ForMessage(10, global::OpenVectorFormat.VectorBlock.Parser);
    private readonly pbc::RepeatedField<global::OpenVectorFormat.VectorBlock> vectorBlocks_ = new pbc::RepeatedField<global::OpenVectorFormat.VectorBlock>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::OpenVectorFormat.VectorBlock> VectorBlocks {
      get { return vectorBlocks_; }
    }

    /// <summary>Field number for the "x_pos_in_mm" field.</summary>
    public const int XPosInMmFieldNumber = 2;
    private float xPosInMm_;
    /// <summary>
    /// Axis positions - can be used for tiling
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XPosInMm {
      get { return xPosInMm_; }
      set {
        xPosInMm_ = value;
      }
    }

    /// <summary>Field number for the "y_pos_in_mm" field.</summary>
    public const int YPosInMmFieldNumber = 3;
    private float yPosInMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YPosInMm {
      get { return yPosInMm_; }
      set {
        yPosInMm_ = value;
      }
    }

    /// <summary>Field number for the "z_pos_in_mm" field.</summary>
    public const int ZPosInMmFieldNumber = 4;
    private float zPosInMm_;
    /// <summary>
    /// for PBF processes bed position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ZPosInMm {
      get { return zPosInMm_; }
      set {
        zPosInMm_ = value;
      }
    }

    /// <summary>Field number for the "x_rot_in_deg" field.</summary>
    public const int XRotInDegFieldNumber = 5;
    private float xRotInDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XRotInDeg {
      get { return xRotInDeg_; }
      set {
        xRotInDeg_ = value;
      }
    }

    /// <summary>Field number for the "y_rot_in_deg" field.</summary>
    public const int YRotInDegFieldNumber = 6;
    private float yRotInDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YRotInDeg {
      get { return yRotInDeg_; }
      set {
        yRotInDeg_ = value;
      }
    }

    /// <summary>Field number for the "z_rot_in_deg" field.</summary>
    public const int ZRotInDegFieldNumber = 7;
    private float zRotInDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ZRotInDeg {
      get { return zRotInDeg_; }
      set {
        zRotInDeg_ = value;
      }
    }

    /// <summary>Field number for the "num_blocks" field.</summary>
    public const int NumBlocksFieldNumber = 8;
    private int numBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumBlocks {
      get { return numBlocks_; }
      set {
        numBlocks_ = value;
      }
    }

    /// <summary>Field number for the "repeats" field.</summary>
    public const int RepeatsFieldNumber = 9;
    private uint repeats_;
    /// <summary>
    ///how many times the WorkPlane will be executed
    ///this will execute all vector blocks in order once, then repeat [repeats] times starting with the first block again etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Repeats {
      get { return repeats_; }
      set {
        repeats_ = value;
      }
    }

    /// <summary>Field number for the "work_plane_number" field.</summary>
    public const int WorkPlaneNumberFieldNumber = 10;
    private int workPlaneNumber_;
    /// <summary>
    ///reference for syncing or asynchronious execution (keeping correct order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WorkPlaneNumber {
      get { return workPlaneNumber_; }
      set {
        workPlaneNumber_ = value;
      }
    }

    /// <summary>Field number for the "machine_type" field.</summary>
    public const int MachineTypeFieldNumber = 11;
    private string machineType_ = "";
    /// <summary>
    ///identifier of the machine to prevent type mismatch, has to be verified by the machine controller
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MachineType {
      get { return machineType_; }
      set {
        machineType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "additional_axis_positions" field.</summary>
    public const int AdditionalAxisPositionsFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_additionalAxisPositions_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> additionalAxisPositions_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///goal positions of the axis in order of machine axis number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> AdditionalAxisPositions {
      get { return additionalAxisPositions_; }
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 13;
    private global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData metaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WorkPlane);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WorkPlane other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vectorBlocks_.Equals(other.vectorBlocks_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XPosInMm, other.XPosInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YPosInMm, other.YPosInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZPosInMm, other.ZPosInMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XRotInDeg, other.XRotInDeg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YRotInDeg, other.YRotInDeg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ZRotInDeg, other.ZRotInDeg)) return false;
      if (NumBlocks != other.NumBlocks) return false;
      if (Repeats != other.Repeats) return false;
      if (WorkPlaneNumber != other.WorkPlaneNumber) return false;
      if (MachineType != other.MachineType) return false;
      if(!additionalAxisPositions_.Equals(other.additionalAxisPositions_)) return false;
      if (!object.Equals(MetaData, other.MetaData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vectorBlocks_.GetHashCode();
      if (XPosInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XPosInMm);
      if (YPosInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YPosInMm);
      if (ZPosInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZPosInMm);
      if (XRotInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XRotInDeg);
      if (YRotInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YRotInDeg);
      if (ZRotInDeg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ZRotInDeg);
      if (NumBlocks != 0) hash ^= NumBlocks.GetHashCode();
      if (Repeats != 0) hash ^= Repeats.GetHashCode();
      if (WorkPlaneNumber != 0) hash ^= WorkPlaneNumber.GetHashCode();
      if (MachineType.Length != 0) hash ^= MachineType.GetHashCode();
      hash ^= additionalAxisPositions_.GetHashCode();
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      vectorBlocks_.WriteTo(output, _repeated_vectorBlocks_codec);
      if (XPosInMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XPosInMm);
      }
      if (YPosInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YPosInMm);
      }
      if (ZPosInMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ZPosInMm);
      }
      if (XRotInDeg != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(XRotInDeg);
      }
      if (YRotInDeg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(YRotInDeg);
      }
      if (ZRotInDeg != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ZRotInDeg);
      }
      if (NumBlocks != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumBlocks);
      }
      if (Repeats != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Repeats);
      }
      if (WorkPlaneNumber != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WorkPlaneNumber);
      }
      if (MachineType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MachineType);
      }
      additionalAxisPositions_.WriteTo(output, _repeated_additionalAxisPositions_codec);
      if (metaData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(MetaData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      vectorBlocks_.WriteTo(ref output, _repeated_vectorBlocks_codec);
      if (XPosInMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(XPosInMm);
      }
      if (YPosInMm != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(YPosInMm);
      }
      if (ZPosInMm != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ZPosInMm);
      }
      if (XRotInDeg != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(XRotInDeg);
      }
      if (YRotInDeg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(YRotInDeg);
      }
      if (ZRotInDeg != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ZRotInDeg);
      }
      if (NumBlocks != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(NumBlocks);
      }
      if (Repeats != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Repeats);
      }
      if (WorkPlaneNumber != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(WorkPlaneNumber);
      }
      if (MachineType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MachineType);
      }
      additionalAxisPositions_.WriteTo(ref output, _repeated_additionalAxisPositions_codec);
      if (metaData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(MetaData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += vectorBlocks_.CalculateSize(_repeated_vectorBlocks_codec);
      if (XPosInMm != 0F) {
        size += 1 + 4;
      }
      if (YPosInMm != 0F) {
        size += 1 + 4;
      }
      if (ZPosInMm != 0F) {
        size += 1 + 4;
      }
      if (XRotInDeg != 0F) {
        size += 1 + 4;
      }
      if (YRotInDeg != 0F) {
        size += 1 + 4;
      }
      if (ZRotInDeg != 0F) {
        size += 1 + 4;
      }
      if (NumBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBlocks);
      }
      if (Repeats != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Repeats);
      }
      if (WorkPlaneNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorkPlaneNumber);
      }
      if (MachineType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineType);
      }
      size += additionalAxisPositions_.CalculateSize(_repeated_additionalAxisPositions_codec);
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WorkPlane other) {
      if (other == null) {
        return;
      }
      vectorBlocks_.Add(other.vectorBlocks_);
      if (other.XPosInMm != 0F) {
        XPosInMm = other.XPosInMm;
      }
      if (other.YPosInMm != 0F) {
        YPosInMm = other.YPosInMm;
      }
      if (other.ZPosInMm != 0F) {
        ZPosInMm = other.ZPosInMm;
      }
      if (other.XRotInDeg != 0F) {
        XRotInDeg = other.XRotInDeg;
      }
      if (other.YRotInDeg != 0F) {
        YRotInDeg = other.YRotInDeg;
      }
      if (other.ZRotInDeg != 0F) {
        ZRotInDeg = other.ZRotInDeg;
      }
      if (other.NumBlocks != 0) {
        NumBlocks = other.NumBlocks;
      }
      if (other.Repeats != 0) {
        Repeats = other.Repeats;
      }
      if (other.WorkPlaneNumber != 0) {
        WorkPlaneNumber = other.WorkPlaneNumber;
      }
      if (other.MachineType.Length != 0) {
        MachineType = other.MachineType;
      }
      additionalAxisPositions_.Add(other.additionalAxisPositions_);
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vectorBlocks_.AddEntriesFrom(input, _repeated_vectorBlocks_codec);
            break;
          }
          case 21: {
            XPosInMm = input.ReadFloat();
            break;
          }
          case 29: {
            YPosInMm = input.ReadFloat();
            break;
          }
          case 37: {
            ZPosInMm = input.ReadFloat();
            break;
          }
          case 45: {
            XRotInDeg = input.ReadFloat();
            break;
          }
          case 53: {
            YRotInDeg = input.ReadFloat();
            break;
          }
          case 61: {
            ZRotInDeg = input.ReadFloat();
            break;
          }
          case 64: {
            NumBlocks = input.ReadInt32();
            break;
          }
          case 72: {
            Repeats = input.ReadUInt32();
            break;
          }
          case 80: {
            WorkPlaneNumber = input.ReadInt32();
            break;
          }
          case 90: {
            MachineType = input.ReadString();
            break;
          }
          case 98:
          case 101: {
            additionalAxisPositions_.AddEntriesFrom(input, _repeated_additionalAxisPositions_codec);
            break;
          }
          case 106: {
            if (metaData_ == null) {
              MetaData = new global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            vectorBlocks_.AddEntriesFrom(ref input, _repeated_vectorBlocks_codec);
            break;
          }
          case 21: {
            XPosInMm = input.ReadFloat();
            break;
          }
          case 29: {
            YPosInMm = input.ReadFloat();
            break;
          }
          case 37: {
            ZPosInMm = input.ReadFloat();
            break;
          }
          case 45: {
            XRotInDeg = input.ReadFloat();
            break;
          }
          case 53: {
            YRotInDeg = input.ReadFloat();
            break;
          }
          case 61: {
            ZRotInDeg = input.ReadFloat();
            break;
          }
          case 64: {
            NumBlocks = input.ReadInt32();
            break;
          }
          case 72: {
            Repeats = input.ReadUInt32();
            break;
          }
          case 80: {
            WorkPlaneNumber = input.ReadInt32();
            break;
          }
          case 90: {
            MachineType = input.ReadString();
            break;
          }
          case 98:
          case 101: {
            additionalAxisPositions_.AddEntriesFrom(ref input, _repeated_additionalAxisPositions_codec);
            break;
          }
          case 106: {
            if (metaData_ == null) {
              MetaData = new global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WorkPlane message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///optional metadata of this work plane
      /// </summary>
      public sealed partial class WorkPlaneMetaData : pb::IMessage<WorkPlaneMetaData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WorkPlaneMetaData> _parser = new pb::MessageParser<WorkPlaneMetaData>(() => new WorkPlaneMetaData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<WorkPlaneMetaData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.WorkPlane.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WorkPlaneMetaData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WorkPlaneMetaData(WorkPlaneMetaData other) : this() {
          totalScanDistanceInMm_ = other.totalScanDistanceInMm_;
          totalJumpDistanceInMm_ = other.totalJumpDistanceInMm_;
          patchesMap_ = other.patchesMap_.Clone();
          maxPower_ = other.maxPower_;
          minPower_ = other.minPower_;
          contours_ = other.contours_.Clone();
          bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public WorkPlaneMetaData Clone() {
          return new WorkPlaneMetaData(this);
        }

        /// <summary>Field number for the "total_scan_distance_in_mm" field.</summary>
        public const int TotalScanDistanceInMmFieldNumber = 1;
        private double totalScanDistanceInMm_;
        /// <summary>
        ///total scan distance of this WorkPlane in mm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalScanDistanceInMm {
          get { return totalScanDistanceInMm_; }
          set {
            totalScanDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "total_jump_distance_in_mm" field.</summary>
        public const int TotalJumpDistanceInMmFieldNumber = 2;
        private double totalJumpDistanceInMm_;
        /// <summary>
        ///total scan distance of this WorkPlane in mm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalJumpDistanceInMm {
          get { return totalJumpDistanceInMm_; }
          set {
            totalJumpDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "patches_map" field.</summary>
        public const int PatchesMapFieldNumber = 3;
        private static readonly pbc::MapField<int, global::OpenVectorFormat.WorkPlane.Types.Patch>.Codec _map_patchesMap_codec
            = new pbc::MapField<int, global::OpenVectorFormat.WorkPlane.Types.Patch>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::OpenVectorFormat.WorkPlane.Types.Patch.Parser), 26);
        private readonly pbc::MapField<int, global::OpenVectorFormat.WorkPlane.Types.Patch> patchesMap_ = new pbc::MapField<int, global::OpenVectorFormat.WorkPlane.Types.Patch>();
        /// <summary>
        ///map containing all patches in this workplane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::MapField<int, global::OpenVectorFormat.WorkPlane.Types.Patch> PatchesMap {
          get { return patchesMap_; }
        }

        /// <summary>Field number for the "maxPower" field.</summary>
        public const int MaxPowerFieldNumber = 4;
        private float maxPower_;
        /// <summary>
        ///actually applied max laser power after dynamic parameter allocation in this workPlane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float MaxPower {
          get { return maxPower_; }
          set {
            maxPower_ = value;
          }
        }

        /// <summary>Field number for the "minPower" field.</summary>
        public const int MinPowerFieldNumber = 5;
        private float minPower_;
        /// <summary>
        ///actually applied min laser power after dynamic parameter allocation in this workPlane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float MinPower {
          get { return minPower_; }
          set {
            minPower_ = value;
          }
        }

        /// <summary>Field number for the "contours" field.</summary>
        public const int ContoursFieldNumber = 6;
        private static readonly pb::FieldCodec<global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour> _repeated_contours_codec
            = pb::FieldCodec.ForMessage(50, global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Parser);
        private readonly pbc::RepeatedField<global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour> contours_ = new pbc::RepeatedField<global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour>();
        /// <summary>
        ///all closed contours present in this workplane
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour> Contours {
          get { return contours_; }
        }

        /// <summary>Field number for the "Bounds" field.</summary>
        public const int BoundsFieldNumber = 7;
        private global::OpenVectorFormat.AxisAlignedBox2D bounds_;
        /// <summary>
        ///2D axis aligned bounding box of all the workplanes vector block coordinates
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.AxisAlignedBox2D Bounds {
          get { return bounds_; }
          set {
            bounds_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as WorkPlaneMetaData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(WorkPlaneMetaData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalScanDistanceInMm, other.TotalScanDistanceInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalJumpDistanceInMm, other.TotalJumpDistanceInMm)) return false;
          if (!PatchesMap.Equals(other.PatchesMap)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxPower, other.MaxPower)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinPower, other.MinPower)) return false;
          if(!contours_.Equals(other.contours_)) return false;
          if (!object.Equals(Bounds, other.Bounds)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (TotalScanDistanceInMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalScanDistanceInMm);
          if (TotalJumpDistanceInMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalJumpDistanceInMm);
          hash ^= PatchesMap.GetHashCode();
          if (MaxPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxPower);
          if (MinPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinPower);
          hash ^= contours_.GetHashCode();
          if (bounds_ != null) hash ^= Bounds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TotalScanDistanceInMm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(TotalScanDistanceInMm);
          }
          if (TotalJumpDistanceInMm != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TotalJumpDistanceInMm);
          }
          patchesMap_.WriteTo(output, _map_patchesMap_codec);
          if (MaxPower != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(MaxPower);
          }
          if (MinPower != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(MinPower);
          }
          contours_.WriteTo(output, _repeated_contours_codec);
          if (bounds_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Bounds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TotalScanDistanceInMm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(TotalScanDistanceInMm);
          }
          if (TotalJumpDistanceInMm != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TotalJumpDistanceInMm);
          }
          patchesMap_.WriteTo(ref output, _map_patchesMap_codec);
          if (MaxPower != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(MaxPower);
          }
          if (MinPower != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(MinPower);
          }
          contours_.WriteTo(ref output, _repeated_contours_codec);
          if (bounds_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Bounds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (TotalScanDistanceInMm != 0D) {
            size += 1 + 8;
          }
          if (TotalJumpDistanceInMm != 0D) {
            size += 1 + 8;
          }
          size += patchesMap_.CalculateSize(_map_patchesMap_codec);
          if (MaxPower != 0F) {
            size += 1 + 4;
          }
          if (MinPower != 0F) {
            size += 1 + 4;
          }
          size += contours_.CalculateSize(_repeated_contours_codec);
          if (bounds_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(WorkPlaneMetaData other) {
          if (other == null) {
            return;
          }
          if (other.TotalScanDistanceInMm != 0D) {
            TotalScanDistanceInMm = other.TotalScanDistanceInMm;
          }
          if (other.TotalJumpDistanceInMm != 0D) {
            TotalJumpDistanceInMm = other.TotalJumpDistanceInMm;
          }
          patchesMap_.MergeFrom(other.patchesMap_);
          if (other.MaxPower != 0F) {
            MaxPower = other.MaxPower;
          }
          if (other.MinPower != 0F) {
            MinPower = other.MinPower;
          }
          contours_.Add(other.contours_);
          if (other.bounds_ != null) {
            if (bounds_ == null) {
              Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
            }
            Bounds.MergeFrom(other.Bounds);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                TotalScanDistanceInMm = input.ReadDouble();
                break;
              }
              case 17: {
                TotalJumpDistanceInMm = input.ReadDouble();
                break;
              }
              case 26: {
                patchesMap_.AddEntriesFrom(input, _map_patchesMap_codec);
                break;
              }
              case 37: {
                MaxPower = input.ReadFloat();
                break;
              }
              case 45: {
                MinPower = input.ReadFloat();
                break;
              }
              case 50: {
                contours_.AddEntriesFrom(input, _repeated_contours_codec);
                break;
              }
              case 58: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                TotalScanDistanceInMm = input.ReadDouble();
                break;
              }
              case 17: {
                TotalJumpDistanceInMm = input.ReadDouble();
                break;
              }
              case 26: {
                patchesMap_.AddEntriesFrom(ref input, _map_patchesMap_codec);
                break;
              }
              case 37: {
                MaxPower = input.ReadFloat();
                break;
              }
              case 45: {
                MinPower = input.ReadFloat();
                break;
              }
              case 50: {
                contours_.AddEntriesFrom(ref input, _repeated_contours_codec);
                break;
              }
              case 58: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the WorkPlaneMetaData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public sealed partial class closedContour : pb::IMessage<closedContour>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<closedContour> _parser = new pb::MessageParser<closedContour>(() => new closedContour());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<closedContour> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public closedContour() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public closedContour(closedContour other) : this() {
              contourSectionVectorBlockIndices_ = other.contourSectionVectorBlockIndices_.Clone();
              areaInMm2_ = other.areaInMm2_;
              lengthInMm_ = other.lengthInMm_;
              parentIndex_ = other.parentIndex_;
              windingNumber_ = other.windingNumber_;
              type_ = other.type_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public closedContour Clone() {
              return new closedContour(this);
            }

            /// <summary>Field number for the "contour_section_vector_block_indices" field.</summary>
            public const int ContourSectionVectorBlockIndicesFieldNumber = 1;
            private static readonly pb::FieldCodec<int> _repeated_contourSectionVectorBlockIndices_codec
                = pb::FieldCodec.ForInt32(10);
            private readonly pbc::RepeatedField<int> contourSectionVectorBlockIndices_ = new pbc::RepeatedField<int>();
            /// <summary>
            ///indices of the vector blocks in vector_blocks repeated field that represent different sections of one closed contour
            ///sections are necessary to indicate parameter set changes along the contour
            ///with this meta data reconstruction of original contours is possible
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<int> ContourSectionVectorBlockIndices {
              get { return contourSectionVectorBlockIndices_; }
            }

            /// <summary>Field number for the "area_in_mm_2" field.</summary>
            public const int AreaInMm2FieldNumber = 2;
            private float areaInMm2_;
            /// <summary>
            ///this closed contours area in square millimeters
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float AreaInMm2 {
              get { return areaInMm2_; }
              set {
                areaInMm2_ = value;
              }
            }

            /// <summary>Field number for the "length_in_mm" field.</summary>
            public const int LengthInMmFieldNumber = 3;
            private float lengthInMm_;
            /// <summary>
            ///this closed contours total length in millimeters
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float LengthInMm {
              get { return lengthInMm_; }
              set {
                lengthInMm_ = value;
              }
            }

            /// <summary>Field number for the "parent_index" field.</summary>
            public const int ParentIndexFieldNumber = 5;
            private int parentIndex_;
            /// <summary>
            ///index of the parent (containing) contour in this workplanes' repeated contours field
            ///if the parent index points to the contour itself, it is one outermost contour
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int ParentIndex {
              get { return parentIndex_; }
              set {
                parentIndex_ = value;
              }
            }

            /// <summary>Field number for the "winding_number" field.</summary>
            public const int WindingNumberFieldNumber = 6;
            private int windingNumber_;
            /// <summary>
            ///defines the winding number of the contour around the contours centroid
            ///also indicateing its direction: negative = clockwise / positive = counterclockwise
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int WindingNumber {
              get { return windingNumber_; }
              set {
                windingNumber_ = value;
              }
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 7;
            private global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType type_ = global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour;
            /// <summary>
            ///indicates the ContourType of this contour
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as closedContour);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(closedContour other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!contourSectionVectorBlockIndices_.Equals(other.contourSectionVectorBlockIndices_)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AreaInMm2, other.AreaInMm2)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LengthInMm, other.LengthInMm)) return false;
              if (ParentIndex != other.ParentIndex) return false;
              if (WindingNumber != other.WindingNumber) return false;
              if (Type != other.Type) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= contourSectionVectorBlockIndices_.GetHashCode();
              if (AreaInMm2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AreaInMm2);
              if (LengthInMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LengthInMm);
              if (ParentIndex != 0) hash ^= ParentIndex.GetHashCode();
              if (WindingNumber != 0) hash ^= WindingNumber.GetHashCode();
              if (Type != global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour) hash ^= Type.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              contourSectionVectorBlockIndices_.WriteTo(output, _repeated_contourSectionVectorBlockIndices_codec);
              if (AreaInMm2 != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(AreaInMm2);
              }
              if (LengthInMm != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(LengthInMm);
              }
              if (ParentIndex != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(ParentIndex);
              }
              if (WindingNumber != 0) {
                output.WriteRawTag(48);
                output.WriteInt32(WindingNumber);
              }
              if (Type != global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour) {
                output.WriteRawTag(56);
                output.WriteEnum((int) Type);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              contourSectionVectorBlockIndices_.WriteTo(ref output, _repeated_contourSectionVectorBlockIndices_codec);
              if (AreaInMm2 != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(AreaInMm2);
              }
              if (LengthInMm != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(LengthInMm);
              }
              if (ParentIndex != 0) {
                output.WriteRawTag(40);
                output.WriteInt32(ParentIndex);
              }
              if (WindingNumber != 0) {
                output.WriteRawTag(48);
                output.WriteInt32(WindingNumber);
              }
              if (Type != global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour) {
                output.WriteRawTag(56);
                output.WriteEnum((int) Type);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              size += contourSectionVectorBlockIndices_.CalculateSize(_repeated_contourSectionVectorBlockIndices_codec);
              if (AreaInMm2 != 0F) {
                size += 1 + 4;
              }
              if (LengthInMm != 0F) {
                size += 1 + 4;
              }
              if (ParentIndex != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentIndex);
              }
              if (WindingNumber != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(WindingNumber);
              }
              if (Type != global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(closedContour other) {
              if (other == null) {
                return;
              }
              contourSectionVectorBlockIndices_.Add(other.contourSectionVectorBlockIndices_);
              if (other.AreaInMm2 != 0F) {
                AreaInMm2 = other.AreaInMm2;
              }
              if (other.LengthInMm != 0F) {
                LengthInMm = other.LengthInMm;
              }
              if (other.ParentIndex != 0) {
                ParentIndex = other.ParentIndex;
              }
              if (other.WindingNumber != 0) {
                WindingNumber = other.WindingNumber;
              }
              if (other.Type != global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType.PartOuterContour) {
                Type = other.Type;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    contourSectionVectorBlockIndices_.AddEntriesFrom(input, _repeated_contourSectionVectorBlockIndices_codec);
                    break;
                  }
                  case 21: {
                    AreaInMm2 = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    LengthInMm = input.ReadFloat();
                    break;
                  }
                  case 40: {
                    ParentIndex = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    WindingNumber = input.ReadInt32();
                    break;
                  }
                  case 56: {
                    Type = (global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10:
                  case 8: {
                    contourSectionVectorBlockIndices_.AddEntriesFrom(ref input, _repeated_contourSectionVectorBlockIndices_codec);
                    break;
                  }
                  case 21: {
                    AreaInMm2 = input.ReadFloat();
                    break;
                  }
                  case 29: {
                    LengthInMm = input.ReadFloat();
                    break;
                  }
                  case 40: {
                    ParentIndex = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    WindingNumber = input.ReadInt32();
                    break;
                  }
                  case 56: {
                    Type = (global::OpenVectorFormat.WorkPlane.Types.WorkPlaneMetaData.Types.closedContour.Types.ContourType) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the closedContour message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static partial class Types {
              public enum ContourType {
                /// <summary>
                ///an outer contour of the unprocessed part slice
                ///for non overlapping contour groups, outer an inner contours always alternate
                ///the hierarchy of the contours is stored in parent_index instead
                /// </summary>
                [pbr::OriginalName("PART_OUTER_CONTOUR")] PartOuterContour = 0,
                /// <summary>
                ///an inner contour of the unprocessed part slice
                ///for non overlapping contour groups, outer an inner contours always alternate
                ///the hierarchy of the contours is stored in parent_index instead
                /// </summary>
                [pbr::OriginalName("PART_INNER_CONTOUR")] PartInnerContour = 1,
                /// <summary>
                ///an additional contour that has been offset from a contour of the unprocessed part slice
                ///e.g. because number_of_contours > 1 in the part process strategy
                ///these contours are not part of the unprocessed part slices contour hierarchy
                ///they instead are offset to their parent contour indicated by parent_index
                ///and typically are used to weld the parent contour to the hatches
                /// </summary>
                [pbr::OriginalName("OFFSET_CONTOUR")] OffsetContour = 2,
              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      ///A patch is a subdivision in a workPlane with an own local coordinate system.
      ///The local transformation is given by the 2D origin (u/v)
      ///Coordinates in the workplane may be tranformed by the machine depending on the patch
      /// </summary>
      public sealed partial class Patch : pb::IMessage<Patch>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Patch> _parser = new pb::MessageParser<Patch>(() => new Patch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Patch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.WorkPlane.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Patch() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Patch(Patch other) : this() {
          outerContour_ = other.outerContour_ != null ? other.outerContour_.Clone() : null;
          u_ = other.u_;
          v_ = other.v_;
          layerId_ = other.layerId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Patch Clone() {
          return new Patch(this);
        }

        /// <summary>Field number for the "outer_contour" field.</summary>
        public const int OuterContourFieldNumber = 1;
        private global::OpenVectorFormat.VectorBlock.Types.LineSequence outerContour_;
        /// <summary>
        ///optional 2D polygon that forms the outer contour (not marked) of this patch
        ///if the contour should get executed a separate vector block is used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.LineSequence OuterContour {
          get { return outerContour_; }
          set {
            outerContour_ = value;
          }
        }

        /// <summary>Field number for the "u" field.</summary>
        public const int UFieldNumber = 2;
        private float u_;
        /// <summary>
        ///local transformation of workpiece coordinate x
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float U {
          get { return u_; }
          set {
            u_ = value;
          }
        }

        /// <summary>Field number for the "v" field.</summary>
        public const int VFieldNumber = 3;
        private float v_;
        /// <summary>
        ///local transformation of workpiece coordinate y
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float V {
          get { return v_; }
          set {
            v_ = value;
          }
        }

        /// <summary>Field number for the "layer_id" field.</summary>
        public const int LayerIdFieldNumber = 4;
        private int layerId_;
        /// <summary>
        ///identifier of actual workpiece layer / stack
        ///for single patch processes like powder bed this equals the workPlane number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LayerId {
          get { return layerId_; }
          set {
            layerId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Patch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Patch other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(OuterContour, other.OuterContour)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(U, other.U)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
          if (LayerId != other.LayerId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (outerContour_ != null) hash ^= OuterContour.GetHashCode();
          if (U != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(U);
          if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
          if (LayerId != 0) hash ^= LayerId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (outerContour_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OuterContour);
          }
          if (U != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(U);
          }
          if (V != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(V);
          }
          if (LayerId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(LayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (outerContour_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OuterContour);
          }
          if (U != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(U);
          }
          if (V != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(V);
          }
          if (LayerId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(LayerId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (outerContour_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OuterContour);
          }
          if (U != 0F) {
            size += 1 + 4;
          }
          if (V != 0F) {
            size += 1 + 4;
          }
          if (LayerId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Patch other) {
          if (other == null) {
            return;
          }
          if (other.outerContour_ != null) {
            if (outerContour_ == null) {
              OuterContour = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
            }
            OuterContour.MergeFrom(other.OuterContour);
          }
          if (other.U != 0F) {
            U = other.U;
          }
          if (other.V != 0F) {
            V = other.V;
          }
          if (other.LayerId != 0) {
            LayerId = other.LayerId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (outerContour_ == null) {
                  OuterContour = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
                }
                input.ReadMessage(OuterContour);
                break;
              }
              case 21: {
                U = input.ReadFloat();
                break;
              }
              case 29: {
                V = input.ReadFloat();
                break;
              }
              case 32: {
                LayerId = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (outerContour_ == null) {
                  OuterContour = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
                }
                input.ReadMessage(OuterContour);
                break;
              }
              case 21: {
                U = input.ReadFloat();
                break;
              }
              case 29: {
                V = input.ReadFloat();
                break;
              }
              case 32: {
                LayerId = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class VectorBlock : pb::IMessage<VectorBlock>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VectorBlock> _parser = new pb::MessageParser<VectorBlock>(() => new VectorBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VectorBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VectorBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VectorBlock(VectorBlock other) : this() {
      markingParamsKey_ = other.markingParamsKey_;
      laserIndex_ = other.laserIndex_;
      repeats_ = other.repeats_;
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      switch (other.VectorDataCase) {
        case VectorDataOneofCase.LineSequence:
          LineSequence = other.LineSequence.Clone();
          break;
        case VectorDataOneofCase.Hatches:
          Hatches = other.Hatches.Clone();
          break;
        case VectorDataOneofCase.PointSequence:
          PointSequence = other.PointSequence.Clone();
          break;
        case VectorDataOneofCase.Arcs:
          Arcs = other.Arcs.Clone();
          break;
        case VectorDataOneofCase.Ellipses:
          Ellipses = other.Ellipses.Clone();
          break;
        case VectorDataOneofCase.LineSequence3D:
          LineSequence3D = other.LineSequence3D.Clone();
          break;
        case VectorDataOneofCase.Hatches3D:
          Hatches3D = other.Hatches3D.Clone();
          break;
        case VectorDataOneofCase.PointSequence3D:
          PointSequence3D = other.PointSequence3D.Clone();
          break;
        case VectorDataOneofCase.Arcs3D:
          Arcs3D = other.Arcs3D.Clone();
          break;
        case VectorDataOneofCase.ExposurePause:
          ExposurePause = other.ExposurePause.Clone();
          break;
        case VectorDataOneofCase.LineSequenceParaAdapt:
          LineSequenceParaAdapt = other.LineSequenceParaAdapt.Clone();
          break;
        case VectorDataOneofCase.HatchParaAdapt:
          HatchParaAdapt = other.HatchParaAdapt.Clone();
          break;
      }

      switch (other.ProcessMetaDataCase) {
        case ProcessMetaDataOneofCase.LpbfMetadata:
          LpbfMetadata = other.LpbfMetadata.Clone();
          break;
        case ProcessMetaDataOneofCase.MicroStructuringMetadata:
          MicroStructuringMetadata = other.MicroStructuringMetadata.Clone();
          break;
        case ProcessMetaDataOneofCase.PolishingMetadata:
          PolishingMetadata = other.PolishingMetadata.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VectorBlock Clone() {
      return new VectorBlock(this);
    }

    /// <summary>Field number for the "line_sequence" field.</summary>
    public const int LineSequenceFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.LineSequence LineSequence {
      get { return vectorDataCase_ == VectorDataOneofCase.LineSequence ? (global::OpenVectorFormat.VectorBlock.Types.LineSequence) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.LineSequence;
      }
    }

    /// <summary>Field number for the "_hatches" field.</summary>
    public const int HatchesFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.Hatches Hatches {
      get { return vectorDataCase_ == VectorDataOneofCase.Hatches ? (global::OpenVectorFormat.VectorBlock.Types.Hatches) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.Hatches;
      }
    }

    /// <summary>Field number for the "point_sequence" field.</summary>
    public const int PointSequenceFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.PointSequence PointSequence {
      get { return vectorDataCase_ == VectorDataOneofCase.PointSequence ? (global::OpenVectorFormat.VectorBlock.Types.PointSequence) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.PointSequence;
      }
    }

    /// <summary>Field number for the "_arcs" field.</summary>
    public const int ArcsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.Arcs Arcs {
      get { return vectorDataCase_ == VectorDataOneofCase.Arcs ? (global::OpenVectorFormat.VectorBlock.Types.Arcs) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.Arcs;
      }
    }

    /// <summary>Field number for the "ellipses" field.</summary>
    public const int EllipsesFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.Ellipses Ellipses {
      get { return vectorDataCase_ == VectorDataOneofCase.Ellipses ? (global::OpenVectorFormat.VectorBlock.Types.Ellipses) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.Ellipses;
      }
    }

    /// <summary>Field number for the "line_sequence_3d" field.</summary>
    public const int LineSequence3DFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.LineSequence3D LineSequence3D {
      get { return vectorDataCase_ == VectorDataOneofCase.LineSequence3D ? (global::OpenVectorFormat.VectorBlock.Types.LineSequence3D) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.LineSequence3D;
      }
    }

    /// <summary>Field number for the "hatches_3d" field.</summary>
    public const int Hatches3DFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.Hatches3D Hatches3D {
      get { return vectorDataCase_ == VectorDataOneofCase.Hatches3D ? (global::OpenVectorFormat.VectorBlock.Types.Hatches3D) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.Hatches3D;
      }
    }

    /// <summary>Field number for the "point_sequence_3d" field.</summary>
    public const int PointSequence3DFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.PointSequence3D PointSequence3D {
      get { return vectorDataCase_ == VectorDataOneofCase.PointSequence3D ? (global::OpenVectorFormat.VectorBlock.Types.PointSequence3D) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.PointSequence3D;
      }
    }

    /// <summary>Field number for the "arcs_3d" field.</summary>
    public const int Arcs3DFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.Arcs3D Arcs3D {
      get { return vectorDataCase_ == VectorDataOneofCase.Arcs3D ? (global::OpenVectorFormat.VectorBlock.Types.Arcs3D) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.Arcs3D;
      }
    }

    /// <summary>Field number for the "exposure_pause" field.</summary>
    public const int ExposurePauseFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.ExposurePause ExposurePause {
      get { return vectorDataCase_ == VectorDataOneofCase.ExposurePause ? (global::OpenVectorFormat.VectorBlock.Types.ExposurePause) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.ExposurePause;
      }
    }

    /// <summary>Field number for the "line_sequence_para_adapt" field.</summary>
    public const int LineSequenceParaAdaptFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt LineSequenceParaAdapt {
      get { return vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt ? (global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.LineSequenceParaAdapt;
      }
    }

    /// <summary>Field number for the "_hatchParaAdapt" field.</summary>
    public const int HatchParaAdaptFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt HatchParaAdapt {
      get { return vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt ? (global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt) vectorData_ : null; }
      set {
        vectorData_ = value;
        vectorDataCase_ = value == null ? VectorDataOneofCase.None : VectorDataOneofCase.HatchParaAdapt;
      }
    }

    /// <summary>Field number for the "marking_params_key" field.</summary>
    public const int MarkingParamsKeyFieldNumber = 50;
    private int markingParamsKey_;
    /// <summary>
    ///key used in Job/markingParamsMap
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarkingParamsKey {
      get { return markingParamsKey_; }
      set {
        markingParamsKey_ = value;
      }
    }

    /// <summary>Field number for the "laser_index" field.</summary>
    public const int LaserIndexFieldNumber = 53;
    private int laserIndex_;
    /// <summary>
    ///LaserIndex is used for assigning vectorBlocks to different actors, e.g. in multi scanner systems
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LaserIndex {
      get { return laserIndex_; }
      set {
        laserIndex_ = value;
      }
    }

    /// <summary>Field number for the "repeats" field.</summary>
    public const int RepeatsFieldNumber = 54;
    private ulong repeats_;
    /// <summary>
    ///vetor blocks are executed in order once by default (repeats = 0),
    ///then repeated [repeats] times starting with the first vector again etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Repeats {
      get { return repeats_; }
      set {
        repeats_ = value;
      }
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 100;
    private global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData metaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "lpbf_metadata" field.</summary>
    public const int LpbfMetadataFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata LpbfMetadata {
      get { return processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata ? (global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata) processMetaData_ : null; }
      set {
        processMetaData_ = value;
        processMetaDataCase_ = value == null ? ProcessMetaDataOneofCase.None : ProcessMetaDataOneofCase.LpbfMetadata;
      }
    }

    /// <summary>Field number for the "micro_structuring_metadata" field.</summary>
    public const int MicroStructuringMetadataFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata MicroStructuringMetadata {
      get { return processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata ? (global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata) processMetaData_ : null; }
      set {
        processMetaData_ = value;
        processMetaDataCase_ = value == null ? ProcessMetaDataOneofCase.None : ProcessMetaDataOneofCase.MicroStructuringMetadata;
      }
    }

    /// <summary>Field number for the "polishing_metadata" field.</summary>
    public const int PolishingMetadataFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata PolishingMetadata {
      get { return processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata ? (global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata) processMetaData_ : null; }
      set {
        processMetaData_ = value;
        processMetaDataCase_ = value == null ? ProcessMetaDataOneofCase.None : ProcessMetaDataOneofCase.PolishingMetadata;
      }
    }

    private object vectorData_;
    /// <summary>Enum of possible cases for the "vector_data" oneof.</summary>
    public enum VectorDataOneofCase {
      None = 0,
      LineSequence = 1,
      Hatches = 2,
      PointSequence = 3,
      Arcs = 4,
      Ellipses = 5,
      LineSequence3D = 6,
      Hatches3D = 7,
      PointSequence3D = 8,
      Arcs3D = 9,
      ExposurePause = 10,
      LineSequenceParaAdapt = 11,
      HatchParaAdapt = 12,
    }
    private VectorDataOneofCase vectorDataCase_ = VectorDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VectorDataOneofCase VectorDataCase {
      get { return vectorDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVectorData() {
      vectorDataCase_ = VectorDataOneofCase.None;
      vectorData_ = null;
    }

    private object processMetaData_;
    /// <summary>Enum of possible cases for the "process_meta_data" oneof.</summary>
    public enum ProcessMetaDataOneofCase {
      None = 0,
      LpbfMetadata = 101,
      MicroStructuringMetadata = 102,
      PolishingMetadata = 103,
    }
    private ProcessMetaDataOneofCase processMetaDataCase_ = ProcessMetaDataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ProcessMetaDataOneofCase ProcessMetaDataCase {
      get { return processMetaDataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProcessMetaData() {
      processMetaDataCase_ = ProcessMetaDataOneofCase.None;
      processMetaData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VectorBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VectorBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LineSequence, other.LineSequence)) return false;
      if (!object.Equals(Hatches, other.Hatches)) return false;
      if (!object.Equals(PointSequence, other.PointSequence)) return false;
      if (!object.Equals(Arcs, other.Arcs)) return false;
      if (!object.Equals(Ellipses, other.Ellipses)) return false;
      if (!object.Equals(LineSequence3D, other.LineSequence3D)) return false;
      if (!object.Equals(Hatches3D, other.Hatches3D)) return false;
      if (!object.Equals(PointSequence3D, other.PointSequence3D)) return false;
      if (!object.Equals(Arcs3D, other.Arcs3D)) return false;
      if (!object.Equals(ExposurePause, other.ExposurePause)) return false;
      if (!object.Equals(LineSequenceParaAdapt, other.LineSequenceParaAdapt)) return false;
      if (!object.Equals(HatchParaAdapt, other.HatchParaAdapt)) return false;
      if (MarkingParamsKey != other.MarkingParamsKey) return false;
      if (LaserIndex != other.LaserIndex) return false;
      if (Repeats != other.Repeats) return false;
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if (!object.Equals(LpbfMetadata, other.LpbfMetadata)) return false;
      if (!object.Equals(MicroStructuringMetadata, other.MicroStructuringMetadata)) return false;
      if (!object.Equals(PolishingMetadata, other.PolishingMetadata)) return false;
      if (VectorDataCase != other.VectorDataCase) return false;
      if (ProcessMetaDataCase != other.ProcessMetaDataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence) hash ^= LineSequence.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.Hatches) hash ^= Hatches.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence) hash ^= PointSequence.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.Arcs) hash ^= Arcs.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.Ellipses) hash ^= Ellipses.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) hash ^= LineSequence3D.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) hash ^= Hatches3D.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) hash ^= PointSequence3D.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) hash ^= Arcs3D.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) hash ^= ExposurePause.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) hash ^= LineSequenceParaAdapt.GetHashCode();
      if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) hash ^= HatchParaAdapt.GetHashCode();
      if (MarkingParamsKey != 0) hash ^= MarkingParamsKey.GetHashCode();
      if (LaserIndex != 0) hash ^= LaserIndex.GetHashCode();
      if (Repeats != 0UL) hash ^= Repeats.GetHashCode();
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) hash ^= LpbfMetadata.GetHashCode();
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) hash ^= MicroStructuringMetadata.GetHashCode();
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) hash ^= PolishingMetadata.GetHashCode();
      hash ^= (int) vectorDataCase_;
      hash ^= (int) processMetaDataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence) {
        output.WriteRawTag(10);
        output.WriteMessage(LineSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches) {
        output.WriteRawTag(18);
        output.WriteMessage(Hatches);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence) {
        output.WriteRawTag(26);
        output.WriteMessage(PointSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs) {
        output.WriteRawTag(34);
        output.WriteMessage(Arcs);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Ellipses) {
        output.WriteRawTag(42);
        output.WriteMessage(Ellipses);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) {
        output.WriteRawTag(50);
        output.WriteMessage(LineSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) {
        output.WriteRawTag(58);
        output.WriteMessage(Hatches3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) {
        output.WriteRawTag(66);
        output.WriteMessage(PointSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) {
        output.WriteRawTag(74);
        output.WriteMessage(Arcs3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) {
        output.WriteRawTag(82);
        output.WriteMessage(ExposurePause);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) {
        output.WriteRawTag(90);
        output.WriteMessage(LineSequenceParaAdapt);
      }
      if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) {
        output.WriteRawTag(98);
        output.WriteMessage(HatchParaAdapt);
      }
      if (MarkingParamsKey != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(MarkingParamsKey);
      }
      if (LaserIndex != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(LaserIndex);
      }
      if (Repeats != 0UL) {
        output.WriteRawTag(176, 3);
        output.WriteUInt64(Repeats);
      }
      if (metaData_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(MetaData);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(LpbfMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(MicroStructuringMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PolishingMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence) {
        output.WriteRawTag(10);
        output.WriteMessage(LineSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches) {
        output.WriteRawTag(18);
        output.WriteMessage(Hatches);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence) {
        output.WriteRawTag(26);
        output.WriteMessage(PointSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs) {
        output.WriteRawTag(34);
        output.WriteMessage(Arcs);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Ellipses) {
        output.WriteRawTag(42);
        output.WriteMessage(Ellipses);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) {
        output.WriteRawTag(50);
        output.WriteMessage(LineSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) {
        output.WriteRawTag(58);
        output.WriteMessage(Hatches3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) {
        output.WriteRawTag(66);
        output.WriteMessage(PointSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) {
        output.WriteRawTag(74);
        output.WriteMessage(Arcs3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) {
        output.WriteRawTag(82);
        output.WriteMessage(ExposurePause);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) {
        output.WriteRawTag(90);
        output.WriteMessage(LineSequenceParaAdapt);
      }
      if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) {
        output.WriteRawTag(98);
        output.WriteMessage(HatchParaAdapt);
      }
      if (MarkingParamsKey != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(MarkingParamsKey);
      }
      if (LaserIndex != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(LaserIndex);
      }
      if (Repeats != 0UL) {
        output.WriteRawTag(176, 3);
        output.WriteUInt64(Repeats);
      }
      if (metaData_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(MetaData);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(LpbfMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(MicroStructuringMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(PolishingMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hatches);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointSequence);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arcs);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Ellipses) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ellipses);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hatches3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointSequence3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arcs3D);
      }
      if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExposurePause);
      }
      if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineSequenceParaAdapt);
      }
      if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatchParaAdapt);
      }
      if (MarkingParamsKey != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkingParamsKey);
      }
      if (LaserIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LaserIndex);
      }
      if (Repeats != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Repeats);
      }
      if (metaData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LpbfMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MicroStructuringMetadata);
      }
      if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PolishingMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VectorBlock other) {
      if (other == null) {
        return;
      }
      if (other.MarkingParamsKey != 0) {
        MarkingParamsKey = other.MarkingParamsKey;
      }
      if (other.LaserIndex != 0) {
        LaserIndex = other.LaserIndex;
      }
      if (other.Repeats != 0UL) {
        Repeats = other.Repeats;
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      switch (other.VectorDataCase) {
        case VectorDataOneofCase.LineSequence:
          if (LineSequence == null) {
            LineSequence = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
          }
          LineSequence.MergeFrom(other.LineSequence);
          break;
        case VectorDataOneofCase.Hatches:
          if (Hatches == null) {
            Hatches = new global::OpenVectorFormat.VectorBlock.Types.Hatches();
          }
          Hatches.MergeFrom(other.Hatches);
          break;
        case VectorDataOneofCase.PointSequence:
          if (PointSequence == null) {
            PointSequence = new global::OpenVectorFormat.VectorBlock.Types.PointSequence();
          }
          PointSequence.MergeFrom(other.PointSequence);
          break;
        case VectorDataOneofCase.Arcs:
          if (Arcs == null) {
            Arcs = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
          }
          Arcs.MergeFrom(other.Arcs);
          break;
        case VectorDataOneofCase.Ellipses:
          if (Ellipses == null) {
            Ellipses = new global::OpenVectorFormat.VectorBlock.Types.Ellipses();
          }
          Ellipses.MergeFrom(other.Ellipses);
          break;
        case VectorDataOneofCase.LineSequence3D:
          if (LineSequence3D == null) {
            LineSequence3D = new global::OpenVectorFormat.VectorBlock.Types.LineSequence3D();
          }
          LineSequence3D.MergeFrom(other.LineSequence3D);
          break;
        case VectorDataOneofCase.Hatches3D:
          if (Hatches3D == null) {
            Hatches3D = new global::OpenVectorFormat.VectorBlock.Types.Hatches3D();
          }
          Hatches3D.MergeFrom(other.Hatches3D);
          break;
        case VectorDataOneofCase.PointSequence3D:
          if (PointSequence3D == null) {
            PointSequence3D = new global::OpenVectorFormat.VectorBlock.Types.PointSequence3D();
          }
          PointSequence3D.MergeFrom(other.PointSequence3D);
          break;
        case VectorDataOneofCase.Arcs3D:
          if (Arcs3D == null) {
            Arcs3D = new global::OpenVectorFormat.VectorBlock.Types.Arcs3D();
          }
          Arcs3D.MergeFrom(other.Arcs3D);
          break;
        case VectorDataOneofCase.ExposurePause:
          if (ExposurePause == null) {
            ExposurePause = new global::OpenVectorFormat.VectorBlock.Types.ExposurePause();
          }
          ExposurePause.MergeFrom(other.ExposurePause);
          break;
        case VectorDataOneofCase.LineSequenceParaAdapt:
          if (LineSequenceParaAdapt == null) {
            LineSequenceParaAdapt = new global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt();
          }
          LineSequenceParaAdapt.MergeFrom(other.LineSequenceParaAdapt);
          break;
        case VectorDataOneofCase.HatchParaAdapt:
          if (HatchParaAdapt == null) {
            HatchParaAdapt = new global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt();
          }
          HatchParaAdapt.MergeFrom(other.HatchParaAdapt);
          break;
      }

      switch (other.ProcessMetaDataCase) {
        case ProcessMetaDataOneofCase.LpbfMetadata:
          if (LpbfMetadata == null) {
            LpbfMetadata = new global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata();
          }
          LpbfMetadata.MergeFrom(other.LpbfMetadata);
          break;
        case ProcessMetaDataOneofCase.MicroStructuringMetadata:
          if (MicroStructuringMetadata == null) {
            MicroStructuringMetadata = new global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata();
          }
          MicroStructuringMetadata.MergeFrom(other.MicroStructuringMetadata);
          break;
        case ProcessMetaDataOneofCase.PolishingMetadata:
          if (PolishingMetadata == null) {
            PolishingMetadata = new global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata();
          }
          PolishingMetadata.MergeFrom(other.PolishingMetadata);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequence subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequence) {
              subBuilder.MergeFrom(LineSequence);
            }
            input.ReadMessage(subBuilder);
            LineSequence = subBuilder;
            break;
          }
          case 18: {
            global::OpenVectorFormat.VectorBlock.Types.Hatches subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Hatches();
            if (vectorDataCase_ == VectorDataOneofCase.Hatches) {
              subBuilder.MergeFrom(Hatches);
            }
            input.ReadMessage(subBuilder);
            Hatches = subBuilder;
            break;
          }
          case 26: {
            global::OpenVectorFormat.VectorBlock.Types.PointSequence subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PointSequence();
            if (vectorDataCase_ == VectorDataOneofCase.PointSequence) {
              subBuilder.MergeFrom(PointSequence);
            }
            input.ReadMessage(subBuilder);
            PointSequence = subBuilder;
            break;
          }
          case 34: {
            global::OpenVectorFormat.VectorBlock.Types.Arcs subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
            if (vectorDataCase_ == VectorDataOneofCase.Arcs) {
              subBuilder.MergeFrom(Arcs);
            }
            input.ReadMessage(subBuilder);
            Arcs = subBuilder;
            break;
          }
          case 42: {
            global::OpenVectorFormat.VectorBlock.Types.Ellipses subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Ellipses();
            if (vectorDataCase_ == VectorDataOneofCase.Ellipses) {
              subBuilder.MergeFrom(Ellipses);
            }
            input.ReadMessage(subBuilder);
            Ellipses = subBuilder;
            break;
          }
          case 50: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequence3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequence3D();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) {
              subBuilder.MergeFrom(LineSequence3D);
            }
            input.ReadMessage(subBuilder);
            LineSequence3D = subBuilder;
            break;
          }
          case 58: {
            global::OpenVectorFormat.VectorBlock.Types.Hatches3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Hatches3D();
            if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) {
              subBuilder.MergeFrom(Hatches3D);
            }
            input.ReadMessage(subBuilder);
            Hatches3D = subBuilder;
            break;
          }
          case 66: {
            global::OpenVectorFormat.VectorBlock.Types.PointSequence3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PointSequence3D();
            if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) {
              subBuilder.MergeFrom(PointSequence3D);
            }
            input.ReadMessage(subBuilder);
            PointSequence3D = subBuilder;
            break;
          }
          case 74: {
            global::OpenVectorFormat.VectorBlock.Types.Arcs3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Arcs3D();
            if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) {
              subBuilder.MergeFrom(Arcs3D);
            }
            input.ReadMessage(subBuilder);
            Arcs3D = subBuilder;
            break;
          }
          case 82: {
            global::OpenVectorFormat.VectorBlock.Types.ExposurePause subBuilder = new global::OpenVectorFormat.VectorBlock.Types.ExposurePause();
            if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) {
              subBuilder.MergeFrom(ExposurePause);
            }
            input.ReadMessage(subBuilder);
            ExposurePause = subBuilder;
            break;
          }
          case 90: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) {
              subBuilder.MergeFrom(LineSequenceParaAdapt);
            }
            input.ReadMessage(subBuilder);
            LineSequenceParaAdapt = subBuilder;
            break;
          }
          case 98: {
            global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt subBuilder = new global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt();
            if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) {
              subBuilder.MergeFrom(HatchParaAdapt);
            }
            input.ReadMessage(subBuilder);
            HatchParaAdapt = subBuilder;
            break;
          }
          case 400: {
            MarkingParamsKey = input.ReadInt32();
            break;
          }
          case 424: {
            LaserIndex = input.ReadInt32();
            break;
          }
          case 432: {
            Repeats = input.ReadUInt64();
            break;
          }
          case 802: {
            if (metaData_ == null) {
              MetaData = new global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 810: {
            global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) {
              subBuilder.MergeFrom(LpbfMetadata);
            }
            input.ReadMessage(subBuilder);
            LpbfMetadata = subBuilder;
            break;
          }
          case 818: {
            global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) {
              subBuilder.MergeFrom(MicroStructuringMetadata);
            }
            input.ReadMessage(subBuilder);
            MicroStructuringMetadata = subBuilder;
            break;
          }
          case 826: {
            global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) {
              subBuilder.MergeFrom(PolishingMetadata);
            }
            input.ReadMessage(subBuilder);
            PolishingMetadata = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequence subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequence();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequence) {
              subBuilder.MergeFrom(LineSequence);
            }
            input.ReadMessage(subBuilder);
            LineSequence = subBuilder;
            break;
          }
          case 18: {
            global::OpenVectorFormat.VectorBlock.Types.Hatches subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Hatches();
            if (vectorDataCase_ == VectorDataOneofCase.Hatches) {
              subBuilder.MergeFrom(Hatches);
            }
            input.ReadMessage(subBuilder);
            Hatches = subBuilder;
            break;
          }
          case 26: {
            global::OpenVectorFormat.VectorBlock.Types.PointSequence subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PointSequence();
            if (vectorDataCase_ == VectorDataOneofCase.PointSequence) {
              subBuilder.MergeFrom(PointSequence);
            }
            input.ReadMessage(subBuilder);
            PointSequence = subBuilder;
            break;
          }
          case 34: {
            global::OpenVectorFormat.VectorBlock.Types.Arcs subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
            if (vectorDataCase_ == VectorDataOneofCase.Arcs) {
              subBuilder.MergeFrom(Arcs);
            }
            input.ReadMessage(subBuilder);
            Arcs = subBuilder;
            break;
          }
          case 42: {
            global::OpenVectorFormat.VectorBlock.Types.Ellipses subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Ellipses();
            if (vectorDataCase_ == VectorDataOneofCase.Ellipses) {
              subBuilder.MergeFrom(Ellipses);
            }
            input.ReadMessage(subBuilder);
            Ellipses = subBuilder;
            break;
          }
          case 50: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequence3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequence3D();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequence3D) {
              subBuilder.MergeFrom(LineSequence3D);
            }
            input.ReadMessage(subBuilder);
            LineSequence3D = subBuilder;
            break;
          }
          case 58: {
            global::OpenVectorFormat.VectorBlock.Types.Hatches3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Hatches3D();
            if (vectorDataCase_ == VectorDataOneofCase.Hatches3D) {
              subBuilder.MergeFrom(Hatches3D);
            }
            input.ReadMessage(subBuilder);
            Hatches3D = subBuilder;
            break;
          }
          case 66: {
            global::OpenVectorFormat.VectorBlock.Types.PointSequence3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PointSequence3D();
            if (vectorDataCase_ == VectorDataOneofCase.PointSequence3D) {
              subBuilder.MergeFrom(PointSequence3D);
            }
            input.ReadMessage(subBuilder);
            PointSequence3D = subBuilder;
            break;
          }
          case 74: {
            global::OpenVectorFormat.VectorBlock.Types.Arcs3D subBuilder = new global::OpenVectorFormat.VectorBlock.Types.Arcs3D();
            if (vectorDataCase_ == VectorDataOneofCase.Arcs3D) {
              subBuilder.MergeFrom(Arcs3D);
            }
            input.ReadMessage(subBuilder);
            Arcs3D = subBuilder;
            break;
          }
          case 82: {
            global::OpenVectorFormat.VectorBlock.Types.ExposurePause subBuilder = new global::OpenVectorFormat.VectorBlock.Types.ExposurePause();
            if (vectorDataCase_ == VectorDataOneofCase.ExposurePause) {
              subBuilder.MergeFrom(ExposurePause);
            }
            input.ReadMessage(subBuilder);
            ExposurePause = subBuilder;
            break;
          }
          case 90: {
            global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt();
            if (vectorDataCase_ == VectorDataOneofCase.LineSequenceParaAdapt) {
              subBuilder.MergeFrom(LineSequenceParaAdapt);
            }
            input.ReadMessage(subBuilder);
            LineSequenceParaAdapt = subBuilder;
            break;
          }
          case 98: {
            global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt subBuilder = new global::OpenVectorFormat.VectorBlock.Types.HatchesParaAdapt();
            if (vectorDataCase_ == VectorDataOneofCase.HatchParaAdapt) {
              subBuilder.MergeFrom(HatchParaAdapt);
            }
            input.ReadMessage(subBuilder);
            HatchParaAdapt = subBuilder;
            break;
          }
          case 400: {
            MarkingParamsKey = input.ReadInt32();
            break;
          }
          case 424: {
            LaserIndex = input.ReadInt32();
            break;
          }
          case 432: {
            Repeats = input.ReadUInt64();
            break;
          }
          case 802: {
            if (metaData_ == null) {
              MetaData = new global::OpenVectorFormat.VectorBlock.Types.VectorBlockMetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 810: {
            global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.LpbfMetadata) {
              subBuilder.MergeFrom(LpbfMetadata);
            }
            input.ReadMessage(subBuilder);
            LpbfMetadata = subBuilder;
            break;
          }
          case 818: {
            global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.MicroStructuringMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.MicroStructuringMetadata) {
              subBuilder.MergeFrom(MicroStructuringMetadata);
            }
            input.ReadMessage(subBuilder);
            MicroStructuringMetadata = subBuilder;
            break;
          }
          case 826: {
            global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata subBuilder = new global::OpenVectorFormat.VectorBlock.Types.PolishingMetadata();
            if (processMetaDataCase_ == ProcessMetaDataOneofCase.PolishingMetadata) {
              subBuilder.MergeFrom(PolishingMetadata);
            }
            input.ReadMessage(subBuilder);
            PolishingMetadata = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VectorBlock message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///PartArea defines if the vectors belong to a part surface in horizontal direction (in layer).
      ///Contours are borders of the part in the layer, volume (or core) is the area inbetween.
      ///Transition contours are special additional contour lines connecting volume and contour.
      /// </summary>
      public enum PartArea {
        /// <summary>
        ///also called core or hatches
        /// </summary>
        [pbr::OriginalName("VOLUME")] Volume = 0,
        [pbr::OriginalName("CONTOUR")] Contour = 1,
        [pbr::OriginalName("TRANSITION_CONTOUR")] TransitionContour = 2,
      }

      /// <summary>
      ///StructureType defines the type of structure model the vectors belong to.
      ///PART is default, usually refering to a tesselated model, e.g. STL models.
      ///Support structures don't belong to any part, but are needed for the process.
      ///Wirestructures can be tesselated. But it is more efficient to treat them seperatly in a 
      ///parametrized format. They are similar to supports, but are not removed after the process.
      ///Points use is very limited. They may form a support or wirestructure.
      /// </summary>
      public enum StructureType {
        [pbr::OriginalName("PART")] Part = 0,
        [pbr::OriginalName("SUPPORT")] Support = 1,
        [pbr::OriginalName("WIRESTRUCTURE")] Wirestructure = 2,
        [pbr::OriginalName("POINTS")] Points = 3,
      }

      public sealed partial class VectorBlockMetaData : pb::IMessage<VectorBlockMetaData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<VectorBlockMetaData> _parser = new pb::MessageParser<VectorBlockMetaData>(() => new VectorBlockMetaData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<VectorBlockMetaData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public VectorBlockMetaData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public VectorBlockMetaData(VectorBlockMetaData other) : this() {
          totalScanDistanceInMm_ = other.totalScanDistanceInMm_;
          totalJumpDistanceInMm_ = other.totalJumpDistanceInMm_;
          partKey_ = other.partKey_;
          patchKey_ = other.patchKey_;
          contourIndex_ = other.contourIndex_;
          bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
          displayColor_ = other.displayColor_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public VectorBlockMetaData Clone() {
          return new VectorBlockMetaData(this);
        }

        /// <summary>Field number for the "total_scan_distance_in_mm" field.</summary>
        public const int TotalScanDistanceInMmFieldNumber = 1;
        private double totalScanDistanceInMm_;
        /// <summary>
        ///total scan distance of this vector block in mm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalScanDistanceInMm {
          get { return totalScanDistanceInMm_; }
          set {
            totalScanDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "total_jump_distance_in_mm" field.</summary>
        public const int TotalJumpDistanceInMmFieldNumber = 2;
        private double totalJumpDistanceInMm_;
        /// <summary>
        ///total scan distance of this vector block in mm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TotalJumpDistanceInMm {
          get { return totalJumpDistanceInMm_; }
          set {
            totalJumpDistanceInMm_ = value;
          }
        }

        /// <summary>Field number for the "part_key" field.</summary>
        public const int PartKeyFieldNumber = 3;
        private int partKey_;
        /// <summary>
        ///key used in Job/partsMap
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PartKey {
          get { return partKey_; }
          set {
            partKey_ = value;
          }
        }

        /// <summary>Field number for the "patch_key" field.</summary>
        public const int PatchKeyFieldNumber = 4;
        private int patchKey_;
        /// <summary>
        ///key used in Job/Workplane/patchesMap
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PatchKey {
          get { return patchKey_; }
          set {
            patchKey_ = value;
          }
        }

        /// <summary>Field number for the "contour_index" field.</summary>
        public const int ContourIndexFieldNumber = 5;
        private int contourIndex_;
        /// <summary>
        ///Index of the closedContour in the workplane/Metadata/contours field this vector block is contained in.
        ///Contours shall be enumerated ascending in each workplane to identifiy physical contours
        ///consisting of multiple vector blocks (e.g. when parameters change) as one.
        ///If this parameter is set to any value smaller than 0, this explicitly indicates that none of the vectors
        ///of the block are contained in any contour (this is the case for e.g. single vector/line supports).
        ///If contour_index is set to a valid contour index, all of the blocks vectors are contained in the contour.
        ///The case of a vector block that partly overlaps a contour is excluded on purpose. Overlapping blocks cause
        ///a reexposure that should be handled by the machine controller. If containing contour meta data is calculated,
        ///overlapping vector blocks should be split and properly indicate the reexposure in the meta data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ContourIndex {
          get { return contourIndex_; }
          set {
            contourIndex_ = value;
          }
        }

        /// <summary>Field number for the "bounds" field.</summary>
        public const int BoundsFieldNumber = 6;
        private global::OpenVectorFormat.AxisAlignedBox2D bounds_;
        /// <summary>
        ///2D axis aligned bounding box of the vector block coordinates
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.AxisAlignedBox2D Bounds {
          get { return bounds_; }
          set {
            bounds_ = value;
          }
        }

        /// <summary>Field number for the "display_color" field.</summary>
        public const int DisplayColorFieldNumber = 7;
        private int displayColor_;
        /// <summary>
        ///Optional metadata defining a preferred 32bit RGBA color to render the vector data of this vector block in a viewer.
        ///int32 is interpreted as byte[4] with byte[0] = red, byte[1] = green, byte[2] = blue, byte[3] = alpha
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DisplayColor {
          get { return displayColor_; }
          set {
            displayColor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as VectorBlockMetaData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(VectorBlockMetaData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalScanDistanceInMm, other.TotalScanDistanceInMm)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalJumpDistanceInMm, other.TotalJumpDistanceInMm)) return false;
          if (PartKey != other.PartKey) return false;
          if (PatchKey != other.PatchKey) return false;
          if (ContourIndex != other.ContourIndex) return false;
          if (!object.Equals(Bounds, other.Bounds)) return false;
          if (DisplayColor != other.DisplayColor) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (TotalScanDistanceInMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalScanDistanceInMm);
          if (TotalJumpDistanceInMm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalJumpDistanceInMm);
          if (PartKey != 0) hash ^= PartKey.GetHashCode();
          if (PatchKey != 0) hash ^= PatchKey.GetHashCode();
          if (ContourIndex != 0) hash ^= ContourIndex.GetHashCode();
          if (bounds_ != null) hash ^= Bounds.GetHashCode();
          if (DisplayColor != 0) hash ^= DisplayColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TotalScanDistanceInMm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(TotalScanDistanceInMm);
          }
          if (TotalJumpDistanceInMm != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TotalJumpDistanceInMm);
          }
          if (PartKey != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PartKey);
          }
          if (PatchKey != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PatchKey);
          }
          if (ContourIndex != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ContourIndex);
          }
          if (bounds_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Bounds);
          }
          if (DisplayColor != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(DisplayColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TotalScanDistanceInMm != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(TotalScanDistanceInMm);
          }
          if (TotalJumpDistanceInMm != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(TotalJumpDistanceInMm);
          }
          if (PartKey != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(PartKey);
          }
          if (PatchKey != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(PatchKey);
          }
          if (ContourIndex != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ContourIndex);
          }
          if (bounds_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Bounds);
          }
          if (DisplayColor != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(DisplayColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (TotalScanDistanceInMm != 0D) {
            size += 1 + 8;
          }
          if (TotalJumpDistanceInMm != 0D) {
            size += 1 + 8;
          }
          if (PartKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartKey);
          }
          if (PatchKey != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PatchKey);
          }
          if (ContourIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContourIndex);
          }
          if (bounds_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
          }
          if (DisplayColor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(VectorBlockMetaData other) {
          if (other == null) {
            return;
          }
          if (other.TotalScanDistanceInMm != 0D) {
            TotalScanDistanceInMm = other.TotalScanDistanceInMm;
          }
          if (other.TotalJumpDistanceInMm != 0D) {
            TotalJumpDistanceInMm = other.TotalJumpDistanceInMm;
          }
          if (other.PartKey != 0) {
            PartKey = other.PartKey;
          }
          if (other.PatchKey != 0) {
            PatchKey = other.PatchKey;
          }
          if (other.ContourIndex != 0) {
            ContourIndex = other.ContourIndex;
          }
          if (other.bounds_ != null) {
            if (bounds_ == null) {
              Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
            }
            Bounds.MergeFrom(other.Bounds);
          }
          if (other.DisplayColor != 0) {
            DisplayColor = other.DisplayColor;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                TotalScanDistanceInMm = input.ReadDouble();
                break;
              }
              case 17: {
                TotalJumpDistanceInMm = input.ReadDouble();
                break;
              }
              case 24: {
                PartKey = input.ReadInt32();
                break;
              }
              case 32: {
                PatchKey = input.ReadInt32();
                break;
              }
              case 40: {
                ContourIndex = input.ReadInt32();
                break;
              }
              case 50: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
              case 56: {
                DisplayColor = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                TotalScanDistanceInMm = input.ReadDouble();
                break;
              }
              case 17: {
                TotalJumpDistanceInMm = input.ReadDouble();
                break;
              }
              case 24: {
                PartKey = input.ReadInt32();
                break;
              }
              case 32: {
                PatchKey = input.ReadInt32();
                break;
              }
              case 40: {
                ContourIndex = input.ReadInt32();
                break;
              }
              case 50: {
                if (bounds_ == null) {
                  Bounds = new global::OpenVectorFormat.AxisAlignedBox2D();
                }
                input.ReadMessage(Bounds);
                break;
              }
              case 56: {
                DisplayColor = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// ProcessMetaData for LPBF 
      /// </summary>
      public sealed partial class LPBFMetadata : pb::IMessage<LPBFMetadata>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LPBFMetadata> _parser = new pb::MessageParser<LPBFMetadata>(() => new LPBFMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<LPBFMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LPBFMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LPBFMetadata(LPBFMetadata other) : this() {
          partArea_ = other.partArea_;
          skinType_ = other.skinType_;
          skinCoreStrategyArea_ = other.skinCoreStrategyArea_;
          structureType_ = other.structureType_;
          reexposure_ = other.reexposure_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LPBFMetadata Clone() {
          return new LPBFMetadata(this);
        }

        /// <summary>Field number for the "part_area" field.</summary>
        public const int PartAreaFieldNumber = 1;
        private global::OpenVectorFormat.VectorBlock.Types.PartArea partArea_ = global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.PartArea PartArea {
          get { return partArea_; }
          set {
            partArea_ = value;
          }
        }

        /// <summary>Field number for the "skin_type" field.</summary>
        public const int SkinTypeFieldNumber = 2;
        private global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType skinType_ = global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType SkinType {
          get { return skinType_; }
          set {
            skinType_ = value;
          }
        }

        /// <summary>Field number for the "skin_core_strategy_area" field.</summary>
        public const int SkinCoreStrategyAreaFieldNumber = 3;
        private global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea skinCoreStrategyArea_ = global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea SkinCoreStrategyArea {
          get { return skinCoreStrategyArea_; }
          set {
            skinCoreStrategyArea_ = value;
          }
        }

        /// <summary>Field number for the "structure_type" field.</summary>
        public const int StructureTypeFieldNumber = 4;
        private global::OpenVectorFormat.VectorBlock.Types.StructureType structureType_ = global::OpenVectorFormat.VectorBlock.Types.StructureType.Part;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.StructureType StructureType {
          get { return structureType_; }
          set {
            structureType_ = value;
          }
        }

        /// <summary>Field number for the "reexposure" field.</summary>
        public const int ReexposureFieldNumber = 5;
        private bool reexposure_;
        /// <summary>
        ///states if this vector block is a reexposure of the area (true) or the first exposure (false)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Reexposure {
          get { return reexposure_; }
          set {
            reexposure_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as LPBFMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(LPBFMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PartArea != other.PartArea) return false;
          if (SkinType != other.SkinType) return false;
          if (SkinCoreStrategyArea != other.SkinCoreStrategyArea) return false;
          if (StructureType != other.StructureType) return false;
          if (Reexposure != other.Reexposure) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) hash ^= PartArea.GetHashCode();
          if (SkinType != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin) hash ^= SkinType.GetHashCode();
          if (SkinCoreStrategyArea != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull) hash ^= SkinCoreStrategyArea.GetHashCode();
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) hash ^= StructureType.GetHashCode();
          if (Reexposure != false) hash ^= Reexposure.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PartArea);
          }
          if (SkinType != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SkinType);
          }
          if (SkinCoreStrategyArea != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull) {
            output.WriteRawTag(24);
            output.WriteEnum((int) SkinCoreStrategyArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            output.WriteRawTag(32);
            output.WriteEnum((int) StructureType);
          }
          if (Reexposure != false) {
            output.WriteRawTag(40);
            output.WriteBool(Reexposure);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PartArea);
          }
          if (SkinType != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SkinType);
          }
          if (SkinCoreStrategyArea != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull) {
            output.WriteRawTag(24);
            output.WriteEnum((int) SkinCoreStrategyArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            output.WriteRawTag(32);
            output.WriteEnum((int) StructureType);
          }
          if (Reexposure != false) {
            output.WriteRawTag(40);
            output.WriteBool(Reexposure);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PartArea);
          }
          if (SkinType != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkinType);
          }
          if (SkinCoreStrategyArea != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SkinCoreStrategyArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StructureType);
          }
          if (Reexposure != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(LPBFMetadata other) {
          if (other == null) {
            return;
          }
          if (other.PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            PartArea = other.PartArea;
          }
          if (other.SkinType != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType.InSkin) {
            SkinType = other.SkinType;
          }
          if (other.SkinCoreStrategyArea != global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea.OuterHull) {
            SkinCoreStrategyArea = other.SkinCoreStrategyArea;
          }
          if (other.StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            StructureType = other.StructureType;
          }
          if (other.Reexposure != false) {
            Reexposure = other.Reexposure;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PartArea = (global::OpenVectorFormat.VectorBlock.Types.PartArea) input.ReadEnum();
                break;
              }
              case 16: {
                SkinType = (global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType) input.ReadEnum();
                break;
              }
              case 24: {
                SkinCoreStrategyArea = (global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea) input.ReadEnum();
                break;
              }
              case 32: {
                StructureType = (global::OpenVectorFormat.VectorBlock.Types.StructureType) input.ReadEnum();
                break;
              }
              case 40: {
                Reexposure = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PartArea = (global::OpenVectorFormat.VectorBlock.Types.PartArea) input.ReadEnum();
                break;
              }
              case 16: {
                SkinType = (global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinType) input.ReadEnum();
                break;
              }
              case 24: {
                SkinCoreStrategyArea = (global::OpenVectorFormat.VectorBlock.Types.LPBFMetadata.Types.SkinCoreStrategyArea) input.ReadEnum();
                break;
              }
              case 32: {
                StructureType = (global::OpenVectorFormat.VectorBlock.Types.StructureType) input.ReadEnum();
                break;
              }
              case 40: {
                Reexposure = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the LPBFMetadata message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          ///SkinType defines if the vectors of this block belong to the parts surface in vertical direction
          ///InSkin (default), vectors are found on this position on previous and next layer
          ///DownSkin,  no vectors in previous layer, exposure in powder bed
          ///Upskin, no vectors in next layer
          /// </summary>
          public enum SkinType {
            [pbr::OriginalName("IN_SKIN")] InSkin = 0,
            [pbr::OriginalName("DOWN_SKIN")] DownSkin = 1,
            [pbr::OriginalName("UP_SKIN")] UpSkin = 2,
          }

          /// <summary>
          ///Skin Core strategy uses two laser spots with different sizes for core (bigger spot)
          ///and outer hull (smaller spot) to increase productivity. Default value 
          ///(also for not using the strategy) is OuterHull, using the small spot for the whole part.
          /// </summary>
          public enum SkinCoreStrategyArea {
            [pbr::OriginalName("OUTER_HULL")] OuterHull = 0,
            [pbr::OriginalName("CORE")] Core = 1,
            [pbr::OriginalName("INBETWEEN_HULL")] InbetweenHull = 2,
          }

        }
        #endregion

      }

      /// <summary>
      ///ProcessMetaData for MicroStructuring
      /// </summary>
      public sealed partial class MicroStructuringMetadata : pb::IMessage<MicroStructuringMetadata>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MicroStructuringMetadata> _parser = new pb::MessageParser<MicroStructuringMetadata>(() => new MicroStructuringMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<MicroStructuringMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MicroStructuringMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MicroStructuringMetadata(MicroStructuringMetadata other) : this() {
          partArea_ = other.partArea_;
          structureType_ = other.structureType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MicroStructuringMetadata Clone() {
          return new MicroStructuringMetadata(this);
        }

        /// <summary>Field number for the "part_area" field.</summary>
        public const int PartAreaFieldNumber = 1;
        private global::OpenVectorFormat.VectorBlock.Types.PartArea partArea_ = global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.PartArea PartArea {
          get { return partArea_; }
          set {
            partArea_ = value;
          }
        }

        /// <summary>Field number for the "structure_type" field.</summary>
        public const int StructureTypeFieldNumber = 2;
        private global::OpenVectorFormat.VectorBlock.Types.StructureType structureType_ = global::OpenVectorFormat.VectorBlock.Types.StructureType.Part;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.StructureType StructureType {
          get { return structureType_; }
          set {
            structureType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as MicroStructuringMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(MicroStructuringMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PartArea != other.PartArea) return false;
          if (StructureType != other.StructureType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) hash ^= PartArea.GetHashCode();
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) hash ^= StructureType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PartArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            output.WriteRawTag(16);
            output.WriteEnum((int) StructureType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            output.WriteRawTag(8);
            output.WriteEnum((int) PartArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            output.WriteRawTag(16);
            output.WriteEnum((int) StructureType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PartArea);
          }
          if (StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StructureType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(MicroStructuringMetadata other) {
          if (other == null) {
            return;
          }
          if (other.PartArea != global::OpenVectorFormat.VectorBlock.Types.PartArea.Volume) {
            PartArea = other.PartArea;
          }
          if (other.StructureType != global::OpenVectorFormat.VectorBlock.Types.StructureType.Part) {
            StructureType = other.StructureType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PartArea = (global::OpenVectorFormat.VectorBlock.Types.PartArea) input.ReadEnum();
                break;
              }
              case 16: {
                StructureType = (global::OpenVectorFormat.VectorBlock.Types.StructureType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PartArea = (global::OpenVectorFormat.VectorBlock.Types.PartArea) input.ReadEnum();
                break;
              }
              case 16: {
                StructureType = (global::OpenVectorFormat.VectorBlock.Types.StructureType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///ProcessMetaData for Polishing
      /// </summary>
      public sealed partial class PolishingMetadata : pb::IMessage<PolishingMetadata>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PolishingMetadata> _parser = new pb::MessageParser<PolishingMetadata>(() => new PolishingMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PolishingMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PolishingMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PolishingMetadata(PolishingMetadata other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PolishingMetadata Clone() {
          return new PolishingMetadata(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PolishingMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PolishingMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PolishingMetadata other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      /// <summary>
      ///LineSequence:
      ///A lineSequence is defined by a set of vertex points (x,y), 
      ///connected contiguously in the listed order by straight line segments.
      ///A closed lineSequence can also be called a polygon.
      /// </summary>
      public sealed partial class LineSequence : pb::IMessage<LineSequence>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LineSequence> _parser = new pb::MessageParser<LineSequence>(() => new LineSequence());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<LineSequence> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence(LineSequence other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence Clone() {
          return new LineSequence(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as LineSequence);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(LineSequence other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(LineSequence other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///LineSequence3D:
      ///A lineSequence3D is defined by a set of vertex points (x,y,z) in 3D space, 
      ///connected contiguously in the listed order by straight line segments.
      ///A closed lineSequence can also be called a polygon.
      /// </summary>
      public sealed partial class LineSequence3D : pb::IMessage<LineSequence3D>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LineSequence3D> _parser = new pb::MessageParser<LineSequence3D>(() => new LineSequence3D());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<LineSequence3D> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence3D() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence3D(LineSequence3D other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequence3D Clone() {
          return new LineSequence3D(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as LineSequence3D);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(LineSequence3D other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(LineSequence3D other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///Hatches:
      ///A hatch is a set of independent straight lines,
      ///each defined by one start and one end point (x,y) for 2D.
      /// </summary>
      public sealed partial class Hatches : pb::IMessage<Hatches>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Hatches> _parser = new pb::MessageParser<Hatches>(() => new Hatches());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Hatches> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches(Hatches other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches Clone() {
          return new Hatches(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Hatches);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Hatches other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Hatches other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///Hatches3D:
      ///A hatch is a set of independent straight lines,
      ///each defined by one start and one end point (x,y,z) for 3D.
      /// </summary>
      public sealed partial class Hatches3D : pb::IMessage<Hatches3D>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Hatches3D> _parser = new pb::MessageParser<Hatches3D>(() => new Hatches3D());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Hatches3D> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches3D() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches3D(Hatches3D other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Hatches3D Clone() {
          return new Hatches3D(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Hatches3D);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Hatches3D other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Hatches3D other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///PointSequence:
      ///A point sequence is a set of points, each marked
      ///for a fixed period of time. Each point consists of (x,y) for 2D.
      /// </summary>
      public sealed partial class PointSequence : pb::IMessage<PointSequence>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PointSequence> _parser = new pb::MessageParser<PointSequence>(() => new PointSequence());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PointSequence> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence(PointSequence other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence Clone() {
          return new PointSequence(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PointSequence);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PointSequence other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PointSequence other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///PointSequence3D:
      ///A point sequence is a set of points, each marked
      ///for a fixed period of time. Each point consists of (x,y,z) for 3D.
      /// </summary>
      public sealed partial class PointSequence3D : pb::IMessage<PointSequence3D>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PointSequence3D> _parser = new pb::MessageParser<PointSequence3D>(() => new PointSequence3D());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PointSequence3D> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence3D() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence3D(PointSequence3D other) : this() {
          points_ = other.points_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PointSequence3D Clone() {
          return new PointSequence3D(this);
        }

        /// <summary>Field number for the "points" field.</summary>
        public const int PointsFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_points_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> points_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Points {
          get { return points_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PointSequence3D);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PointSequence3D other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!points_.Equals(other.points_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= points_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          points_.WriteTo(output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          points_.WriteTo(ref output, _repeated_points_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += points_.CalculateSize(_repeated_points_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PointSequence3D other) {
          if (other == null) {
            return;
          }
          points_.Add(other.points_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(input, _repeated_points_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                points_.AddEntriesFrom(ref input, _repeated_points_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///An arc is defined by a start point on the circle,
      ///defined in relative cartesian coordinates to the center,
      ///a center point and an arc angle (degrees). Positive angles mean clockwise,
      ///negative counter-clockwise rotation.
      ///Multiple same radius/angle arcs are defined with repeated center coordinates (x,y).
      /// </summary>
      public sealed partial class Arcs : pb::IMessage<Arcs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Arcs> _parser = new pb::MessageParser<Arcs>(() => new Arcs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Arcs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs(Arcs other) : this() {
          angle_ = other.angle_;
          startDx_ = other.startDx_;
          startDy_ = other.startDy_;
          centers_ = other.centers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs Clone() {
          return new Arcs(this);
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 1;
        private double angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        /// <summary>Field number for the "start_dx" field.</summary>
        public const int StartDxFieldNumber = 2;
        private float startDx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StartDx {
          get { return startDx_; }
          set {
            startDx_ = value;
          }
        }

        /// <summary>Field number for the "start_dy" field.</summary>
        public const int StartDyFieldNumber = 3;
        private float startDy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StartDy {
          get { return startDy_; }
          set {
            startDy_ = value;
          }
        }

        /// <summary>Field number for the "centers" field.</summary>
        public const int CentersFieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_centers_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> centers_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Centers {
          get { return centers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Arcs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Arcs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDx, other.StartDx)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDy, other.StartDy)) return false;
          if(!centers_.Equals(other.centers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
          if (StartDx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDx);
          if (StartDy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDy);
          hash ^= centers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Angle != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Angle);
          }
          if (StartDx != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(StartDx);
          }
          if (StartDy != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StartDy);
          }
          centers_.WriteTo(output, _repeated_centers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Angle != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Angle);
          }
          if (StartDx != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(StartDx);
          }
          if (StartDy != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StartDy);
          }
          centers_.WriteTo(ref output, _repeated_centers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Angle != 0D) {
            size += 1 + 8;
          }
          if (StartDx != 0F) {
            size += 1 + 4;
          }
          if (StartDy != 0F) {
            size += 1 + 4;
          }
          size += centers_.CalculateSize(_repeated_centers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Arcs other) {
          if (other == null) {
            return;
          }
          if (other.Angle != 0D) {
            Angle = other.Angle;
          }
          if (other.StartDx != 0F) {
            StartDx = other.StartDx;
          }
          if (other.StartDy != 0F) {
            StartDy = other.StartDy;
          }
          centers_.Add(other.centers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Angle = input.ReadDouble();
                break;
              }
              case 21: {
                StartDx = input.ReadFloat();
                break;
              }
              case 29: {
                StartDy = input.ReadFloat();
                break;
              }
              case 34:
              case 37: {
                centers_.AddEntriesFrom(input, _repeated_centers_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Angle = input.ReadDouble();
                break;
              }
              case 21: {
                StartDx = input.ReadFloat();
                break;
              }
              case 29: {
                StartDy = input.ReadFloat();
                break;
              }
              case 34:
              case 37: {
                centers_.AddEntriesFrom(ref input, _repeated_centers_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///An arc3D (edge of a plate) is defined by a start point on the circle,
      ///defined in relative cartesian coordinates to the center,
      ///a center point and an arc angle (degrees). Positive angles mean clockwise,
      ///negative counter-clockwise rotation.
      ///Multiple same radius/angle arcs are defined with repeated center coordinates (x,y,z) for 3D.
      /// </summary>
      public sealed partial class Arcs3D : pb::IMessage<Arcs3D>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Arcs3D> _parser = new pb::MessageParser<Arcs3D>(() => new Arcs3D());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Arcs3D> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs3D() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs3D(Arcs3D other) : this() {
          angle_ = other.angle_;
          startDx_ = other.startDx_;
          startDy_ = other.startDy_;
          startDz_ = other.startDz_;
          centers_ = other.centers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arcs3D Clone() {
          return new Arcs3D(this);
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 1;
        private double angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        /// <summary>Field number for the "start_dx" field.</summary>
        public const int StartDxFieldNumber = 2;
        private float startDx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StartDx {
          get { return startDx_; }
          set {
            startDx_ = value;
          }
        }

        /// <summary>Field number for the "start_dy" field.</summary>
        public const int StartDyFieldNumber = 3;
        private float startDy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StartDy {
          get { return startDy_; }
          set {
            startDy_ = value;
          }
        }

        /// <summary>Field number for the "start_dz" field.</summary>
        public const int StartDzFieldNumber = 4;
        private float startDz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StartDz {
          get { return startDz_; }
          set {
            startDz_ = value;
          }
        }

        /// <summary>Field number for the "centers" field.</summary>
        public const int CentersFieldNumber = 5;
        private static readonly pb::FieldCodec<float> _repeated_centers_codec
            = pb::FieldCodec.ForFloat(42);
        private readonly pbc::RepeatedField<float> centers_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> Centers {
          get { return centers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Arcs3D);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Arcs3D other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Angle, other.Angle)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDx, other.StartDx)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDy, other.StartDy)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartDz, other.StartDz)) return false;
          if(!centers_.Equals(other.centers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Angle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Angle);
          if (StartDx != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDx);
          if (StartDy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDy);
          if (StartDz != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartDz);
          hash ^= centers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Angle != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Angle);
          }
          if (StartDx != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(StartDx);
          }
          if (StartDy != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StartDy);
          }
          if (StartDz != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(StartDz);
          }
          centers_.WriteTo(output, _repeated_centers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Angle != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Angle);
          }
          if (StartDx != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(StartDx);
          }
          if (StartDy != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StartDy);
          }
          if (StartDz != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(StartDz);
          }
          centers_.WriteTo(ref output, _repeated_centers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Angle != 0D) {
            size += 1 + 8;
          }
          if (StartDx != 0F) {
            size += 1 + 4;
          }
          if (StartDy != 0F) {
            size += 1 + 4;
          }
          if (StartDz != 0F) {
            size += 1 + 4;
          }
          size += centers_.CalculateSize(_repeated_centers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Arcs3D other) {
          if (other == null) {
            return;
          }
          if (other.Angle != 0D) {
            Angle = other.Angle;
          }
          if (other.StartDx != 0F) {
            StartDx = other.StartDx;
          }
          if (other.StartDy != 0F) {
            StartDy = other.StartDy;
          }
          if (other.StartDz != 0F) {
            StartDz = other.StartDz;
          }
          centers_.Add(other.centers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Angle = input.ReadDouble();
                break;
              }
              case 21: {
                StartDx = input.ReadFloat();
                break;
              }
              case 29: {
                StartDy = input.ReadFloat();
                break;
              }
              case 37: {
                StartDz = input.ReadFloat();
                break;
              }
              case 42:
              case 45: {
                centers_.AddEntriesFrom(input, _repeated_centers_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Angle = input.ReadDouble();
                break;
              }
              case 21: {
                StartDx = input.ReadFloat();
                break;
              }
              case 29: {
                StartDy = input.ReadFloat();
                break;
              }
              case 37: {
                StartDz = input.ReadFloat();
                break;
              }
              case 42:
              case 45: {
                centers_.AddEntriesFrom(ref input, _repeated_centers_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///An ellipse is defined like an arc, with additional parameters
      ///defining the ellipse shape: a/b length of ellipse half axis
      ///phi0 phase zero angle (start point of ellipse relative to end of a)
      /// </summary>
      public sealed partial class Ellipses : pb::IMessage<Ellipses>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Ellipses> _parser = new pb::MessageParser<Ellipses>(() => new Ellipses());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Ellipses> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Ellipses() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Ellipses(Ellipses other) : this() {
          a_ = other.a_;
          b_ = other.b_;
          phi0_ = other.phi0_;
          ellipsesArcs_ = other.ellipsesArcs_ != null ? other.ellipsesArcs_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Ellipses Clone() {
          return new Ellipses(this);
        }

        /// <summary>Field number for the "a" field.</summary>
        public const int AFieldNumber = 1;
        private float a_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float A {
          get { return a_; }
          set {
            a_ = value;
          }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 2;
        private float b_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float B {
          get { return b_; }
          set {
            b_ = value;
          }
        }

        /// <summary>Field number for the "phi0" field.</summary>
        public const int Phi0FieldNumber = 3;
        private double phi0_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Phi0 {
          get { return phi0_; }
          set {
            phi0_ = value;
          }
        }

        /// <summary>Field number for the "ellipses_arcs" field.</summary>
        public const int EllipsesArcsFieldNumber = 4;
        private global::OpenVectorFormat.VectorBlock.Types.Arcs ellipsesArcs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.Arcs EllipsesArcs {
          get { return ellipsesArcs_; }
          set {
            ellipsesArcs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Ellipses);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Ellipses other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Phi0, other.Phi0)) return false;
          if (!object.Equals(EllipsesArcs, other.EllipsesArcs)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
          if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
          if (Phi0 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Phi0);
          if (ellipsesArcs_ != null) hash ^= EllipsesArcs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (A != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(A);
          }
          if (B != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(B);
          }
          if (Phi0 != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Phi0);
          }
          if (ellipsesArcs_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EllipsesArcs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (A != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(A);
          }
          if (B != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(B);
          }
          if (Phi0 != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Phi0);
          }
          if (ellipsesArcs_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EllipsesArcs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (A != 0F) {
            size += 1 + 4;
          }
          if (B != 0F) {
            size += 1 + 4;
          }
          if (Phi0 != 0D) {
            size += 1 + 8;
          }
          if (ellipsesArcs_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EllipsesArcs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Ellipses other) {
          if (other == null) {
            return;
          }
          if (other.A != 0F) {
            A = other.A;
          }
          if (other.B != 0F) {
            B = other.B;
          }
          if (other.Phi0 != 0D) {
            Phi0 = other.Phi0;
          }
          if (other.ellipsesArcs_ != null) {
            if (ellipsesArcs_ == null) {
              EllipsesArcs = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
            }
            EllipsesArcs.MergeFrom(other.EllipsesArcs);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                A = input.ReadFloat();
                break;
              }
              case 21: {
                B = input.ReadFloat();
                break;
              }
              case 25: {
                Phi0 = input.ReadDouble();
                break;
              }
              case 34: {
                if (ellipsesArcs_ == null) {
                  EllipsesArcs = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
                }
                input.ReadMessage(EllipsesArcs);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                A = input.ReadFloat();
                break;
              }
              case 21: {
                B = input.ReadFloat();
                break;
              }
              case 25: {
                Phi0 = input.ReadDouble();
                break;
              }
              case 34: {
                if (ellipsesArcs_ == null) {
                  EllipsesArcs = new global::OpenVectorFormat.VectorBlock.Types.Arcs();
                }
                input.ReadMessage(EllipsesArcs);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///Pause the exposure procedure. This can be necessary e.g. for thermal reasons,
      ///or for syncing mulitple laser scanner units, preventing overlap or smoke interaction.
      /// </summary>
      public sealed partial class ExposurePause : pb::IMessage<ExposurePause>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ExposurePause> _parser = new pb::MessageParser<ExposurePause>(() => new ExposurePause());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ExposurePause> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExposurePause() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExposurePause(ExposurePause other) : this() {
          pauseInUs_ = other.pauseInUs_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExposurePause Clone() {
          return new ExposurePause(this);
        }

        /// <summary>Field number for the "pause_in_us" field.</summary>
        public const int PauseInUsFieldNumber = 1;
        private ulong pauseInUs_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong PauseInUs {
          get { return pauseInUs_; }
          set {
            pauseInUs_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ExposurePause);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ExposurePause other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PauseInUs != other.PauseInUs) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (PauseInUs != 0UL) hash ^= PauseInUs.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PauseInUs != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(PauseInUs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PauseInUs != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(PauseInUs);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (PauseInUs != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PauseInUs);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ExposurePause other) {
          if (other == null) {
            return;
          }
          if (other.PauseInUs != 0UL) {
            PauseInUs = other.PauseInUs;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PauseInUs = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PauseInUs = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      ///A LineSequence with additional adaption of one laser parameter along the vectors.
      ///Each point consists of (x,y,parameterValue) for 2D.
      ///The parameterValue is the goal value that will be reached at the end of the vector,
      ///scaling linear along the vector. The goal gets priority and overwrites settings of the
      ///parameter set.
      /// </summary>
      public sealed partial class LineSequenceParaAdapt : pb::IMessage<LineSequenceParaAdapt>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LineSequenceParaAdapt> _parser = new pb::MessageParser<LineSequenceParaAdapt>(() => new LineSequenceParaAdapt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<LineSequenceParaAdapt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[14]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequenceParaAdapt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequenceParaAdapt(LineSequenceParaAdapt other) : this() {
          pointsWithParas_ = other.pointsWithParas_.Clone();
          parameter_ = other.parameter_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LineSequenceParaAdapt Clone() {
          return new LineSequenceParaAdapt(this);
        }

        /// <summary>Field number for the "points_with_paras" field.</summary>
        public const int PointsWithParasFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_pointsWithParas_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> pointsWithParas_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> PointsWithParas {
          get { return pointsWithParas_; }
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 2;
        private global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter parameter_ = global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter Parameter {
          get { return parameter_; }
          set {
            parameter_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as LineSequenceParaAdapt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(LineSequenceParaAdapt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!pointsWithParas_.Equals(other.pointsWithParas_)) return false;
          if (Parameter != other.Parameter) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= pointsWithParas_.GetHashCode();
          if (Parameter != global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW) hash ^= Parameter.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          pointsWithParas_.WriteTo(output, _repeated_pointsWithParas_codec);
          if (Parameter != global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Parameter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          pointsWithParas_.WriteTo(ref output, _repeated_pointsWithParas_codec);
          if (Parameter != global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Parameter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += pointsWithParas_.CalculateSize(_repeated_pointsWithParas_codec);
          if (Parameter != global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Parameter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(LineSequenceParaAdapt other) {
          if (other == null) {
            return;
          }
          pointsWithParas_.Add(other.pointsWithParas_);
          if (other.Parameter != global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter.LaserPowerInW) {
            Parameter = other.Parameter;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                pointsWithParas_.AddEntriesFrom(input, _repeated_pointsWithParas_codec);
                break;
              }
              case 16: {
                Parameter = (global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 13: {
                pointsWithParas_.AddEntriesFrom(ref input, _repeated_pointsWithParas_codec);
                break;
              }
              case 16: {
                Parameter = (global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Types.AdaptedParameter) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the LineSequenceParaAdapt message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum AdaptedParameter {
            [pbr::OriginalName("LASER_POWER_IN_W")] LaserPowerInW = 0,
            [pbr::OriginalName("LASER_FOCUS_SHIFT_IN_MM")] LaserFocusShiftInMm = 1,
            /// <summary>
            ///for Q-Switch only
            /// </summary>
            [pbr::OriginalName("LASER_PULSE_LENGTH_IN_US")] LaserPulseLengthInUs = 2,
            [pbr::OriginalName("LASER_PULSE_REPITION_RATE_IN_HZ")] LaserPulseRepitionRateInHz = 3,
          }

        }
        #endregion

      }

      /// <summary>
      ///A hatch divided into a line sequence with adaption parameter
      /// </summary>
      public sealed partial class HatchesParaAdapt : pb::IMessage<HatchesParaAdapt>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<HatchesParaAdapt> _parser = new pb::MessageParser<HatchesParaAdapt>(() => new HatchesParaAdapt());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<HatchesParaAdapt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::OpenVectorFormat.VectorBlock.Descriptor.NestedTypes[15]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HatchesParaAdapt() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HatchesParaAdapt(HatchesParaAdapt other) : this() {
          hatchAsLinesequence_ = other.hatchAsLinesequence_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public HatchesParaAdapt Clone() {
          return new HatchesParaAdapt(this);
        }

        /// <summary>Field number for the "hatchAsLinesequence" field.</summary>
        public const int HatchAsLinesequenceFieldNumber = 1;
        private static readonly pb::FieldCodec<global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt> _repeated_hatchAsLinesequence_codec
            = pb::FieldCodec.ForMessage(10, global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt.Parser);
        private readonly pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt> hatchAsLinesequence_ = new pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::OpenVectorFormat.VectorBlock.Types.LineSequenceParaAdapt> HatchAsLinesequence {
          get { return hatchAsLinesequence_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as HatchesParaAdapt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(HatchesParaAdapt other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!hatchAsLinesequence_.Equals(other.hatchAsLinesequence_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= hatchAsLinesequence_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          hatchAsLinesequence_.WriteTo(output, _repeated_hatchAsLinesequence_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          hatchAsLinesequence_.WriteTo(ref output, _repeated_hatchAsLinesequence_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += hatchAsLinesequence_.CalculateSize(_repeated_hatchAsLinesequence_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(HatchesParaAdapt other) {
          if (other == null) {
            return;
          }
          hatchAsLinesequence_.Add(other.hatchAsLinesequence_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                hatchAsLinesequence_.AddEntriesFrom(input, _repeated_hatchAsLinesequence_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                hatchAsLinesequence_.AddEntriesFrom(ref input, _repeated_hatchAsLinesequence_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///axis aligned rectangular box in 2D
  ///defined by the x and y coordinates of the lower left (min) and upper right (max) corner
  /// </summary>
  public sealed partial class AxisAlignedBox2D : pb::IMessage<AxisAlignedBox2D>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AxisAlignedBox2D> _parser = new pb::MessageParser<AxisAlignedBox2D>(() => new AxisAlignedBox2D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AxisAlignedBox2D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVectorFormat.OpenVectorFormatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AxisAlignedBox2D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AxisAlignedBox2D(AxisAlignedBox2D other) : this() {
      xMin_ = other.xMin_;
      yMin_ = other.yMin_;
      xMax_ = other.xMax_;
      yMax_ = other.yMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AxisAlignedBox2D Clone() {
      return new AxisAlignedBox2D(this);
    }

    /// <summary>Field number for the "x_min" field.</summary>
    public const int XMinFieldNumber = 1;
    private float xMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XMin {
      get { return xMin_; }
      set {
        xMin_ = value;
      }
    }

    /// <summary>Field number for the "y_min" field.</summary>
    public const int YMinFieldNumber = 2;
    private float yMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YMin {
      get { return yMin_; }
      set {
        yMin_ = value;
      }
    }

    /// <summary>Field number for the "x_max" field.</summary>
    public const int XMaxFieldNumber = 3;
    private float xMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XMax {
      get { return xMax_; }
      set {
        xMax_ = value;
      }
    }

    /// <summary>Field number for the "y_max" field.</summary>
    public const int YMaxFieldNumber = 4;
    private float yMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YMax {
      get { return yMax_; }
      set {
        yMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AxisAlignedBox2D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AxisAlignedBox2D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMin, other.XMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YMin, other.YMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMax, other.XMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YMax, other.YMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (XMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMin);
      if (YMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YMin);
      if (XMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMax);
      if (YMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (XMin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XMin);
      }
      if (YMin != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YMin);
      }
      if (XMax != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(XMax);
      }
      if (YMax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(YMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (XMin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XMin);
      }
      if (YMin != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YMin);
      }
      if (XMax != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(XMax);
      }
      if (YMax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(YMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (XMin != 0F) {
        size += 1 + 4;
      }
      if (YMin != 0F) {
        size += 1 + 4;
      }
      if (XMax != 0F) {
        size += 1 + 4;
      }
      if (YMax != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AxisAlignedBox2D other) {
      if (other == null) {
        return;
      }
      if (other.XMin != 0F) {
        XMin = other.XMin;
      }
      if (other.YMin != 0F) {
        YMin = other.YMin;
      }
      if (other.XMax != 0F) {
        XMax = other.XMax;
      }
      if (other.YMax != 0F) {
        YMax = other.YMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XMin = input.ReadFloat();
            break;
          }
          case 21: {
            YMin = input.ReadFloat();
            break;
          }
          case 29: {
            XMax = input.ReadFloat();
            break;
          }
          case 37: {
            YMax = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            XMin = input.ReadFloat();
            break;
          }
          case 21: {
            YMin = input.ReadFloat();
            break;
          }
          case 29: {
            XMax = input.ReadFloat();
            break;
          }
          case 37: {
            YMax = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
